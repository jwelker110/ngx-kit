{"files":[{"fileName":"index.ts","type":"ts","text":"export * from './public_api';\r\n","declars":[]},{"fileName":"public_api.ts","type":"ts","text":"export * from './src/kit-anchor/kit-anchor';\nexport * from './src/kit-check/kit-check';\nexport * from './src/kit-class/kit-class';\nexport * from './src/kit-collapse/kit-collapse';\nexport * from './src/kit-date-picker/kit-date-picker';\nexport * from './src/kit-event-manager/kit-event-manager';\nexport * from './src/kit-focus-listener/kit-focus-listener';\nexport * from './src/kit-focus-manager/kit-focus-manager';\nexport * from './src/kit-form-field/kit-form-field';\nexport * from './src/kit-form-touch/kit-form-touch';\nexport * from './src/kit-hammer/kit-hammer';\nexport * from './src/kit-icons/kit-icons';\nexport * from './src/kit-input-date/kit-input-date';\nexport * from './src/kit-intersection/kit-intersection';\nexport * from './src/kit-loading/kit-loading';\nexport * from './src/kit-mq/kit-mq';\nexport * from './src/kit-modal/kit-modal';\nexport * from './src/kit-moment/kit-moment';\nexport * from './src/kit-outside-click/kit-outside-click';\nexport * from './src/kit-overlay/kit-overlay';\nexport * from './src/kit-platform/kit-platform';\nexport * from './src/kit-position/kit-position';\nexport * from './src/kit-ref/kit-ref';\nexport * from './src/kit-repeat/kit-repeat';\nexport * from './src/kit-scroll/kit-scroll';\nexport * from './src/kit-slide/kit-slide';\nexport * from './src/kit-style/kit-style';\nexport * from './src/kit-value-accessor/kit-value-accessor';\nexport * from './src/util/util';\n","declars":[]},{"fileName":"src/kit-anchor/kit-anchor.directive.ts","type":"ts","text":"import { Directive, ElementRef, Input } from '@angular/core';\nimport { KitAnchor } from './meta';\n\n/**\n * Returns a reference to `elementRef` of any element.\n *\n * If you define a template reference on the element that Angular views as a host element of the component, you will\n * get a reference to the component instance. `kitAnchor` resolves the problem.\n *\n *\n * ### Usage\n *\n * ```html\n * <any-component kitAnchor #anchor=\"anchor\"></any-component>\n * <some-other-component [anchor]=\"anchor\"></some-other-component>\n * ```\n */\n@Directive({\n  selector: '[kitAnchor]',\n  exportAs: 'anchor',\n})\nexport class KitAnchorDirective implements KitAnchor {\n  /**\n   * @internal\n   */\n  @Input() kitAnchor: void;\n\n  constructor(private _elementRef: ElementRef) {\n  }\n\n  /**\n   * Get reference to anchored element.\n   */\n  get elementRef(): ElementRef {\n    return this._elementRef;\n  }\n\n  /**\n   * Get anchored html-element.\n   */\n  get nativeEl() {\n    return this._elementRef.nativeElement;\n  }\n}\n","declars":[{"kind":230,"kindString":"class","jsDoc":[{"comment":"Returns a reference to `elementRef` of any element.\n\nIf you define a template reference on the element that Angular views as a host element of the component, you will\nget a reference to the component instance. `kitAnchor` resolves the problem.\n\n\n### Usage\n\n```html\n<any-component kitAnchor #anchor=\"anchor\"></any-component>\n<some-other-component [anchor]=\"anchor\"></some-other-component>\n```","tags":[]}],"isInternal":false,"isDemo":false,"decorators":["@Directive({\n  selector: '[kitAnchor]',\n  exportAs: 'anchor',\n})"],"modifiers":["export"],"name":"KitAnchorDirective","members":[{"kind":150,"name":"kitAnchor","jsDoc":[{"tags":[{"name":"internal"}]}],"isInternal":true,"decorators":["@Input()"],"type":"void","text":"@Input() kitAnchor: void;","signature":"@Input() kitAnchor: void"},{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["private _elementRef: ElementRef"],"text":"constructor(private _elementRef: ElementRef) {\n  }","signature":"constructor(private _elementRef: ElementRef)"},{"kind":154,"name":"elementRef","jsDoc":[{"comment":"Get reference to anchored element.","tags":[]}],"isInternal":false,"parameters":[],"type":"ElementRef","text":"get elementRef(): ElementRef {\n    return this._elementRef;\n  }","signature":"get elementRef(): ElementRef"},{"kind":154,"name":"nativeEl","jsDoc":[{"comment":"Get anchored html-element.","tags":[]}],"isInternal":false,"parameters":[],"text":"get nativeEl() {\n    return this._elementRef.nativeElement;\n  }","signature":"get nativeEl()"}],"ngMeta":{"type":"Directive","decorator":{"selector":"'[kitAnchor]'","exportAs":"'anchor'"}}}]},{"fileName":"src/kit-anchor/kit-anchor.module.ts","type":"ts","text":"import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { KitAnchorDirective } from './kit-anchor.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  declarations: [\n    KitAnchorDirective,\n  ],\n  exports: [\n    KitAnchorDirective,\n  ],\n})\nexport class KitAnchorModule {\n}\n","declars":[{"kind":230,"kindString":"class","jsDoc":[],"isInternal":false,"isDemo":false,"decorators":["@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  declarations: [\n    KitAnchorDirective,\n  ],\n  exports: [\n    KitAnchorDirective,\n  ],\n})"],"modifiers":["export"],"name":"KitAnchorModule","members":[],"ngMeta":{"type":"NgModule","decorator":{"exports":"[\n    KitAnchorDirective,\n  ]"}}}]},{"fileName":"src/kit-anchor/kit-anchor.ts","type":"ts","text":"export * from './meta';\r\nexport * from './kit-anchor.directive';\r\nexport * from './kit-anchor.module';\r\n","declars":[]},{"fileName":"src/kit-anchor/meta.ts","type":"ts","text":"import { ElementRef } from '@angular/core';\r\n\r\nexport interface KitAnchor {\r\n  elementRef: ElementRef;\r\n  nativeEl: HTMLElement;\r\n}\r\n","declars":[{"kind":231,"kindString":"interface","jsDoc":[],"isInternal":false,"name":"KitAnchor","members":[{"kind":149,"jsDoc":[],"isInternal":false,"name":"elementRef","type":"ElementRef","text":"elementRef: ElementRef;","signature":"elementRef(): ElementRef"},{"kind":149,"jsDoc":[],"isInternal":false,"name":"nativeEl","type":"HTMLElement","text":"nativeEl: HTMLElement;","signature":"nativeEl(): HTMLElement"}]}]},{"fileName":"src/kit-check/kit-check.directive.ts","type":"ts","text":"import { Directive, forwardRef, Host, HostListener, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { KitClassService } from '../kit-class/kit-class.service';\nimport { isDefined } from '../util/is-defined';\n\nexport const KIT_CHECK_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => KitCheckDirective),\n  multi: true,\n};\n\n/**\n * Adds to any element ValueAccessor and checkbox/radio behavior.\n *\n * When is checked - adds class \"checked\" to the element.\n *\n * For a value changing the directive listen click event. Directive implements `ControlValueAccessor` interface and\n * changes `ngModel` value on click event.\n *\n *\n * ### Usage\n *\n * #### Emit checkboxes behavior:\n *\n * ```html\n * <button kitCheck [(ngModel)]=\"buttonModel1\">Checkbox button 1</button>\n * <button kitCheck [(ngModel)]=\"buttonModel2\">Checkbox button 2</button>\n * <button kitCheck [(ngModel)]=\"buttonModel3\">Checkbox button 3</button>\n * ```\n *\n * #### Emit radio behavior\n *\n * ```html\n * <button kitCheck [(ngModel)]=\"buttonModel\" [value]=\"1\">Radio button 1</button>\n * <button kitCheck [(ngModel)]=\"buttonModel\" [value]=\"2\">Radio button 2</button>\n * <button kitCheck [(ngModel)]=\"buttonModel\" [value]=\"3\">Radio button 3</button>\n * ```\n *\n *\n * ### Example\n *\n * * collection:button - [sources](https://github.com/ngx-kit/ngx-kit/tree/master/packages/collection/lib/ui-button),\n * [demo](http://ngx-kit.com/collection/module/ui-button)\n */\n@Directive({\n  selector: '[kitCheck]',\n  providers: [\n    KIT_CHECK_VALUE_ACCESSOR,\n    KitClassService,\n  ],\n})\nexport class KitCheckDirective implements OnChanges, ControlValueAccessor {\n  /**\n   * Class applied when active.\n   */\n  @Input() checkedClass = 'checked';\n\n  /**\n   * @internal\n   */\n  @Input() kitCheck: void;\n\n  /**\n   * Value that passed to VALUE_ACCESSOR.\n   *\n   * Enables radio-behavior.\n   */\n  @Input() value: any;\n\n  private changes = new Subject<boolean>();\n\n  private checked: boolean;\n\n  private disabled: boolean;\n\n  private touches = new Subject<void>();\n\n  constructor(@Host() private kitClass: KitClassService) {\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n  }\n\n  /**\n   * Listen to mouse clicks on element.\n   *\n   * @internal\n   */\n  @HostListener('click')\n  clickListener() {\n    if (isDefined(this.value)) {\n      // radio-mode\n      this.checked = true;\n      this.changes.next(this.value);\n    } else {\n      // checkbox-mode\n      this.checked = !this.checked;\n      this.changes.next(this.checked);\n    }\n    this.touches.next();\n    this.applyClass();\n  }\n\n  /**\n   * @internal\n   */\n  registerOnChange(fn: any) {\n    this.changes.subscribe(fn);\n  }\n\n  /**\n   * @internal\n   */\n  registerOnTouched(fn: any) {\n    this.touches.subscribe(fn);\n  }\n\n  /**\n   * @internal\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  /**\n   * @internal\n   */\n  writeValue(value: any) {\n    if (isDefined(this.value)) {\n      // radio-mode\n      this.checked = this.value === value;\n    } else {\n      // checkbox-mode\n      this.checked = value;\n    }\n    this.applyClass();\n  }\n\n  private applyClass() {\n    this.kitClass.apply({\n      checked: this.checked,\n    });\n  }\n}\n","declars":[{"kind":230,"kindString":"class","jsDoc":[{"comment":"Adds to any element ValueAccessor and checkbox/radio behavior.\n\nWhen is checked - adds class \"checked\" to the element.\n\nFor a value changing the directive listen click event. Directive implements `ControlValueAccessor` interface and\nchanges `ngModel` value on click event.\n\n\n### Usage\n\n#### Emit checkboxes behavior:\n\n```html\n<button kitCheck [(ngModel)]=\"buttonModel1\">Checkbox button 1</button>\n<button kitCheck [(ngModel)]=\"buttonModel2\">Checkbox button 2</button>\n<button kitCheck [(ngModel)]=\"buttonModel3\">Checkbox button 3</button>\n```\n\n#### Emit radio behavior\n\n```html\n<button kitCheck [(ngModel)]=\"buttonModel\" [value]=\"1\">Radio button 1</button>\n<button kitCheck [(ngModel)]=\"buttonModel\" [value]=\"2\">Radio button 2</button>\n<button kitCheck [(ngModel)]=\"buttonModel\" [value]=\"3\">Radio button 3</button>\n```\n\n\n### Example\n\n* collection:button - [sources](https://github.com/ngx-kit/ngx-kit/tree/master/packages/collection/lib/ui-button),\n[demo](http://ngx-kit.com/collection/module/ui-button)","tags":[]}],"isInternal":false,"isDemo":false,"decorators":["@Directive({\n  selector: '[kitCheck]',\n  providers: [\n    KIT_CHECK_VALUE_ACCESSOR,\n    KitClassService,\n  ],\n})"],"modifiers":["export"],"name":"KitCheckDirective","members":[{"kind":150,"name":"checkedClass","jsDoc":[{"comment":"Class applied when active.","tags":[]}],"isInternal":false,"decorators":["@Input()"],"initializer":"'checked'","text":"@Input() checkedClass = 'checked';","signature":"@Input() checkedClass = 'checked'"},{"kind":150,"name":"kitCheck","jsDoc":[{"tags":[{"name":"internal"}]}],"isInternal":true,"decorators":["@Input()"],"type":"void","text":"@Input() kitCheck: void;","signature":"@Input() kitCheck: void"},{"kind":150,"name":"value","jsDoc":[{"comment":"Value that passed to VALUE_ACCESSOR.\n\nEnables radio-behavior.","tags":[]}],"isInternal":false,"decorators":["@Input()"],"type":"any","text":"@Input() value: any;","signature":"@Input() value: any"},{"kind":150,"name":"changes","jsDoc":[],"isInternal":false,"modifiers":["private"],"initializer":"new Subject<boolean>()","text":"private changes = new Subject<boolean>();","signature":"private changes = new Subject<boolean>()"},{"kind":150,"name":"checked","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"boolean","text":"private checked: boolean;","signature":"private checked: boolean"},{"kind":150,"name":"disabled","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"boolean","text":"private disabled: boolean;","signature":"private disabled: boolean"},{"kind":150,"name":"touches","jsDoc":[],"isInternal":false,"modifiers":["private"],"initializer":"new Subject<void>()","text":"private touches = new Subject<void>();","signature":"private touches = new Subject<void>()"},{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["@Host() private kitClass: KitClassService"],"text":"constructor(@Host() private kitClass: KitClassService) {\n  }","signature":"constructor(@Host() private kitClass: KitClassService)"},{"kind":152,"name":"ngOnChanges","jsDoc":[],"isInternal":false,"parameters":["changes: SimpleChanges"],"text":"ngOnChanges(changes: SimpleChanges) {\n  }","signature":"ngOnChanges(changes: SimpleChanges)"},{"kind":152,"name":"clickListener","jsDoc":[{"comment":"Listen to mouse clicks on element.","tags":[{"name":"internal"}]}],"isInternal":true,"decorators":["@HostListener('click')"],"parameters":[],"text":"@HostListener('click')\n  clickListener() {\n    if (isDefined(this.value)) {\n      // radio-mode\n      this.checked = true;\n      this.changes.next(this.value);\n    } else {\n      // checkbox-mode\n      this.checked = !this.checked;\n      this.changes.next(this.checked);\n    }\n    this.touches.next();\n    this.applyClass();\n  }","signature":"@HostListener('click') clickListener()"},{"kind":152,"name":"registerOnChange","jsDoc":[{"tags":[{"name":"internal"}]}],"isInternal":true,"parameters":["fn: any"],"text":"registerOnChange(fn: any) {\n    this.changes.subscribe(fn);\n  }","signature":"registerOnChange(fn: any)"},{"kind":152,"name":"registerOnTouched","jsDoc":[{"tags":[{"name":"internal"}]}],"isInternal":true,"parameters":["fn: any"],"text":"registerOnTouched(fn: any) {\n    this.touches.subscribe(fn);\n  }","signature":"registerOnTouched(fn: any)"},{"kind":152,"name":"setDisabledState","jsDoc":[{"tags":[{"name":"internal"}]}],"isInternal":true,"parameters":["isDisabled: boolean"],"text":"setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }","signature":"setDisabledState(isDisabled: boolean)"},{"kind":152,"name":"writeValue","jsDoc":[{"tags":[{"name":"internal"}]}],"isInternal":true,"parameters":["value: any"],"text":"writeValue(value: any) {\n    if (isDefined(this.value)) {\n      // radio-mode\n      this.checked = this.value === value;\n    } else {\n      // checkbox-mode\n      this.checked = value;\n    }\n    this.applyClass();\n  }","signature":"writeValue(value: any)"},{"kind":152,"name":"applyClass","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":[],"text":"private applyClass() {\n    this.kitClass.apply({\n      checked: this.checked,\n    });\n  }","signature":"private applyClass()"}],"ngMeta":{"type":"Directive","decorator":{"selector":"'[kitCheck]'"}}}]},{"fileName":"src/kit-check/kit-check.module.ts","type":"ts","text":"import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { KitCheckDirective } from './kit-check.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  exports: [\r\n    KitCheckDirective,\r\n  ],\r\n  declarations: [\r\n    KitCheckDirective,\r\n  ],\r\n})\r\nexport class KitCheckModule {\r\n}\r\n","declars":[{"kind":230,"kindString":"class","jsDoc":[],"isInternal":false,"isDemo":false,"decorators":["@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  exports: [\r\n    KitCheckDirective,\r\n  ],\r\n  declarations: [\r\n    KitCheckDirective,\r\n  ],\r\n})"],"modifiers":["export"],"name":"KitCheckModule","members":[],"ngMeta":{"type":"NgModule","decorator":{"exports":"[\r\n    KitCheckDirective,\r\n  ]"}}}]},{"fileName":"src/kit-check/kit-check.ts","type":"ts","text":"export * from './kit-check.directive';\r\nexport * from './kit-check.module';\r\n","declars":[]},{"fileName":"src/kit-class/kit-class.directive.ts","type":"ts","text":"import { Directive, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { KitClassService } from './kit-class.service';\nimport { KitClassSetter } from './meta';\n\n/**\n * Provides `KitClassService` and pass input value to `KitClassService.apply` method.\n *\n *\n * ### Usage\n *\n * ```html\n * <div [kitClass]=\"{color: 'red', active: true, primary: false}\">\n * <!--<div class=\"color-red active\">-->\n * ```\n */\n@Directive({\n  selector: '[kitClass]',\n  providers: [KitClassService],\n})\nexport class KitClassDirective implements OnChanges {\n  @Input() kitClass: KitClassSetter;\n\n  constructor(private service: KitClassService) {\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['kitClass']) {\n      this.service.apply(this.kitClass);\n    }\n  }\n}\n","declars":[{"kind":230,"kindString":"class","jsDoc":[{"comment":"Provides `KitClassService` and pass input value to `KitClassService.apply` method.\n\n\n### Usage\n\n```html\n<div [kitClass]=\"{color: 'red', active: true, primary: false}\">\n<!--<div class=\"color-red active\">-->\n```","tags":[]}],"isInternal":false,"isDemo":false,"decorators":["@Directive({\n  selector: '[kitClass]',\n  providers: [KitClassService],\n})"],"modifiers":["export"],"name":"KitClassDirective","members":[{"kind":150,"name":"kitClass","jsDoc":[],"isInternal":false,"decorators":["@Input()"],"type":"KitClassSetter","text":"@Input() kitClass: KitClassSetter;","signature":"@Input() kitClass: KitClassSetter"},{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["private service: KitClassService"],"text":"constructor(private service: KitClassService) {\n  }","signature":"constructor(private service: KitClassService)"},{"kind":152,"name":"ngOnChanges","jsDoc":[],"isInternal":false,"parameters":["changes: SimpleChanges"],"text":"ngOnChanges(changes: SimpleChanges) {\n    if (changes['kitClass']) {\n      this.service.apply(this.kitClass);\n    }\n  }","signature":"ngOnChanges(changes: SimpleChanges)"}],"ngMeta":{"type":"Directive","decorator":{"selector":"'[kitClass]'"}}}]},{"fileName":"src/kit-class/kit-class.module.ts","type":"ts","text":"import { NgModule } from '@angular/core';\r\nimport { KitClassDirective } from './kit-class.directive';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    KitClassDirective,\r\n  ],\r\n  exports: [\r\n    KitClassDirective,\r\n  ],\r\n})\r\nexport class KitClassModule {\r\n}\r\n","declars":[{"kind":230,"kindString":"class","jsDoc":[],"isInternal":false,"isDemo":false,"decorators":["@NgModule({\r\n  declarations: [\r\n    KitClassDirective,\r\n  ],\r\n  exports: [\r\n    KitClassDirective,\r\n  ],\r\n})"],"modifiers":["export"],"name":"KitClassModule","members":[],"ngMeta":{"type":"NgModule","decorator":{"exports":"[\r\n    KitClassDirective,\r\n  ]"}}}]},{"fileName":"src/kit-class/kit-class.service.ts","type":"ts","text":"import { ElementRef, Injectable, IterableChanges, IterableDiffer, IterableDiffers, Renderer2 } from '@angular/core';\nimport { isString } from '../util/is-string';\nimport { KitClassSetter } from './meta';\n\n/**\n * Apply classes to an element.\n *\n * Must be provided on a component or directive.\n *\n *\n * ### Usage\n *\n * ```typescript\n * constructor(private kitClass: KitClassService) {}\n * ...\n * this.kitClass.apply({color: 'red', active: true, primary: false});\n * ```\n *\n * Adds to element: `class=\"color-red active\"`\n *\n *\n * ### Example\n *\n * * collection:button - [sources](https://github.com/ngx-kit/ngx-kit/tree/master/packages/collection/lib/ui-button),\n * [demo](http://ngx-kit.com/collection/module/ui-button)\n */\n@Injectable()\nexport class KitClassService {\n  private _state: KitClassSetter = {};\n\n  private _differ: IterableDiffer<string>;\n\n  constructor(\n    private renderer: Renderer2,\n    private el: ElementRef,\n    private differs: IterableDiffers,\n  ) {\n  }\n\n  /**\n   * Override class declaration state.\n   */\n  set state(setterRaw: KitClassSetter) {\n    const newState = {...setterRaw};\n    this.process(newState);\n  }\n\n  /**\n   * Merge to class declaration state.\n   */\n  apply(setter: KitClassSetter): void {\n    const newState = {...this._state, ...setter};\n    this.process(newState);\n  }\n\n  private process(newState: KitClassSetter) {\n    const classList = this.processObj(newState);\n    if (!this._differ) {\n      this._differ = this.differs.find(classList).create();\n    }\n    const changes = this._differ.diff(classList);\n    if (changes) {\n      this.applyChanges(changes);\n      this._state = newState;\n    }\n  }\n\n  private applyChanges(changes: IterableChanges<string>) {\n    changes.forEachRemovedItem((record) => this.renderer.removeClass(this.el.nativeElement, record.item));\n    changes.forEachAddedItem((record) => this.renderer.addClass(this.el.nativeElement, record.item));\n  }\n\n  private processObj(obj: any): string[] {\n    return Object.keys(obj)\n      .map((key: string) => {\n        const value = obj[key];\n        return isString(value)\n          ? `${key}-${value}`\n          : !!value\n            ? key\n            : null;\n      })\n      .filter(isString);\n  }\n}\n","declars":[{"kind":230,"kindString":"class","jsDoc":[{"comment":"Apply classes to an element.\n\nMust be provided on a component or directive.\n\n\n### Usage\n\n```typescript\nconstructor(private kitClass: KitClassService) {}\n...\nthis.kitClass.apply({color: 'red', active: true, primary: false});\n```\n\nAdds to element: `class=\"color-red active\"`\n\n\n### Example\n\n* collection:button - [sources](https://github.com/ngx-kit/ngx-kit/tree/master/packages/collection/lib/ui-button),\n[demo](http://ngx-kit.com/collection/module/ui-button)","tags":[]}],"isInternal":false,"isDemo":false,"decorators":["@Injectable()"],"modifiers":["export"],"name":"KitClassService","members":[{"kind":150,"name":"_state","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"KitClassSetter","initializer":"{}","text":"private _state: KitClassSetter = {};","signature":"private _state: KitClassSetter = {}"},{"kind":150,"name":"_differ","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"IterableDiffer<string>","text":"private _differ: IterableDiffer<string>;","signature":"private _differ: IterableDiffer<string>"},{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["private renderer: Renderer2","private el: ElementRef","private differs: IterableDiffers"],"text":"constructor(\n    private renderer: Renderer2,\n    private el: ElementRef,\n    private differs: IterableDiffers,\n  ) {\n  }","signature":"constructor(private renderer: Renderer2, private el: ElementRef, private differs: IterableDiffers)"},{"kind":155,"name":"state","jsDoc":[{"comment":"Override class declaration state.","tags":[]}],"isInternal":false,"parameters":["setterRaw: KitClassSetter"],"text":"set state(setterRaw: KitClassSetter) {\n    const newState = {...setterRaw};\n    this.process(newState);\n  }","signature":"set state(setterRaw: KitClassSetter)"},{"kind":152,"name":"apply","jsDoc":[{"comment":"Merge to class declaration state.","tags":[]}],"isInternal":false,"parameters":["setter: KitClassSetter"],"type":"void","text":"apply(setter: KitClassSetter): void {\n    const newState = {...this._state, ...setter};\n    this.process(newState);\n  }","signature":"apply(setter: KitClassSetter): void"},{"kind":152,"name":"process","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":["newState: KitClassSetter"],"text":"private process(newState: KitClassSetter) {\n    const classList = this.processObj(newState);\n    if (!this._differ) {\n      this._differ = this.differs.find(classList).create();\n    }\n    const changes = this._differ.diff(classList);\n    if (changes) {\n      this.applyChanges(changes);\n      this._state = newState;\n    }\n  }","signature":"private process(newState: KitClassSetter)"},{"kind":152,"name":"applyChanges","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":["changes: IterableChanges<string>"],"text":"private applyChanges(changes: IterableChanges<string>) {\n    changes.forEachRemovedItem((record) => this.renderer.removeClass(this.el.nativeElement, record.item));\n    changes.forEachAddedItem((record) => this.renderer.addClass(this.el.nativeElement, record.item));\n  }","signature":"private applyChanges(changes: IterableChanges<string>)"},{"kind":152,"name":"processObj","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":["obj: any"],"type":"string[]","text":"private processObj(obj: any): string[] {\n    return Object.keys(obj)\n      .map((key: string) => {\n        const value = obj[key];\n        return isString(value)\n          ? `${key}-${value}`\n          : !!value\n            ? key\n            : null;\n      })\n      .filter(isString);\n  }","signature":"private processObj(obj: any): string[]"}],"ngMeta":{"type":"Injectable","decorator":{}}}]},{"fileName":"src/kit-class/kit-class.ts","type":"ts","text":"export * from './kit-class.directive';\r\nexport * from './kit-class.module';\r\nexport * from './kit-class.service';\r\nexport * from './meta';\r\n","declars":[]},{"fileName":"src/kit-class/meta.ts","type":"ts","text":"export interface KitClassSetter {\n  [key: string]: KitClassValue;\n}\n\nexport type KitClassValue = string | number | boolean | null;\n","declars":[{"kind":231,"kindString":"interface","jsDoc":[],"isInternal":false,"name":"KitClassSetter","members":[{"kind":158,"jsDoc":[],"isInternal":false,"parameters":["key: string"],"type":"KitClassValue","text":"[key: string]: KitClassValue;","signature":"[key: string]: KitClassValue"}]},{"kind":232,"kindString":"typeAlias","jsDoc":[],"isInternal":false,"name":"KitClassValue","type":"string | number | boolean | null","text":"export type KitClassValue = string | number | boolean | null;"}]},{"fileName":"src/kit-collapse/kit-collapse-host.service.ts","type":"ts","text":"import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { KitCollapseId } from './meta';\n\n/**\n * Controls set of collapsible items.\n *\n * Should be provided on component or directive.\n */\n@Injectable()\nexport class KitCollapseHostService {\n  multiple = false;\n\n  private _active = new BehaviorSubject<Set<KitCollapseId>>(new Set<KitCollapseId>());\n\n  private ids = new Set<KitCollapseId>();\n\n  /**\n   * Get `Observable` with activated items.\n   */\n  get activeChanges(): Observable<Set<KitCollapseId>> {\n    return this._active.asObservable();\n  }\n\n  /**\n   * Get Set with activated items.\n   */\n  get active(): Set<KitCollapseId> {\n    return new Set(this._active.value);\n  }\n\n  /**\n   * Activate item with id.\n   */\n  activate(id: KitCollapseId) {\n    const current = this._active.value;\n    if (!current.has(id)) {\n      if (this.multiple) {\n        this._active.next(new Set(current).add(id));\n      } else {\n        this._active.next(new Set().add(id));\n      }\n    }\n  }\n\n  /**\n   * Activate first registered item.\n   */\n  activateFirst() {\n    this.activate(this.ids.values().next().value);\n  }\n\n  /**\n   * Add item.\n   */\n  addId(id: KitCollapseId) {\n    this.ids.add(id);\n  }\n\n  /**\n   * Deactivate item.\n   */\n  deactivate(id: KitCollapseId) {\n    const current = this._active.value;\n    if (current.has(id)) {\n      this._active.next(new Set(Array.from(current).filter(i => i !== id)));\n    }\n  }\n\n  /**\n   * Delete item.\n   */\n  deleteId(id: KitCollapseId) {\n    this.ids.delete(id);\n  }\n\n  /**\n   * Is item activated.\n   */\n  isActive(id: KitCollapseId): boolean {\n    const current = this._active.value;\n    return current.has(id);\n  }\n\n  /**\n   * Change item activation state.\n   */\n  toggle(id: KitCollapseId) {\n    const current = this._active.value;\n    if (current.has(id)) {\n      this.deactivate(id);\n    } else {\n      this.activate(id);\n    }\n  }\n}\n","declars":[{"kind":230,"kindString":"class","jsDoc":[{"comment":"Controls set of collapsible items.\n\nShould be provided on component or directive.","tags":[]}],"isInternal":false,"isDemo":false,"decorators":["@Injectable()"],"modifiers":["export"],"name":"KitCollapseHostService","members":[{"kind":150,"name":"multiple","jsDoc":[],"isInternal":false,"initializer":"false","text":"multiple = false;","signature":"multiple = false"},{"kind":150,"name":"_active","jsDoc":[],"isInternal":false,"modifiers":["private"],"initializer":"new BehaviorSubject<Set<KitCollapseId>>(new Set<KitCollapseId>())","text":"private _active = new BehaviorSubject<Set<KitCollapseId>>(new Set<KitCollapseId>());","signature":"private _active = new BehaviorSubject<Set<KitCollapseId>>(new Set<KitCollapseId>())"},{"kind":150,"name":"ids","jsDoc":[],"isInternal":false,"modifiers":["private"],"initializer":"new Set<KitCollapseId>()","text":"private ids = new Set<KitCollapseId>();","signature":"private ids = new Set<KitCollapseId>()"},{"kind":154,"name":"activeChanges","jsDoc":[{"comment":"Get `Observable` with activated items.","tags":[]}],"isInternal":false,"parameters":[],"type":"Observable<Set<KitCollapseId>>","text":"get activeChanges(): Observable<Set<KitCollapseId>> {\n    return this._active.asObservable();\n  }","signature":"get activeChanges(): Observable<Set<KitCollapseId>>"},{"kind":154,"name":"active","jsDoc":[{"comment":"Get Set with activated items.","tags":[]}],"isInternal":false,"parameters":[],"type":"Set<KitCollapseId>","text":"get active(): Set<KitCollapseId> {\n    return new Set(this._active.value);\n  }","signature":"get active(): Set<KitCollapseId>"},{"kind":152,"name":"activate","jsDoc":[{"comment":"Activate item with id.","tags":[]}],"isInternal":false,"parameters":["id: KitCollapseId"],"text":"activate(id: KitCollapseId) {\n    const current = this._active.value;\n    if (!current.has(id)) {\n      if (this.multiple) {\n        this._active.next(new Set(current).add(id));\n      } else {\n        this._active.next(new Set().add(id));\n      }\n    }\n  }","signature":"activate(id: KitCollapseId)"},{"kind":152,"name":"activateFirst","jsDoc":[{"comment":"Activate first registered item.","tags":[]}],"isInternal":false,"parameters":[],"text":"activateFirst() {\n    this.activate(this.ids.values().next().value);\n  }","signature":"activateFirst()"},{"kind":152,"name":"addId","jsDoc":[{"comment":"Add item.","tags":[]}],"isInternal":false,"parameters":["id: KitCollapseId"],"text":"addId(id: KitCollapseId) {\n    this.ids.add(id);\n  }","signature":"addId(id: KitCollapseId)"},{"kind":152,"name":"deactivate","jsDoc":[{"comment":"Deactivate item.","tags":[]}],"isInternal":false,"parameters":["id: KitCollapseId"],"text":"deactivate(id: KitCollapseId) {\n    const current = this._active.value;\n    if (current.has(id)) {\n      this._active.next(new Set(Array.from(current).filter(i => i !== id)));\n    }\n  }","signature":"deactivate(id: KitCollapseId)"},{"kind":152,"name":"deleteId","jsDoc":[{"comment":"Delete item.","tags":[]}],"isInternal":false,"parameters":["id: KitCollapseId"],"text":"deleteId(id: KitCollapseId) {\n    this.ids.delete(id);\n  }","signature":"deleteId(id: KitCollapseId)"},{"kind":152,"name":"isActive","jsDoc":[{"comment":"Is item activated.","tags":[]}],"isInternal":false,"parameters":["id: KitCollapseId"],"type":"boolean","text":"isActive(id: KitCollapseId): boolean {\n    const current = this._active.value;\n    return current.has(id);\n  }","signature":"isActive(id: KitCollapseId): boolean"},{"kind":152,"name":"toggle","jsDoc":[{"comment":"Change item activation state.","tags":[]}],"isInternal":false,"parameters":["id: KitCollapseId"],"text":"toggle(id: KitCollapseId) {\n    const current = this._active.value;\n    if (current.has(id)) {\n      this.deactivate(id);\n    } else {\n      this.activate(id);\n    }\n  }","signature":"toggle(id: KitCollapseId)"}],"ngMeta":{"type":"Injectable","decorator":{}}}]},{"fileName":"src/kit-collapse/kit-collapse-item.service.ts","type":"ts","text":"import { Injectable, OnDestroy } from '@angular/core';\nimport { uuid } from '../util/uuid';\nimport { KitCollapseHostService } from './kit-collapse-host.service';\nimport { KitCollapseId } from './meta';\n\n/**\n * Controls state of a collapsible item.\n *\n * Should be provided on component or directive.\n */\n@Injectable()\nexport class KitCollapseItemService implements OnDestroy {\n  private _id: KitCollapseId;\n\n  constructor(private host: KitCollapseHostService) {\n    this.id = uuid();\n  }\n\n  /**\n   * Is item activated.\n   */\n  get active(): boolean {\n    return this.host.isActive(this._id);\n  }\n\n  /**\n   * Set activation state.\n   */\n  set active(active: boolean) {\n    if (active) {\n      this.host.activate(this._id);\n    } else {\n      this.host.deactivate(this._id);\n    }\n  }\n\n  /**\n   * Get item id.\n   */\n  get id(): KitCollapseId {\n    return this._id;\n  }\n\n  /**\n   * Set item id.\n   */\n  set id(id: KitCollapseId) {\n    if (id) {\n      this.host.deleteId(this._id);\n      this.host.addId(id);\n      this._id = id;\n    } else {\n      throw new Error('id is empty');\n    }\n  }\n\n  ngOnDestroy() {\n    this.host.deleteId(this._id);\n  }\n\n  /**\n   * Toggle activation state.\n   */\n  toggle() {\n    this.host.toggle(this._id);\n  }\n}\n","declars":[{"kind":230,"kindString":"class","jsDoc":[{"comment":"Controls state of a collapsible item.\n\nShould be provided on component or directive.","tags":[]}],"isInternal":false,"isDemo":false,"decorators":["@Injectable()"],"modifiers":["export"],"name":"KitCollapseItemService","members":[{"kind":150,"name":"_id","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"KitCollapseId","text":"private _id: KitCollapseId;","signature":"private _id: KitCollapseId"},{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["private host: KitCollapseHostService"],"text":"constructor(private host: KitCollapseHostService) {\n    this.id = uuid();\n  }","signature":"constructor(private host: KitCollapseHostService)"},{"kind":154,"name":"active","jsDoc":[{"comment":"Is item activated.","tags":[]}],"isInternal":false,"parameters":[],"type":"boolean","text":"get active(): boolean {\n    return this.host.isActive(this._id);\n  }","signature":"get active(): boolean"},{"kind":155,"name":"active","jsDoc":[{"comment":"Set activation state.","tags":[]}],"isInternal":false,"parameters":["active: boolean"],"text":"set active(active: boolean) {\n    if (active) {\n      this.host.activate(this._id);\n    } else {\n      this.host.deactivate(this._id);\n    }\n  }","signature":"set active(active: boolean)"},{"kind":154,"name":"id","jsDoc":[{"comment":"Get item id.","tags":[]}],"isInternal":false,"parameters":[],"type":"KitCollapseId","text":"get id(): KitCollapseId {\n    return this._id;\n  }","signature":"get id(): KitCollapseId"},{"kind":155,"name":"id","jsDoc":[{"comment":"Set item id.","tags":[]}],"isInternal":false,"parameters":["id: KitCollapseId"],"text":"set id(id: KitCollapseId) {\n    if (id) {\n      this.host.deleteId(this._id);\n      this.host.addId(id);\n      this._id = id;\n    } else {\n      throw new Error('id is empty');\n    }\n  }","signature":"set id(id: KitCollapseId)"},{"kind":152,"name":"ngOnDestroy","jsDoc":[],"isInternal":false,"parameters":[],"text":"ngOnDestroy() {\n    this.host.deleteId(this._id);\n  }","signature":"ngOnDestroy()"},{"kind":152,"name":"toggle","jsDoc":[{"comment":"Toggle activation state.","tags":[]}],"isInternal":false,"parameters":[],"text":"toggle() {\n    this.host.toggle(this._id);\n  }","signature":"toggle()"}],"ngMeta":{"type":"Injectable","decorator":{}}}]},{"fileName":"src/kit-collapse/kit-collapse.module.ts","type":"ts","text":"import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { KitCollapseDirective } from './kit-collapse/kit-collapse.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  exports: [\r\n    KitCollapseDirective,\r\n  ],\r\n  declarations: [\r\n    KitCollapseDirective,\r\n  ],\r\n})\r\nexport class KitCollapseModule {\r\n}\r\n","declars":[{"kind":230,"kindString":"class","jsDoc":[],"isInternal":false,"isDemo":false,"decorators":["@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  exports: [\r\n    KitCollapseDirective,\r\n  ],\r\n  declarations: [\r\n    KitCollapseDirective,\r\n  ],\r\n})"],"modifiers":["export"],"name":"KitCollapseModule","members":[],"ngMeta":{"type":"NgModule","decorator":{"exports":"[\r\n    KitCollapseDirective,\r\n  ]"}}}]},{"fileName":"src/kit-collapse/kit-collapse.ts","type":"ts","text":"export * from './kit-collapse/kit-collapse.directive';\r\nexport * from './kit-collapse.module';\r\nexport * from './kit-collapse-host.service';\r\nexport * from './kit-collapse-item.service';\r\nexport * from './meta';\r\n","declars":[]},{"fileName":"src/kit-collapse/kit-collapse/kit-collapse.directive.ts","type":"ts","text":"import { Directive, Input, OnDestroy, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { KitCollapseHostService } from '../kit-collapse-host.service';\r\nimport { KitCollapseItemService } from '../kit-collapse-item.service';\r\n\r\n/**\r\n * Structure directive that collapsing.\r\n *\r\n * State based on `KitCollapseItemService` provided on a parent.\r\n */\r\n@Directive({\r\n  selector: '[kitCollapse]',\r\n})\r\nexport class KitCollapseDirective implements OnInit, OnDestroy {\r\n  @Input() kitCollapse: void;\r\n\r\n  private destroy = new Subject<void>();\r\n\r\n  private displayed = false;\r\n\r\n  constructor(\r\n    private vcr: ViewContainerRef,\r\n    private template: TemplateRef<any>,\r\n    private host: KitCollapseHostService,\r\n    private item: KitCollapseItemService,\r\n  ) {\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroy.next();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.host.activeChanges\r\n      .pipe(takeUntil(this.destroy))\r\n      .subscribe(ids => {\r\n        if (ids.has(this.item.id)) {\r\n          if (!this.displayed) {\r\n            this.vcr.createEmbeddedView(this.template);\r\n            this.displayed = true;\r\n          }\r\n        } else {\r\n          if (this.displayed) {\r\n            this.vcr.clear();\r\n            this.displayed = false;\r\n          }\r\n        }\r\n      });\r\n  }\r\n}\r\n","declars":[{"kind":230,"kindString":"class","jsDoc":[{"comment":"Structure directive that collapsing.\r\n\r\nState based on `KitCollapseItemService` provided on a parent.","tags":[]}],"isInternal":false,"isDemo":false,"decorators":["@Directive({\r\n  selector: '[kitCollapse]',\r\n})"],"modifiers":["export"],"name":"KitCollapseDirective","members":[{"kind":150,"name":"kitCollapse","jsDoc":[],"isInternal":false,"decorators":["@Input()"],"type":"void","text":"@Input() kitCollapse: void;","signature":"@Input() kitCollapse: void"},{"kind":150,"name":"destroy","jsDoc":[],"isInternal":false,"modifiers":["private"],"initializer":"new Subject<void>()","text":"private destroy = new Subject<void>();","signature":"private destroy = new Subject<void>()"},{"kind":150,"name":"displayed","jsDoc":[],"isInternal":false,"modifiers":["private"],"initializer":"false","text":"private displayed = false;","signature":"private displayed = false"},{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["private vcr: ViewContainerRef","private template: TemplateRef<any>","private host: KitCollapseHostService","private item: KitCollapseItemService"],"text":"constructor(\r\n    private vcr: ViewContainerRef,\r\n    private template: TemplateRef<any>,\r\n    private host: KitCollapseHostService,\r\n    private item: KitCollapseItemService,\r\n  ) {\r\n  }","signature":"constructor(private vcr: ViewContainerRef, private template: TemplateRef<any>, private host: KitCollapseHostService, private item: KitCollapseItemService)"},{"kind":152,"name":"ngOnDestroy","jsDoc":[],"isInternal":false,"parameters":[],"text":"ngOnDestroy() {\r\n    this.destroy.next();\r\n  }","signature":"ngOnDestroy()"},{"kind":152,"name":"ngOnInit","jsDoc":[],"isInternal":false,"parameters":[],"text":"ngOnInit() {\r\n    this.host.activeChanges\r\n      .pipe(takeUntil(this.destroy))\r\n      .subscribe(ids => {\r\n        if (ids.has(this.item.id)) {\r\n          if (!this.displayed) {\r\n            this.vcr.createEmbeddedView(this.template);\r\n            this.displayed = true;\r\n          }\r\n        } else {\r\n          if (this.displayed) {\r\n            this.vcr.clear();\r\n            this.displayed = false;\r\n          }\r\n        }\r\n      });\r\n  }","signature":"ngOnInit()"}],"ngMeta":{"type":"Directive","decorator":{"selector":"'[kitCollapse]'"}}}]},{"fileName":"src/kit-collapse/meta.ts","type":"ts","text":"export type KitCollapseId = string | number | null;\r\n","declars":[{"kind":232,"kindString":"typeAlias","jsDoc":[],"isInternal":false,"name":"KitCollapseId","type":"string | number | null","text":"export type KitCollapseId = string | number | null;"}]},{"fileName":"src/kit-date-picker/kit-date-picker.service.ts","type":"ts","text":"import { Injectable, OnDestroy, Optional, Renderer2 } from '@angular/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { KitDatePickerGrid } from './meta';\n\n/**\n * Service encapsulates complex date-picker grid logic.\n *\n *\n * ### Example\n *\n * * collection:date-picker -\n * [sources](https://github.com/ngx-kit/ngx-kit/tree/master/packages/collection/lib/ui-date-picker),\n * [demo](https://ngx-kit.com/collection/module/ui-date-picker)\n */\n@Injectable()\nexport class KitDatePickerService implements OnDestroy {\n  private _active: Date;\n\n  private _focus: Date;\n\n  private moveHandlerUnsubs: any[] = [];\n\n  private readonly _grid = new BehaviorSubject<KitDatePickerGrid>([]);\n\n  private readonly _monthCursor = new BehaviorSubject<Date | null>(null);\n\n  private readonly _pick = new Subject<Date>();\n\n  constructor(@Optional() private renderer: Renderer2) {\n  }\n\n  /**\n   * Get active date.\n   */\n  get active() {\n    return new Date();\n  }\n\n  /**\n   * Set active date.\n   */\n  set active(date: Date) {\n    this._active = new Date(date);\n    this._focus = new Date(date);\n    this.updateGrid();\n  }\n\n  /**\n   * Observable with grid state.\n   */\n  get gridChanges(): Observable<KitDatePickerGrid> {\n    return this._grid.asObservable();\n  }\n\n  /**\n   * Observable with month cursor state.\n   */\n  get monthCursorChanges(): Observable<Date | null> {\n    return this._monthCursor.asObservable();\n  }\n\n  /**\n   * Observable with pick date events.\n   */\n  get pick(): Observable<Date> {\n    return this._pick.asObservable();\n  }\n\n  /**\n   * Weekdays array.\n   */\n  get weekdays(): Date[] {\n    const weekdays = [];\n    const cursor = this.startOfWeek(new Date());\n    for (let i = 0; i < 7; i++) {\n      weekdays.push(new Date(cursor));\n      cursor.setDate(cursor.getDate() + 1);\n    }\n    return weekdays;\n  }\n\n  ngOnDestroy() {\n    this.moveHandlerUnsubs.forEach(u => u());\n  }\n\n  /**\n   * Focus date (open correspondent month).\n   */\n  focus(date: Date) {\n    this._focus = new Date(date);\n    this.updateGrid();\n  }\n\n  /**\n   * Modify opened month.\n   */\n  modMonth(modifier: number) {\n    this._focus.setMonth(this._focus.getMonth() + modifier);\n    this.updateGrid();\n  }\n\n  /**\n   * Modify opened year.\n   */\n  modYear(modifier: number) {\n    this._focus.setFullYear(this._focus.getFullYear() + modifier);\n    this.updateGrid();\n  }\n\n  /**\n   * Handle keyboard movement.\n   */\n  handleMove(target: any) {\n    if (this.renderer) {\n      this.moveHandlerUnsubs = [\n        this.renderer.listen(target, 'keydown.ArrowRight', e => {\n          e.preventDefault();\n          this._focus.setDate(this._focus.getDate() + 1);\n          this.updateGrid();\n        }),\n        this.renderer.listen(target, 'keydown.ArrowLeft', e => {\n          e.preventDefault();\n          this._focus.setDate(this._focus.getDate() - 1);\n          this.updateGrid();\n        }),\n        this.renderer.listen(target, 'keydown.ArrowUp', e => {\n          e.preventDefault();\n          this._focus.setDate(this._focus.getDate() - 7);\n          this.updateGrid();\n        }),\n        this.renderer.listen(target, 'keydown.ArrowDown', e => {\n          e.preventDefault();\n          this._focus.setDate(this._focus.getDate() + 7);\n          this.updateGrid();\n        }),\n        this.renderer.listen(target, 'keydown.Home', e => {\n          e.preventDefault();\n          this._focus.setDate(1);\n          this.updateGrid();\n        }),\n        this.renderer.listen(target, 'keydown.End', e => {\n          e.preventDefault();\n          this._focus.setMonth(this._focus.getMonth() + 1, 0);\n          this.updateGrid();\n        }),\n        this.renderer.listen(target, 'keydown.PageUp', e => {\n          e.preventDefault();\n          this.modMonth(-1);\n        }),\n        this.renderer.listen(target, 'keydown.PageDown', e => {\n          e.preventDefault();\n          this.modMonth(1);\n        }),\n        this.renderer.listen(target, 'keydown.Alt.PageUp', e => {\n          e.preventDefault();\n          this.modYear(-1);\n        }),\n        this.renderer.listen(target, 'keydown.Alt.PageDown', e => {\n          e.preventDefault();\n          this.modYear(1);\n        }),\n        this.renderer.listen(target, 'keydown.Enter', e => {\n          e.preventDefault();\n          this._pick.next(new Date(this._focus));\n        }),\n        this.renderer.listen(target, 'keydown.Space', e => {\n          e.preventDefault();\n          this._pick.next(new Date(this._focus));\n        }),\n      ];\n    }\n  }\n\n  /**\n   * Compare two dates.\n   */\n  private isDatesEqual(x: Date, y: Date): boolean {\n    if (x && y) {\n      // @todo improve performance: cache xp, yp\n      const xp = new Date(x);\n      xp.setHours(0, 0, 0, 0);\n      const yp = new Date(y);\n      yp.setHours(0, 0, 0, 0);\n      return +xp === +yp;\n    } else {\n      throw new Error('isDatesEqual params error');\n    }\n  }\n\n  /**\n   * Start of month of passed date.\n   */\n  private startOfMonth(curr: Date) {\n    return new Date(curr.getFullYear(), curr.getMonth(), 1);\n  }\n\n  /**\n   * Start of week of passed date.\n   */\n  private startOfWeek(curr: Date) {\n    const date = new Date(curr);\n    const day = date.getDay() || 7;\n    if (day !== 1) {\n      date.setHours(-24 * (day - 1));\n    }\n    return date;\n  }\n\n  /**\n   * Redraw grid based on monthCursor and current date.\n   */\n  private updateGrid() {\n    if (this._monthCursor.value &&\n      this.isDatesEqual(this.startOfMonth(this._focus), this.startOfMonth(this._monthCursor.value))) {\n      // update current grid\n      const grid = this._grid.value;\n      grid.forEach(r => r.forEach(c => {\n        c.active = this.isDatesEqual(c.date, this._active);\n        c.focus = this.isDatesEqual(c.date, this._focus);\n      }));\n      this._grid.next(grid);\n    } else {\n      // recompile grid\n      const month = this.startOfMonth(this._focus);\n      const grid = [];\n      const cursor = this.startOfWeek(month);\n      for (let row = 0; row < this.weeksInMonth(month); row++) {\n        const line = [];\n        for (let col = 0; col < 7; col++) {\n          const date = new Date(cursor);\n          line.push({\n            active: this.isDatesEqual(date, this._active),\n            date,\n            focus: this.isDatesEqual(date, this._focus),\n            outside: date.getMonth() !== month.getMonth(),\n          });\n          cursor.setDate(cursor.getDate() + 1);\n        }\n        grid.push(line);\n      }\n      this._monthCursor.next(month);\n      this._grid.next(grid);\n    }\n  }\n\n  /**\n   * Calc number of weeks in month.\n   */\n  private weeksInMonth(curr: Date): number {\n    const firstOfMonth = new Date(curr.getFullYear(), curr.getMonth(), 1);\n    let day = firstOfMonth.getDay() || 6;\n    day = day === 1 ? 0 : day;\n    if (day) {\n      day--;\n    }\n    let diff = 7 - day;\n    const lastOfMonth = new Date(curr.getFullYear(), curr.getMonth() + 1, 0);\n    const lastDate = lastOfMonth.getDate();\n    if (lastOfMonth.getDay() === 1) {\n      diff--;\n    }\n    return Math.ceil((lastDate - diff) / 7) + 1;\n  }\n}\n","declars":[{"kind":230,"kindString":"class","jsDoc":[{"comment":"Service encapsulates complex date-picker grid logic.\n\n\n### Example\n\n* collection:date-picker -\n[sources](https://github.com/ngx-kit/ngx-kit/tree/master/packages/collection/lib/ui-date-picker),\n[demo](https://ngx-kit.com/collection/module/ui-date-picker)","tags":[]}],"isInternal":false,"isDemo":false,"decorators":["@Injectable()"],"modifiers":["export"],"name":"KitDatePickerService","members":[{"kind":150,"name":"_active","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"Date","text":"private _active: Date;","signature":"private _active: Date"},{"kind":150,"name":"_focus","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"Date","text":"private _focus: Date;","signature":"private _focus: Date"},{"kind":150,"name":"moveHandlerUnsubs","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"any[]","initializer":"[]","text":"private moveHandlerUnsubs: any[] = [];","signature":"private moveHandlerUnsubs: any[] = []"},{"kind":150,"name":"_grid","jsDoc":[],"isInternal":false,"modifiers":["private","readonly"],"initializer":"new BehaviorSubject<KitDatePickerGrid>([])","text":"private readonly _grid = new BehaviorSubject<KitDatePickerGrid>([]);","signature":"private readonly _grid = new BehaviorSubject<KitDatePickerGrid>([])"},{"kind":150,"name":"_monthCursor","jsDoc":[],"isInternal":false,"modifiers":["private","readonly"],"initializer":"new BehaviorSubject<Date | null>(null)","text":"private readonly _monthCursor = new BehaviorSubject<Date | null>(null);","signature":"private readonly _monthCursor = new BehaviorSubject<Date | null>(null)"},{"kind":150,"name":"_pick","jsDoc":[],"isInternal":false,"modifiers":["private","readonly"],"initializer":"new Subject<Date>()","text":"private readonly _pick = new Subject<Date>();","signature":"private readonly _pick = new Subject<Date>()"},{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["@Optional() private renderer: Renderer2"],"text":"constructor(@Optional() private renderer: Renderer2) {\n  }","signature":"constructor(@Optional() private renderer: Renderer2)"},{"kind":154,"name":"active","jsDoc":[{"comment":"Get active date.","tags":[]}],"isInternal":false,"parameters":[],"text":"get active() {\n    return new Date();\n  }","signature":"get active()"},{"kind":155,"name":"active","jsDoc":[{"comment":"Set active date.","tags":[]}],"isInternal":false,"parameters":["date: Date"],"text":"set active(date: Date) {\n    this._active = new Date(date);\n    this._focus = new Date(date);\n    this.updateGrid();\n  }","signature":"set active(date: Date)"},{"kind":154,"name":"gridChanges","jsDoc":[{"comment":"Observable with grid state.","tags":[]}],"isInternal":false,"parameters":[],"type":"Observable<KitDatePickerGrid>","text":"get gridChanges(): Observable<KitDatePickerGrid> {\n    return this._grid.asObservable();\n  }","signature":"get gridChanges(): Observable<KitDatePickerGrid>"},{"kind":154,"name":"monthCursorChanges","jsDoc":[{"comment":"Observable with month cursor state.","tags":[]}],"isInternal":false,"parameters":[],"type":"Observable<Date | null>","text":"get monthCursorChanges(): Observable<Date | null> {\n    return this._monthCursor.asObservable();\n  }","signature":"get monthCursorChanges(): Observable<Date | null>"},{"kind":154,"name":"pick","jsDoc":[{"comment":"Observable with pick date events.","tags":[]}],"isInternal":false,"parameters":[],"type":"Observable<Date>","text":"get pick(): Observable<Date> {\n    return this._pick.asObservable();\n  }","signature":"get pick(): Observable<Date>"},{"kind":154,"name":"weekdays","jsDoc":[{"comment":"Weekdays array.","tags":[]}],"isInternal":false,"parameters":[],"type":"Date[]","text":"get weekdays(): Date[] {\n    const weekdays = [];\n    const cursor = this.startOfWeek(new Date());\n    for (let i = 0; i < 7; i++) {\n      weekdays.push(new Date(cursor));\n      cursor.setDate(cursor.getDate() + 1);\n    }\n    return weekdays;\n  }","signature":"get weekdays(): Date[]"},{"kind":152,"name":"ngOnDestroy","jsDoc":[],"isInternal":false,"parameters":[],"text":"ngOnDestroy() {\n    this.moveHandlerUnsubs.forEach(u => u());\n  }","signature":"ngOnDestroy()"},{"kind":152,"name":"focus","jsDoc":[{"comment":"Focus date (open correspondent month).","tags":[]}],"isInternal":false,"parameters":["date: Date"],"text":"focus(date: Date) {\n    this._focus = new Date(date);\n    this.updateGrid();\n  }","signature":"focus(date: Date)"},{"kind":152,"name":"modMonth","jsDoc":[{"comment":"Modify opened month.","tags":[]}],"isInternal":false,"parameters":["modifier: number"],"text":"modMonth(modifier: number) {\n    this._focus.setMonth(this._focus.getMonth() + modifier);\n    this.updateGrid();\n  }","signature":"modMonth(modifier: number)"},{"kind":152,"name":"modYear","jsDoc":[{"comment":"Modify opened year.","tags":[]}],"isInternal":false,"parameters":["modifier: number"],"text":"modYear(modifier: number) {\n    this._focus.setFullYear(this._focus.getFullYear() + modifier);\n    this.updateGrid();\n  }","signature":"modYear(modifier: number)"},{"kind":152,"name":"handleMove","jsDoc":[{"comment":"Handle keyboard movement.","tags":[]}],"isInternal":false,"parameters":["target: any"],"text":"handleMove(target: any) {\n    if (this.renderer) {\n      this.moveHandlerUnsubs = [\n        this.renderer.listen(target, 'keydown.ArrowRight', e => {\n          e.preventDefault();\n          this._focus.setDate(this._focus.getDate() + 1);\n          this.updateGrid();\n        }),\n        this.renderer.listen(target, 'keydown.ArrowLeft', e => {\n          e.preventDefault();\n          this._focus.setDate(this._focus.getDate() - 1);\n          this.updateGrid();\n        }),\n        this.renderer.listen(target, 'keydown.ArrowUp', e => {\n          e.preventDefault();\n          this._focus.setDate(this._focus.getDate() - 7);\n          this.updateGrid();\n        }),\n        this.renderer.listen(target, 'keydown.ArrowDown', e => {\n          e.preventDefault();\n          this._focus.setDate(this._focus.getDate() + 7);\n          this.updateGrid();\n        }),\n        this.renderer.listen(target, 'keydown.Home', e => {\n          e.preventDefault();\n          this._focus.setDate(1);\n          this.updateGrid();\n        }),\n        this.renderer.listen(target, 'keydown.End', e => {\n          e.preventDefault();\n          this._focus.setMonth(this._focus.getMonth() + 1, 0);\n          this.updateGrid();\n        }),\n        this.renderer.listen(target, 'keydown.PageUp', e => {\n          e.preventDefault();\n          this.modMonth(-1);\n        }),\n        this.renderer.listen(target, 'keydown.PageDown', e => {\n          e.preventDefault();\n          this.modMonth(1);\n        }),\n        this.renderer.listen(target, 'keydown.Alt.PageUp', e => {\n          e.preventDefault();\n          this.modYear(-1);\n        }),\n        this.renderer.listen(target, 'keydown.Alt.PageDown', e => {\n          e.preventDefault();\n          this.modYear(1);\n        }),\n        this.renderer.listen(target, 'keydown.Enter', e => {\n          e.preventDefault();\n          this._pick.next(new Date(this._focus));\n        }),\n        this.renderer.listen(target, 'keydown.Space', e => {\n          e.preventDefault();\n          this._pick.next(new Date(this._focus));\n        }),\n      ];\n    }\n  }","signature":"handleMove(target: any)"},{"kind":152,"name":"isDatesEqual","jsDoc":[{"comment":"Compare two dates.","tags":[]}],"isInternal":false,"modifiers":["private"],"parameters":["x: Date","y: Date"],"type":"boolean","text":"private isDatesEqual(x: Date, y: Date): boolean {\n    if (x && y) {\n      // @todo improve performance: cache xp, yp\n      const xp = new Date(x);\n      xp.setHours(0, 0, 0, 0);\n      const yp = new Date(y);\n      yp.setHours(0, 0, 0, 0);\n      return +xp === +yp;\n    } else {\n      throw new Error('isDatesEqual params error');\n    }\n  }","signature":"private isDatesEqual(x: Date, y: Date): boolean"},{"kind":152,"name":"startOfMonth","jsDoc":[{"comment":"Start of month of passed date.","tags":[]}],"isInternal":false,"modifiers":["private"],"parameters":["curr: Date"],"text":"private startOfMonth(curr: Date) {\n    return new Date(curr.getFullYear(), curr.getMonth(), 1);\n  }","signature":"private startOfMonth(curr: Date)"},{"kind":152,"name":"startOfWeek","jsDoc":[{"comment":"Start of week of passed date.","tags":[]}],"isInternal":false,"modifiers":["private"],"parameters":["curr: Date"],"text":"private startOfWeek(curr: Date) {\n    const date = new Date(curr);\n    const day = date.getDay() || 7;\n    if (day !== 1) {\n      date.setHours(-24 * (day - 1));\n    }\n    return date;\n  }","signature":"private startOfWeek(curr: Date)"},{"kind":152,"name":"updateGrid","jsDoc":[{"comment":"Redraw grid based on monthCursor and current date.","tags":[]}],"isInternal":false,"modifiers":["private"],"parameters":[],"text":"private updateGrid() {\n    if (this._monthCursor.value &&\n      this.isDatesEqual(this.startOfMonth(this._focus), this.startOfMonth(this._monthCursor.value))) {\n      // update current grid\n      const grid = this._grid.value;\n      grid.forEach(r => r.forEach(c => {\n        c.active = this.isDatesEqual(c.date, this._active);\n        c.focus = this.isDatesEqual(c.date, this._focus);\n      }));\n      this._grid.next(grid);\n    } else {\n      // recompile grid\n      const month = this.startOfMonth(this._focus);\n      const grid = [];\n      const cursor = this.startOfWeek(month);\n      for (let row = 0; row < this.weeksInMonth(month); row++) {\n        const line = [];\n        for (let col = 0; col < 7; col++) {\n          const date = new Date(cursor);\n          line.push({\n            active: this.isDatesEqual(date, this._active),\n            date,\n            focus: this.isDatesEqual(date, this._focus),\n            outside: date.getMonth() !== month.getMonth(),\n          });\n          cursor.setDate(cursor.getDate() + 1);\n        }\n        grid.push(line);\n      }\n      this._monthCursor.next(month);\n      this._grid.next(grid);\n    }\n  }","signature":"private updateGrid()"},{"kind":152,"name":"weeksInMonth","jsDoc":[{"comment":"Calc number of weeks in month.","tags":[]}],"isInternal":false,"modifiers":["private"],"parameters":["curr: Date"],"type":"number","text":"private weeksInMonth(curr: Date): number {\n    const firstOfMonth = new Date(curr.getFullYear(), curr.getMonth(), 1);\n    let day = firstOfMonth.getDay() || 6;\n    day = day === 1 ? 0 : day;\n    if (day) {\n      day--;\n    }\n    let diff = 7 - day;\n    const lastOfMonth = new Date(curr.getFullYear(), curr.getMonth() + 1, 0);\n    const lastDate = lastOfMonth.getDate();\n    if (lastOfMonth.getDay() === 1) {\n      diff--;\n    }\n    return Math.ceil((lastDate - diff) / 7) + 1;\n  }","signature":"private weeksInMonth(curr: Date): number"}],"ngMeta":{"type":"Injectable","decorator":{}}}]},{"fileName":"src/kit-date-picker/kit-date-picker.ts","type":"ts","text":"export * from './kit-date-picker.service';\nexport * from './meta';\n","declars":[]},{"fileName":"src/kit-date-picker/meta.ts","type":"ts","text":"export interface KitDatePickerGridItem {\r\n  active: boolean;\r\n  date: Date;\r\n  focus: boolean;\r\n  outside: boolean;\r\n}\r\n\r\nexport type KitDatePickerGrid = KitDatePickerGridItem[][];\r\n","declars":[{"kind":231,"kindString":"interface","jsDoc":[],"isInternal":false,"name":"KitDatePickerGridItem","members":[{"kind":149,"jsDoc":[],"isInternal":false,"name":"active","type":"boolean","text":"active: boolean;","signature":"active(): boolean"},{"kind":149,"jsDoc":[],"isInternal":false,"name":"date","type":"Date","text":"date: Date;","signature":"date(): Date"},{"kind":149,"jsDoc":[],"isInternal":false,"name":"focus","type":"boolean","text":"focus: boolean;","signature":"focus(): boolean"},{"kind":149,"jsDoc":[],"isInternal":false,"name":"outside","type":"boolean","text":"outside: boolean;","signature":"outside(): boolean"}]},{"kind":232,"kindString":"typeAlias","jsDoc":[],"isInternal":false,"name":"KitDatePickerGrid","type":"KitDatePickerGridItem[][]","text":"export type KitDatePickerGrid = KitDatePickerGridItem[][];"}]},{"fileName":"src/kit-event-manager/kit-event-manager.service.ts","type":"ts","text":"import { Injectable } from '@angular/core';\nimport { KitPlatformService } from '../kit-platform/kit-platform.service';\n\n/**\n * Service for global events handling.\n *\n * ### Example\n *\n * Handle `esc` keydown globally:\n *\n * ```typescript\n * import { keyEscape, KitEventManagerService } from '@ngx-kit/core';\n * ...\n * constructor(private em: KitEventManagerService) {\n * }\n * ...\n * // subscribe\n * const escUnsub = this.em.listenGlobal('keydown', (event: KeyboardEvent) => {\n *   if (event.keyCode === keyEscape) {\n *     // do the job\n *   }\n * }, true);\n * ...\n * // unsubscribe\n * escUnsub();\n * ```\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class KitEventManagerService {\n  constructor(private platform: KitPlatformService) {\n  }\n\n  /**\n   * Listen event on the global root object.\n   *\n   * Reason: native Angular EventManager does not provide event listener with useCapture param.\n   */\n  listenGlobal(eventName: string, handler: Function, useCapture?: boolean): Function {\n    if (this.platform.isBrowser()) {\n      window.addEventListener(eventName, handler as any, useCapture);\n      return () => window.removeEventListener(eventName, handler as any, useCapture);\n    } else {\n      return () => {\n      };\n    }\n  }\n\n  /**\n   * Get array of objects visited by event.\n   */\n  getEventPath(event: Event): EventTarget[] {\n    if (this.platform.isBrowser()) {\n      const path = [];\n      let node = event.target;\n      while (node && node !== document.body) {\n        path.push(node);\n        node = node['parentNode'];\n      }\n      return path;\n    } else {\n      return [];\n    }\n  }\n}\n","declars":[{"kind":230,"kindString":"class","jsDoc":[{"comment":"Service for global events handling.\n\n### Example\n\nHandle `esc` keydown globally:\n\n```typescript\nimport { keyEscape, KitEventManagerService } from '@ngx-kit/core';\n...\nconstructor(private em: KitEventManagerService) {\n}\n...\n// subscribe\nconst escUnsub = this.em.listenGlobal('keydown', (event: KeyboardEvent) => {\n   if (event.keyCode === keyEscape) {\n     // do the job\n   }\n}, true);\n...\n// unsubscribe\nescUnsub();\n```","tags":[]}],"isInternal":false,"isDemo":false,"decorators":["@Injectable({\n  providedIn: 'root',\n})"],"modifiers":["export"],"name":"KitEventManagerService","members":[{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["private platform: KitPlatformService"],"text":"constructor(private platform: KitPlatformService) {\n  }","signature":"constructor(private platform: KitPlatformService)"},{"kind":152,"name":"listenGlobal","jsDoc":[{"comment":"Listen event on the global root object.\n\nReason: native Angular EventManager does not provide event listener with useCapture param.","tags":[]}],"isInternal":false,"parameters":["eventName: string","handler: Function","useCapture?: boolean"],"type":"Function","text":"listenGlobal(eventName: string, handler: Function, useCapture?: boolean): Function {\n    if (this.platform.isBrowser()) {\n      window.addEventListener(eventName, handler as any, useCapture);\n      return () => window.removeEventListener(eventName, handler as any, useCapture);\n    } else {\n      return () => {\n      };\n    }\n  }","signature":"listenGlobal(eventName: string, handler: Function, useCapture?: boolean): Function"},{"kind":152,"name":"getEventPath","jsDoc":[{"comment":"Get array of objects visited by event.","tags":[]}],"isInternal":false,"parameters":["event: Event"],"type":"EventTarget[]","text":"getEventPath(event: Event): EventTarget[] {\n    if (this.platform.isBrowser()) {\n      const path = [];\n      let node = event.target;\n      while (node && node !== document.body) {\n        path.push(node);\n        node = node['parentNode'];\n      }\n      return path;\n    } else {\n      return [];\n    }\n  }","signature":"getEventPath(event: Event): EventTarget[]"}],"ngMeta":{"type":"Injectable","decorator":{"providedIn":"'root'"}}}]},{"fileName":"src/kit-event-manager/kit-event-manager.ts","type":"ts","text":"export * from './kit-event-manager.service';\r\nexport * from './meta';\r\n","declars":[]},{"fileName":"src/kit-event-manager/meta.ts","type":"ts","text":"export const keyArrowUp = 38;\r\nexport const keyArrowDown = 40;\r\nexport const keyArrowRight = 39;\r\nexport const keyArrowLeft = 37;\r\nexport const keyPageUp = 33;\r\nexport const keyPageDown = 34;\r\nexport const keyHome = 36;\r\nexport const keyEnd = 35;\r\nexport const keyEnter = 13;\r\nexport const keySpace = 32;\r\nexport const keyTab = 9;\r\nexport const keyEscape = 27;\r\nexport const keyBackspace = 8;\r\nexport const keyDelete = 46;\r\nexport const keyShift = 16;\r\nexport const keyCtrl = 17;\r\nexport const keyAlt = 18;\r\n","declars":[]},{"fileName":"src/kit-focus-listener/kit-focus-listener.service.ts","type":"ts","text":"import { Injectable } from '@angular/core';\nimport { EventManager } from '@angular/platform-browser';\nimport { Observable, Subject } from 'rxjs';\n\n/**\n * Handles focus/blur from a group of elements.\n *\n * If focus moves among elements in a defined group, blur event will not be fired.\n *\n *\n * ### Example\n *\n * In `ui-autocomplete` we heed to omit blur event, if user click on a suggestion.\n *\n * We provide `KitFocusListenerService` in the directive, register main input and `ui-autocomplete-options` element in\n * the service and subscribe on `blur` event.\n *\n * * collection:modal -\n * [sources](https://github.com/ngx-kit/ngx-kit/tree/master/packages/collection/lib/ui-autocomplete),\n * [demo](https://ngx-kit.com/collection/module/ui-autocomplete)\n */\n@Injectable()\nexport class KitFocusListenerService {\n  private _focused = false;\n\n  private _focus = new Subject<any>();\n\n  private _blur = new Subject<any>();\n\n  private elements: {\n    el: HTMLElement;\n    focus: Function;\n    blur: Function;\n  }[] = [];\n\n  constructor(private em: EventManager) {\n  }\n\n  /**\n   * Emits, if user focuses one of registered element.\n   */\n  get focus(): Observable<any> {\n    return this._focus.asObservable();\n  }\n\n  /**\n   * Emits, if focus leave one of registered element and target node is not one of registered element (or it's child).\n   */\n  get blur(): Observable<any> {\n    return this._blur.asObservable();\n  }\n\n  /**\n   * Is one of registered element focused now.\n   */\n  get focused(): boolean {\n    return this._focused;\n  }\n\n  add(el: HTMLElement) {\n    this.elements.push({\n      el: el,\n      focus: this.em.addEventListener(el, 'focus', (event: any) => {\n        if (!this._focused) {\n          this._focused = true;\n          this._focus.next(event);\n        }\n      }),\n      blur: this.em.addEventListener(el, 'blur', (event: any) => {\n        this.checkLeave(event);\n      }),\n    });\n  }\n\n  remove(el: HTMLElement) {\n    const index = this.elements.findIndex(e => e.el === el);\n    if (index) {\n      const element = this.elements[index];\n      // void handlers\n      element.focus();\n      element.blur();\n      // remove from stack\n      this.elements.splice(index, 1);\n    } else {\n      throw new Error('Element has not been registered in KitFocusListenerService');\n    }\n  }\n\n  private checkLeave(event?: any) {\n    let leave = true;\n    this.elements.forEach(el => {\n      if (el.el.contains(event.relatedTarget)) {\n        leave = false;\n      }\n    });\n    if (leave) {\n      this._focused = false;\n      this._blur.next(event);\n    }\n  }\n}\n","declars":[{"kind":230,"kindString":"class","jsDoc":[{"comment":"Handles focus/blur from a group of elements.\n\nIf focus moves among elements in a defined group, blur event will not be fired.\n\n\n### Example\n\nIn `ui-autocomplete` we heed to omit blur event, if user click on a suggestion.\n\nWe provide `KitFocusListenerService` in the directive, register main input and `ui-autocomplete-options` element in\nthe service and subscribe on `blur` event.\n\n* collection:modal -\n[sources](https://github.com/ngx-kit/ngx-kit/tree/master/packages/collection/lib/ui-autocomplete),\n[demo](https://ngx-kit.com/collection/module/ui-autocomplete)","tags":[]}],"isInternal":false,"isDemo":false,"decorators":["@Injectable()"],"modifiers":["export"],"name":"KitFocusListenerService","members":[{"kind":150,"name":"_focused","jsDoc":[],"isInternal":false,"modifiers":["private"],"initializer":"false","text":"private _focused = false;","signature":"private _focused = false"},{"kind":150,"name":"_focus","jsDoc":[],"isInternal":false,"modifiers":["private"],"initializer":"new Subject<any>()","text":"private _focus = new Subject<any>();","signature":"private _focus = new Subject<any>()"},{"kind":150,"name":"_blur","jsDoc":[],"isInternal":false,"modifiers":["private"],"initializer":"new Subject<any>()","text":"private _blur = new Subject<any>();","signature":"private _blur = new Subject<any>()"},{"kind":150,"name":"elements","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"{\n    el: HTMLElement;\n    focus: Function;\n    blur: Function;\n  }[]","initializer":"[]","text":"private elements: {\n    el: HTMLElement;\n    focus: Function;\n    blur: Function;\n  }[] = [];","signature":"private elements: {\n    el: HTMLElement;\n    focus: Function;\n    blur: Function;\n  }[] = []"},{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["private em: EventManager"],"text":"constructor(private em: EventManager) {\n  }","signature":"constructor(private em: EventManager)"},{"kind":154,"name":"focus","jsDoc":[{"comment":"Emits, if user focuses one of registered element.","tags":[]}],"isInternal":false,"parameters":[],"type":"Observable<any>","text":"get focus(): Observable<any> {\n    return this._focus.asObservable();\n  }","signature":"get focus(): Observable<any>"},{"kind":154,"name":"blur","jsDoc":[{"comment":"Emits, if focus leave one of registered element and target node is not one of registered element (or it's child).","tags":[]}],"isInternal":false,"parameters":[],"type":"Observable<any>","text":"get blur(): Observable<any> {\n    return this._blur.asObservable();\n  }","signature":"get blur(): Observable<any>"},{"kind":154,"name":"focused","jsDoc":[{"comment":"Is one of registered element focused now.","tags":[]}],"isInternal":false,"parameters":[],"type":"boolean","text":"get focused(): boolean {\n    return this._focused;\n  }","signature":"get focused(): boolean"},{"kind":152,"name":"add","jsDoc":[],"isInternal":false,"parameters":["el: HTMLElement"],"text":"add(el: HTMLElement) {\n    this.elements.push({\n      el: el,\n      focus: this.em.addEventListener(el, 'focus', (event: any) => {\n        if (!this._focused) {\n          this._focused = true;\n          this._focus.next(event);\n        }\n      }),\n      blur: this.em.addEventListener(el, 'blur', (event: any) => {\n        this.checkLeave(event);\n      }),\n    });\n  }","signature":"add(el: HTMLElement)"},{"kind":152,"name":"remove","jsDoc":[],"isInternal":false,"parameters":["el: HTMLElement"],"text":"remove(el: HTMLElement) {\n    const index = this.elements.findIndex(e => e.el === el);\n    if (index) {\n      const element = this.elements[index];\n      // void handlers\n      element.focus();\n      element.blur();\n      // remove from stack\n      this.elements.splice(index, 1);\n    } else {\n      throw new Error('Element has not been registered in KitFocusListenerService');\n    }\n  }","signature":"remove(el: HTMLElement)"},{"kind":152,"name":"checkLeave","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":["event?: any"],"text":"private checkLeave(event?: any) {\n    let leave = true;\n    this.elements.forEach(el => {\n      if (el.el.contains(event.relatedTarget)) {\n        leave = false;\n      }\n    });\n    if (leave) {\n      this._focused = false;\n      this._blur.next(event);\n    }\n  }","signature":"private checkLeave(event?: any)"}],"ngMeta":{"type":"Injectable","decorator":{}}}]},{"fileName":"src/kit-focus-listener/kit-focus-listener.ts","type":"ts","text":"export * from './kit-focus-listener.service';\r\n","declars":[]},{"fileName":"src/kit-focus-manager/kit-focus-manager-registry.service.ts","type":"ts","text":"import { Injectable } from '@angular/core';\r\nimport { KitFocusManagerService } from './kit-focus-manager.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class KitFocusManagerRegistryService {\r\n  stack: KitFocusManagerService[] = [];\r\n\r\n  capture(manager: KitFocusManagerService) {\r\n    const top = this.getTop();\r\n    if (top) {\r\n      top.onHold = true;\r\n    }\r\n    this.stack.push(manager);\r\n  }\r\n\r\n  release(manager: KitFocusManagerService) {\r\n    const index = this.stack.indexOf(manager);\r\n    if (index !== -1) {\r\n      const isTop = this.stack.indexOf(manager) === this.stack.length - 1;\r\n      this.stack.splice(index, 1);\r\n      if (isTop) {\r\n        const newTop = this.getTop();\r\n        if (newTop) {\r\n          newTop.onHold = false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private getTop() {\r\n    return this.stack[this.stack.length - 1];\r\n  }\r\n}\r\n","declars":[{"kind":230,"kindString":"class","jsDoc":[],"isInternal":false,"isDemo":false,"decorators":["@Injectable({\r\n  providedIn: 'root',\r\n})"],"modifiers":["export"],"name":"KitFocusManagerRegistryService","members":[{"kind":150,"name":"stack","jsDoc":[],"isInternal":false,"type":"KitFocusManagerService[]","initializer":"[]","text":"stack: KitFocusManagerService[] = [];","signature":"stack: KitFocusManagerService[] = []"},{"kind":152,"name":"capture","jsDoc":[],"isInternal":false,"parameters":["manager: KitFocusManagerService"],"text":"capture(manager: KitFocusManagerService) {\r\n    const top = this.getTop();\r\n    if (top) {\r\n      top.onHold = true;\r\n    }\r\n    this.stack.push(manager);\r\n  }","signature":"capture(manager: KitFocusManagerService)"},{"kind":152,"name":"release","jsDoc":[],"isInternal":false,"parameters":["manager: KitFocusManagerService"],"text":"release(manager: KitFocusManagerService) {\r\n    const index = this.stack.indexOf(manager);\r\n    if (index !== -1) {\r\n      const isTop = this.stack.indexOf(manager) === this.stack.length - 1;\r\n      this.stack.splice(index, 1);\r\n      if (isTop) {\r\n        const newTop = this.getTop();\r\n        if (newTop) {\r\n          newTop.onHold = false;\r\n        }\r\n      }\r\n    }\r\n  }","signature":"release(manager: KitFocusManagerService)"},{"kind":152,"name":"getTop","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":[],"text":"private getTop() {\r\n    return this.stack[this.stack.length - 1];\r\n  }","signature":"private getTop()"}],"ngMeta":{"type":"Injectable","decorator":{"providedIn":"'root'"}}}]},{"fileName":"src/kit-focus-manager/kit-focus-manager.module.ts","type":"ts","text":"import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { KitFocusTrapDirective } from './kit-focus-trap/kit-focus-trap.directive';\r\nimport { KitFocusDirective } from './kit-focus/kit-focus.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  declarations: [\r\n    KitFocusDirective,\r\n    KitFocusTrapDirective,\r\n  ],\r\n  exports: [\r\n    KitFocusDirective,\r\n    KitFocusTrapDirective,\r\n  ],\r\n})\r\nexport class KitFocusManagerModule {\r\n}\r\n","declars":[{"kind":230,"kindString":"class","jsDoc":[],"isInternal":false,"isDemo":false,"decorators":["@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  declarations: [\r\n    KitFocusDirective,\r\n    KitFocusTrapDirective,\r\n  ],\r\n  exports: [\r\n    KitFocusDirective,\r\n    KitFocusTrapDirective,\r\n  ],\r\n})"],"modifiers":["export"],"name":"KitFocusManagerModule","members":[],"ngMeta":{"type":"NgModule","decorator":{"exports":"[\r\n    KitFocusDirective,\r\n    KitFocusTrapDirective,\r\n  ]"}}}]},{"fileName":"src/kit-focus-manager/kit-focus-manager.service.ts","type":"ts","text":"import { ElementRef, Injectable, NgZone, OnDestroy, Renderer2 } from '@angular/core';\nimport { take } from 'rxjs/operators';\nimport { KitEventManagerService } from '../kit-event-manager/kit-event-manager.service';\nimport { keyTab } from '../kit-event-manager/meta';\nimport { KitFocusManagerRegistryService } from './kit-focus-manager-registry.service';\nimport { KitFocusDirective } from './kit-focus/kit-focus.directive';\n\n/**\n * ### Usage\n *\n * Provide `KitFocusManagerService` on component.\n *\n * #### Focus element\n *\n * Add directive and set id to an element.\n *\n * ```html\n * <input kitFocus=\"start\">\n * ```\n *\n * Focus element by `id`\n *\n * ```typescript\n * this.focusManager.focusItem('start');\n * ```\n *\n * #### Focus trap\n *\n * Great tool for improve accessibility of components. Keep focus inside component that provide\n * `KitFocusManagerService`.\n *\n * Inject and init service with `autoCapture`.\n *\n * ```typescript\n * providers: [KitFocusManagerService],\n * ...\n * constructor(private focusManager: KitFocusManagerService) {\n *   this.focusManager.autoCapture = true;\n *   this.focusManager.init();\n * }\n * ```\n *\n *\n * ### Example\n *\n * * collection:date-picker -\n * [sources](https://github.com/ngx-kit/ngx-kit/tree/master/packages/collection/lib/ui-date-picker),\n * [demo](https://ngx-kit.com/collection/module/ui-date-picker)\n */\n@Injectable()\nexport class KitFocusManagerService implements OnDestroy {\n  /**\n   * Automatically capture focus after creating.\n   */\n  autoCapture = false;\n\n  onHold = false;\n\n  private current: HTMLElement;\n\n  private focusTrap = false;\n\n  private items = new Set<KitFocusDirective>();\n\n  private outsideSource: HTMLElement;\n\n  private unsubs: any[] = [];\n\n  constructor(\n    private el: ElementRef,\n    private zone: NgZone,\n    private renderer: Renderer2,\n    private em: KitEventManagerService,\n    private registry: KitFocusManagerRegistryService,\n  ) {\n  }\n\n  private get documentActiveElement(): HTMLElement {\n    return this.el.nativeElement.ownerDocument.activeElement as HTMLElement;\n  }\n\n  ngOnDestroy() {\n    this.unsubs.forEach(u => u());\n    if (this.outsideSource) {\n      this.release();\n    }\n  }\n\n  /**\n   * Activate focus-trap.\n   */\n  capture() {\n    this.registry.capture(this);\n    this.focusTrap = true;\n    this.outsideSource = this.documentActiveElement;\n    this.focusFirst();\n  }\n\n  /**\n   * Focus first focusable element.\n   */\n  focusFirst() {\n    const nodes = this.getTabbable();\n    if (nodes.length > 0) {\n      nodes[0].focus();\n    }\n  }\n\n  /**\n   * Focus item dy id.\n   */\n  focusItem(id: string | number) {\n    this.zone.onStable\n      .pipe(take(1))\n      .subscribe(() => {\n        this.items.forEach(i => {\n          if (i.kitFocus === id) {\n            i.focus();\n          }\n        });\n      });\n  }\n\n  /**\n   * Focus last focusable element.\n   */\n  focusLast() {\n    const nodes = this.getTabbable();\n    if (nodes.length > 0) {\n      nodes[nodes.length - 1].focus();\n    }\n  }\n\n  /**\n   * Focus next focusable element (from current focused).\n   */\n  focusNext() {\n    const current = this.documentActiveElement;\n    const nodes = this.getTabbable();\n    const currentIndex = nodes.findIndex(n => n === current);\n    if (currentIndex !== -1 && currentIndex < nodes.length - 1) {\n      nodes[currentIndex + 1].focus();\n    } else {\n      this.focusFirst();\n    }\n  }\n\n  /**\n   * Focus prev focusable element (from currect focused).\n   */\n  focusPrev() {\n    const current = this.documentActiveElement;\n    const nodes = this.getTabbable();\n    const currentIndex = nodes.findIndex(n => n === current);\n    if (currentIndex !== -1 && currentIndex > 0) {\n      nodes[currentIndex - 1].focus();\n    } else {\n      this.focusLast();\n    }\n  }\n\n  /**\n   * Required method for start service.\n   */\n  init() {\n    this.zone.runOutsideAngular(() => {\n      // Unsubs\n      this.unsubs = [\n        this.renderer.listen(this.el.nativeElement, 'focusin', this.focusinHandler.bind(this)),\n        this.renderer.listen(this.el.nativeElement, 'focusout', this.focusoutHandler.bind(this)),\n        this.em.listenGlobal('keydown', this.keydownHandler.bind(this), true),\n      ];\n    });\n    if (this.autoCapture) {\n      this.zone.onStable\n        .pipe(take(1))\n        .subscribe(() => {\n          this.capture();\n        });\n    }\n  }\n\n  /**\n   * Register item for manual focus.\n   */\n  add(item: KitFocusDirective) {\n    this.items.add(item);\n  }\n\n  /**\n   * Disable focus-trap.\n   */\n  release() {\n    this.registry.release(this);\n    this.focusTrap = false;\n    this.outsideSource.focus();\n  }\n\n  /**\n   * Remove item.\n   */\n  remove(item: KitFocusDirective) {\n    this.items.delete(item);\n  }\n\n  private focusinHandler(event: FocusEvent) {\n    if (!this.onHold && this.isDescendant(this.el.nativeElement, event.target as HTMLElement)) {\n      this.current = event.target as HTMLElement;\n    }\n  }\n\n  private focusoutHandler(event: FocusEvent) {\n    if (\n      !this.onHold\n      && event.relatedTarget\n      && !this.isDescendant(this.el.nativeElement, event.relatedTarget as HTMLElement)\n    ) {\n      if (this.focusTrap) {\n        if (this.current) {\n          this.current.focus();\n        } else {\n          this.focusFirst();\n        }\n      }\n    }\n  }\n\n  private getTabbable(): HTMLElement[] {\n    const selectors = [\n      'input',\n      'select',\n      'a[href]',\n      'textarea',\n      'button',\n      '[tabindex]',\n    ];\n    const candidates = this.el.nativeElement.querySelectorAll(selectors);\n    const basicTabbables = [];\n    const orderedTabbables = [];\n    for (let i = 0, l = candidates.length; i < l; i++) {\n      const candidate = candidates[i];\n      const candidateIndex = parseInt(candidate.getAttribute('tabindex'), 10) || candidate.tabIndex;\n      if (candidateIndex < 0\n        || (candidate.tagName === 'INPUT' && candidate.type === 'hidden')\n        || candidate.disabled) {\n        continue;\n      }\n      if (candidateIndex === 0) {\n        basicTabbables.push(candidate);\n      } else {\n        orderedTabbables.push({\n          index: i,\n          tabIndex: candidateIndex,\n          node: candidate,\n        });\n      }\n    }\n    const tabbableNodes = orderedTabbables\n      .sort(function (a, b) {\n        return a.tabIndex === b.tabIndex ? a.index - b.index : a.tabIndex - b.tabIndex;\n      })\n      .map(function (a) {\n        return a.node;\n      });\n    Array.prototype.push.apply(tabbableNodes, basicTabbables);\n    return tabbableNodes;\n  }\n\n  private isDescendant(parent: HTMLElement, child: HTMLElement): boolean {\n    if (child) {\n      let node = child.parentNode;\n      while (node !== null) {\n        if (node === parent) {\n          return true;\n        }\n        node = node.parentNode;\n      }\n      return false;\n    } else {\n      return false;\n    }\n  }\n\n  private keydownHandler(event: KeyboardEvent) {\n    if (!this.onHold && event.keyCode === keyTab) {\n      event.preventDefault();\n      if (event.shiftKey) {\n        this.focusPrev();\n      } else {\n        this.focusNext();\n      }\n    }\n  }\n}\n","declars":[{"kind":230,"kindString":"class","jsDoc":[{"comment":"### Usage\n\nProvide `KitFocusManagerService` on component.\n\n#### Focus element\n\nAdd directive and set id to an element.\n\n```html\n<input kitFocus=\"start\">\n```\n\nFocus element by `id`\n\n```typescript\nthis.focusManager.focusItem('start');\n```\n\n#### Focus trap\n\nGreat tool for improve accessibility of components. Keep focus inside component that provide\n`KitFocusManagerService`.\n\nInject and init service with `autoCapture`.\n\n```typescript\nproviders: [KitFocusManagerService],\n...\nconstructor(private focusManager: KitFocusManagerService) {\n   this.focusManager.autoCapture = true;\n   this.focusManager.init();\n}\n```\n\n\n### Example\n\n* collection:date-picker -\n[sources](https://github.com/ngx-kit/ngx-kit/tree/master/packages/collection/lib/ui-date-picker),\n[demo](https://ngx-kit.com/collection/module/ui-date-picker)","tags":[]}],"isInternal":false,"isDemo":false,"decorators":["@Injectable()"],"modifiers":["export"],"name":"KitFocusManagerService","members":[{"kind":150,"name":"autoCapture","jsDoc":[{"comment":"Automatically capture focus after creating.","tags":[]}],"isInternal":false,"initializer":"false","text":"autoCapture = false;","signature":"autoCapture = false"},{"kind":150,"name":"onHold","jsDoc":[],"isInternal":false,"initializer":"false","text":"onHold = false;","signature":"onHold = false"},{"kind":150,"name":"current","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"HTMLElement","text":"private current: HTMLElement;","signature":"private current: HTMLElement"},{"kind":150,"name":"focusTrap","jsDoc":[],"isInternal":false,"modifiers":["private"],"initializer":"false","text":"private focusTrap = false;","signature":"private focusTrap = false"},{"kind":150,"name":"items","jsDoc":[],"isInternal":false,"modifiers":["private"],"initializer":"new Set<KitFocusDirective>()","text":"private items = new Set<KitFocusDirective>();","signature":"private items = new Set<KitFocusDirective>()"},{"kind":150,"name":"outsideSource","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"HTMLElement","text":"private outsideSource: HTMLElement;","signature":"private outsideSource: HTMLElement"},{"kind":150,"name":"unsubs","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"any[]","initializer":"[]","text":"private unsubs: any[] = [];","signature":"private unsubs: any[] = []"},{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["private el: ElementRef","private zone: NgZone","private renderer: Renderer2","private em: KitEventManagerService","private registry: KitFocusManagerRegistryService"],"text":"constructor(\n    private el: ElementRef,\n    private zone: NgZone,\n    private renderer: Renderer2,\n    private em: KitEventManagerService,\n    private registry: KitFocusManagerRegistryService,\n  ) {\n  }","signature":"constructor(private el: ElementRef, private zone: NgZone, private renderer: Renderer2, private em: KitEventManagerService, private registry: KitFocusManagerRegistryService)"},{"kind":154,"name":"documentActiveElement","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":[],"type":"HTMLElement","text":"private get documentActiveElement(): HTMLElement {\n    return this.el.nativeElement.ownerDocument.activeElement as HTMLElement;\n  }","signature":"private get documentActiveElement(): HTMLElement"},{"kind":152,"name":"ngOnDestroy","jsDoc":[],"isInternal":false,"parameters":[],"text":"ngOnDestroy() {\n    this.unsubs.forEach(u => u());\n    if (this.outsideSource) {\n      this.release();\n    }\n  }","signature":"ngOnDestroy()"},{"kind":152,"name":"capture","jsDoc":[{"comment":"Activate focus-trap.","tags":[]}],"isInternal":false,"parameters":[],"text":"capture() {\n    this.registry.capture(this);\n    this.focusTrap = true;\n    this.outsideSource = this.documentActiveElement;\n    this.focusFirst();\n  }","signature":"capture()"},{"kind":152,"name":"focusFirst","jsDoc":[{"comment":"Focus first focusable element.","tags":[]}],"isInternal":false,"parameters":[],"text":"focusFirst() {\n    const nodes = this.getTabbable();\n    if (nodes.length > 0) {\n      nodes[0].focus();\n    }\n  }","signature":"focusFirst()"},{"kind":152,"name":"focusItem","jsDoc":[{"comment":"Focus item dy id.","tags":[]}],"isInternal":false,"parameters":["id: string | number"],"text":"focusItem(id: string | number) {\n    this.zone.onStable\n      .pipe(take(1))\n      .subscribe(() => {\n        this.items.forEach(i => {\n          if (i.kitFocus === id) {\n            i.focus();\n          }\n        });\n      });\n  }","signature":"focusItem(id: string | number)"},{"kind":152,"name":"focusLast","jsDoc":[{"comment":"Focus last focusable element.","tags":[]}],"isInternal":false,"parameters":[],"text":"focusLast() {\n    const nodes = this.getTabbable();\n    if (nodes.length > 0) {\n      nodes[nodes.length - 1].focus();\n    }\n  }","signature":"focusLast()"},{"kind":152,"name":"focusNext","jsDoc":[{"comment":"Focus next focusable element (from current focused).","tags":[]}],"isInternal":false,"parameters":[],"text":"focusNext() {\n    const current = this.documentActiveElement;\n    const nodes = this.getTabbable();\n    const currentIndex = nodes.findIndex(n => n === current);\n    if (currentIndex !== -1 && currentIndex < nodes.length - 1) {\n      nodes[currentIndex + 1].focus();\n    } else {\n      this.focusFirst();\n    }\n  }","signature":"focusNext()"},{"kind":152,"name":"focusPrev","jsDoc":[{"comment":"Focus prev focusable element (from currect focused).","tags":[]}],"isInternal":false,"parameters":[],"text":"focusPrev() {\n    const current = this.documentActiveElement;\n    const nodes = this.getTabbable();\n    const currentIndex = nodes.findIndex(n => n === current);\n    if (currentIndex !== -1 && currentIndex > 0) {\n      nodes[currentIndex - 1].focus();\n    } else {\n      this.focusLast();\n    }\n  }","signature":"focusPrev()"},{"kind":152,"name":"init","jsDoc":[{"comment":"Required method for start service.","tags":[]}],"isInternal":false,"parameters":[],"text":"init() {\n    this.zone.runOutsideAngular(() => {\n      // Unsubs\n      this.unsubs = [\n        this.renderer.listen(this.el.nativeElement, 'focusin', this.focusinHandler.bind(this)),\n        this.renderer.listen(this.el.nativeElement, 'focusout', this.focusoutHandler.bind(this)),\n        this.em.listenGlobal('keydown', this.keydownHandler.bind(this), true),\n      ];\n    });\n    if (this.autoCapture) {\n      this.zone.onStable\n        .pipe(take(1))\n        .subscribe(() => {\n          this.capture();\n        });\n    }\n  }","signature":"init()"},{"kind":152,"name":"add","jsDoc":[{"comment":"Register item for manual focus.","tags":[]}],"isInternal":false,"parameters":["item: KitFocusDirective"],"text":"add(item: KitFocusDirective) {\n    this.items.add(item);\n  }","signature":"add(item: KitFocusDirective)"},{"kind":152,"name":"release","jsDoc":[{"comment":"Disable focus-trap.","tags":[]}],"isInternal":false,"parameters":[],"text":"release() {\n    this.registry.release(this);\n    this.focusTrap = false;\n    this.outsideSource.focus();\n  }","signature":"release()"},{"kind":152,"name":"remove","jsDoc":[{"comment":"Remove item.","tags":[]}],"isInternal":false,"parameters":["item: KitFocusDirective"],"text":"remove(item: KitFocusDirective) {\n    this.items.delete(item);\n  }","signature":"remove(item: KitFocusDirective)"},{"kind":152,"name":"focusinHandler","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":["event: FocusEvent"],"text":"private focusinHandler(event: FocusEvent) {\n    if (!this.onHold && this.isDescendant(this.el.nativeElement, event.target as HTMLElement)) {\n      this.current = event.target as HTMLElement;\n    }\n  }","signature":"private focusinHandler(event: FocusEvent)"},{"kind":152,"name":"focusoutHandler","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":["event: FocusEvent"],"text":"private focusoutHandler(event: FocusEvent) {\n    if (\n      !this.onHold\n      && event.relatedTarget\n      && !this.isDescendant(this.el.nativeElement, event.relatedTarget as HTMLElement)\n    ) {\n      if (this.focusTrap) {\n        if (this.current) {\n          this.current.focus();\n        } else {\n          this.focusFirst();\n        }\n      }\n    }\n  }","signature":"private focusoutHandler(event: FocusEvent)"},{"kind":152,"name":"getTabbable","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":[],"type":"HTMLElement[]","text":"private getTabbable(): HTMLElement[] {\n    const selectors = [\n      'input',\n      'select',\n      'a[href]',\n      'textarea',\n      'button',\n      '[tabindex]',\n    ];\n    const candidates = this.el.nativeElement.querySelectorAll(selectors);\n    const basicTabbables = [];\n    const orderedTabbables = [];\n    for (let i = 0, l = candidates.length; i < l; i++) {\n      const candidate = candidates[i];\n      const candidateIndex = parseInt(candidate.getAttribute('tabindex'), 10) || candidate.tabIndex;\n      if (candidateIndex < 0\n        || (candidate.tagName === 'INPUT' && candidate.type === 'hidden')\n        || candidate.disabled) {\n        continue;\n      }\n      if (candidateIndex === 0) {\n        basicTabbables.push(candidate);\n      } else {\n        orderedTabbables.push({\n          index: i,\n          tabIndex: candidateIndex,\n          node: candidate,\n        });\n      }\n    }\n    const tabbableNodes = orderedTabbables\n      .sort(function (a, b) {\n        return a.tabIndex === b.tabIndex ? a.index - b.index : a.tabIndex - b.tabIndex;\n      })\n      .map(function (a) {\n        return a.node;\n      });\n    Array.prototype.push.apply(tabbableNodes, basicTabbables);\n    return tabbableNodes;\n  }","signature":"private getTabbable(): HTMLElement[]"},{"kind":152,"name":"isDescendant","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":["parent: HTMLElement","child: HTMLElement"],"type":"boolean","text":"private isDescendant(parent: HTMLElement, child: HTMLElement): boolean {\n    if (child) {\n      let node = child.parentNode;\n      while (node !== null) {\n        if (node === parent) {\n          return true;\n        }\n        node = node.parentNode;\n      }\n      return false;\n    } else {\n      return false;\n    }\n  }","signature":"private isDescendant(parent: HTMLElement, child: HTMLElement): boolean"},{"kind":152,"name":"keydownHandler","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":["event: KeyboardEvent"],"text":"private keydownHandler(event: KeyboardEvent) {\n    if (!this.onHold && event.keyCode === keyTab) {\n      event.preventDefault();\n      if (event.shiftKey) {\n        this.focusPrev();\n      } else {\n        this.focusNext();\n      }\n    }\n  }","signature":"private keydownHandler(event: KeyboardEvent)"}],"ngMeta":{"type":"Injectable","decorator":{}}}]},{"fileName":"src/kit-focus-manager/kit-focus-manager.ts","type":"ts","text":"export * from './kit-focus-manager.module';\r\nexport * from './kit-focus-manager.service';\r\nexport * from './kit-focus-manager-registry.service';\r\nexport * from './kit-focus/kit-focus.directive';\r\nexport * from './kit-focus-trap/kit-focus-trap.directive';\r\n","declars":[]},{"fileName":"src/kit-focus-manager/kit-focus-trap/kit-focus-trap.directive.ts","type":"ts","text":"import { Directive, OnInit } from '@angular/core';\r\nimport { KitFocusManagerService } from '../kit-focus-manager.service';\r\n\r\n@Directive({\r\n  selector: '[kitFocusTrap]',\r\n  providers: [\r\n    KitFocusManagerService,\r\n  ],\r\n})\r\nexport class KitFocusTrapDirective implements OnInit {\r\n  constructor(private service: KitFocusManagerService) {\r\n    this.service.autoCapture = true;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.service.init();\r\n  }\r\n}\r\n","declars":[{"kind":230,"kindString":"class","jsDoc":[],"isInternal":false,"isDemo":false,"decorators":["@Directive({\r\n  selector: '[kitFocusTrap]',\r\n  providers: [\r\n    KitFocusManagerService,\r\n  ],\r\n})"],"modifiers":["export"],"name":"KitFocusTrapDirective","members":[{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["private service: KitFocusManagerService"],"text":"constructor(private service: KitFocusManagerService) {\r\n    this.service.autoCapture = true;\r\n  }","signature":"constructor(private service: KitFocusManagerService)"},{"kind":152,"name":"ngOnInit","jsDoc":[],"isInternal":false,"parameters":[],"text":"ngOnInit() {\r\n    this.service.init();\r\n  }","signature":"ngOnInit()"}],"ngMeta":{"type":"Directive","decorator":{"selector":"'[kitFocusTrap]'"}}}]},{"fileName":"src/kit-focus-manager/kit-focus/kit-focus.directive.ts","type":"ts","text":"import { Directive, ElementRef, Input, OnDestroy, Optional } from '@angular/core';\nimport { KitFocusManagerService } from '../kit-focus-manager.service';\n\n/**\n * Directive that registered in `KitFocusManagerService` and can be focused from outside.\n *\n *\n * ### Usage\n *\n * ```html\n * <modal kitFocusTrap></modal>\n * ```\n */\n@Directive({\n  selector: '[kitFocus]',\n})\nexport class KitFocusDirective implements OnDestroy {\n  /**\n   * Element id.\n   */\n  @Input() kitFocus: string | number;\n\n  constructor(\n    @Optional() private service: KitFocusManagerService,\n    private el: ElementRef,\n  ) {\n    if (this.service) {\n      this.service.add(this);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.service) {\n      this.service.remove(this);\n    }\n  }\n\n  focus() {\n    this.el.nativeElement.focus();\n  }\n}\n","declars":[{"kind":230,"kindString":"class","jsDoc":[{"comment":"Directive that registered in `KitFocusManagerService` and can be focused from outside.\n\n\n### Usage\n\n```html\n<modal kitFocusTrap></modal>\n```","tags":[]}],"isInternal":false,"isDemo":false,"decorators":["@Directive({\n  selector: '[kitFocus]',\n})"],"modifiers":["export"],"name":"KitFocusDirective","members":[{"kind":150,"name":"kitFocus","jsDoc":[{"comment":"Element id.","tags":[]}],"isInternal":false,"decorators":["@Input()"],"type":"string | number","text":"@Input() kitFocus: string | number;","signature":"@Input() kitFocus: string | number"},{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["@Optional() private service: KitFocusManagerService","private el: ElementRef"],"text":"constructor(\n    @Optional() private service: KitFocusManagerService,\n    private el: ElementRef,\n  ) {\n    if (this.service) {\n      this.service.add(this);\n    }\n  }","signature":"constructor(@Optional() private service: KitFocusManagerService, private el: ElementRef)"},{"kind":152,"name":"ngOnDestroy","jsDoc":[],"isInternal":false,"parameters":[],"text":"ngOnDestroy() {\n    if (this.service) {\n      this.service.remove(this);\n    }\n  }","signature":"ngOnDestroy()"},{"kind":152,"name":"focus","jsDoc":[],"isInternal":false,"parameters":[],"text":"focus() {\n    this.el.nativeElement.focus();\n  }","signature":"focus()"}],"ngMeta":{"type":"Directive","decorator":{"selector":"'[kitFocus]'"}}}]},{"fileName":"src/kit-form-field/kit-form-error/kit-form-error.directive.ts","type":"ts","text":"import { Directive, Input, TemplateRef, } from '@angular/core';\r\n\r\n/**\r\n * Structure directive for capturing form-error template.\r\n */\r\n@Directive({\r\n  selector: '[kitFormError]',\r\n})\r\nexport class KitFormErrorDirective {\r\n  @Input() kitFormError: string;\r\n\r\n  constructor(\r\n    public templateRef: TemplateRef<any>,\r\n  ) {\r\n  }\r\n\r\n  get name(): string {\r\n    return this.kitFormError;\r\n  }\r\n}\r\n","declars":[{"kind":230,"kindString":"class","jsDoc":[{"comment":"Structure directive for capturing form-error template.","tags":[]}],"isInternal":false,"isDemo":false,"decorators":["@Directive({\r\n  selector: '[kitFormError]',\r\n})"],"modifiers":["export"],"name":"KitFormErrorDirective","members":[{"kind":150,"name":"kitFormError","jsDoc":[],"isInternal":false,"decorators":["@Input()"],"type":"string","text":"@Input() kitFormError: string;","signature":"@Input() kitFormError: string"},{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["public templateRef: TemplateRef<any>"],"text":"constructor(\r\n    public templateRef: TemplateRef<any>,\r\n  ) {\r\n  }","signature":"constructor(public templateRef: TemplateRef<any>)"},{"kind":154,"name":"name","jsDoc":[],"isInternal":false,"parameters":[],"type":"string","text":"get name(): string {\r\n    return this.kitFormError;\r\n  }","signature":"get name(): string"}],"ngMeta":{"type":"Directive","decorator":{"selector":"'[kitFormError]'"}}}]},{"fileName":"src/kit-form-field/kit-form-field.module.ts","type":"ts","text":"import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { KitFormErrorDirective } from './kit-form-error/kit-form-error.directive';\r\nimport { KitNgControlDirective } from './kit-ng-control/kit-ng-control.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  declarations: [\r\n    KitFormErrorDirective,\r\n    KitNgControlDirective,\r\n  ],\r\n  exports: [\r\n    KitFormErrorDirective,\r\n    KitNgControlDirective,\r\n  ],\r\n  providers: [],\r\n})\r\nexport class KitFormFieldModule {\r\n}\r\n","declars":[{"kind":230,"kindString":"class","jsDoc":[],"isInternal":false,"isDemo":false,"decorators":["@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  declarations: [\r\n    KitFormErrorDirective,\r\n    KitNgControlDirective,\r\n  ],\r\n  exports: [\r\n    KitFormErrorDirective,\r\n    KitNgControlDirective,\r\n  ],\r\n  providers: [],\r\n})"],"modifiers":["export"],"name":"KitFormFieldModule","members":[],"ngMeta":{"type":"NgModule","decorator":{"exports":"[\r\n    KitFormErrorDirective,\r\n    KitNgControlDirective,\r\n  ]","providers":"[]"}}}]},{"fileName":"src/kit-form-field/kit-form-field.service.ts","type":"ts","text":"import { Injectable } from '@angular/core';\nimport { isUndefined } from '../util/is-undefined';\nimport { KitNgControlDirective } from './kit-ng-control/kit-ng-control.directive';\n\n/**\n * ### Example\n *\n * * collection:form - [sources](https://github.com/ngx-kit/ngx-kit/tree/master/packages/collection/lib/ui-form),\n * [demo](https://ngx-kit.com/collection/module/ui-form)\n */\n@Injectable()\nexport class KitFormFieldService {\n  private _controls: KitNgControlDirective[] = [];\n\n  get control(): KitNgControlDirective {\n    return this._controls[0];\n  }\n\n  get controls(): KitNgControlDirective[] {\n    return this._controls;\n  }\n\n  /**\n   * Register KitNgControlDirective in the service.\n   */\n  add(control: KitNgControlDirective) {\n    this._controls.push(control);\n  }\n\n  remove(control: KitNgControlDirective) {\n    const index = this._controls.indexOf(control);\n    if (index !== -1) {\n      this._controls.splice(index, 1);\n    }\n  }\n\n  /**\n   * Check if error exists.\n   */\n  hasError(name: string) {\n    return !!this._controls.find(c => c.ngControl.hasError(name));\n  }\n\n  /**\n   * Has any error and control touched or dirty.\n   */\n  getErrorsToDisplay(): string[] {\n    let errors: string[] = [];\n    this._controls.forEach(control => {\n      const hasErrors = control.ngControl.invalid && control.ngControl.touched;\n      if (hasErrors) {\n        errors = [...errors, ...Object.keys(control.ngControl.errors || {})];\n      }\n    });\n    return errors;\n  }\n\n  /**\n   * Is main control required.\n   */\n  isRequired(): boolean {\n    return this.control && !(isUndefined(this.control.required) || this.control.required === false);\n  }\n}\n","declars":[{"kind":230,"kindString":"class","jsDoc":[{"comment":"### Example\n\n* collection:form - [sources](https://github.com/ngx-kit/ngx-kit/tree/master/packages/collection/lib/ui-form),\n[demo](https://ngx-kit.com/collection/module/ui-form)","tags":[]}],"isInternal":false,"isDemo":false,"decorators":["@Injectable()"],"modifiers":["export"],"name":"KitFormFieldService","members":[{"kind":150,"name":"_controls","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"KitNgControlDirective[]","initializer":"[]","text":"private _controls: KitNgControlDirective[] = [];","signature":"private _controls: KitNgControlDirective[] = []"},{"kind":154,"name":"control","jsDoc":[],"isInternal":false,"parameters":[],"type":"KitNgControlDirective","text":"get control(): KitNgControlDirective {\n    return this._controls[0];\n  }","signature":"get control(): KitNgControlDirective"},{"kind":154,"name":"controls","jsDoc":[],"isInternal":false,"parameters":[],"type":"KitNgControlDirective[]","text":"get controls(): KitNgControlDirective[] {\n    return this._controls;\n  }","signature":"get controls(): KitNgControlDirective[]"},{"kind":152,"name":"add","jsDoc":[{"comment":"Register KitNgControlDirective in the service.","tags":[]}],"isInternal":false,"parameters":["control: KitNgControlDirective"],"text":"add(control: KitNgControlDirective) {\n    this._controls.push(control);\n  }","signature":"add(control: KitNgControlDirective)"},{"kind":152,"name":"remove","jsDoc":[],"isInternal":false,"parameters":["control: KitNgControlDirective"],"text":"remove(control: KitNgControlDirective) {\n    const index = this._controls.indexOf(control);\n    if (index !== -1) {\n      this._controls.splice(index, 1);\n    }\n  }","signature":"remove(control: KitNgControlDirective)"},{"kind":152,"name":"hasError","jsDoc":[{"comment":"Check if error exists.","tags":[]}],"isInternal":false,"parameters":["name: string"],"text":"hasError(name: string) {\n    return !!this._controls.find(c => c.ngControl.hasError(name));\n  }","signature":"hasError(name: string)"},{"kind":152,"name":"getErrorsToDisplay","jsDoc":[{"comment":"Has any error and control touched or dirty.","tags":[]}],"isInternal":false,"parameters":[],"type":"string[]","text":"getErrorsToDisplay(): string[] {\n    let errors: string[] = [];\n    this._controls.forEach(control => {\n      const hasErrors = control.ngControl.invalid && control.ngControl.touched;\n      if (hasErrors) {\n        errors = [...errors, ...Object.keys(control.ngControl.errors || {})];\n      }\n    });\n    return errors;\n  }","signature":"getErrorsToDisplay(): string[]"},{"kind":152,"name":"isRequired","jsDoc":[{"comment":"Is main control required.","tags":[]}],"isInternal":false,"parameters":[],"type":"boolean","text":"isRequired(): boolean {\n    return this.control && !(isUndefined(this.control.required) || this.control.required === false);\n  }","signature":"isRequired(): boolean"}],"ngMeta":{"type":"Injectable","decorator":{}}}]},{"fileName":"src/kit-form-field/kit-form-field.ts","type":"ts","text":"export * from './kit-form-field.module';\r\nexport * from './kit-form-field.service';\r\nexport * from './kit-form-error/kit-form-error.directive';\r\nexport * from './kit-ng-control/kit-ng-control.directive';\r\n","declars":[]},{"fileName":"src/kit-form-field/kit-ng-control/kit-ng-control.directive.ts","type":"ts","text":"import {\r\n  Directive, DoCheck,\r\n  Host,\r\n  HostBinding,\r\n  Input,\r\n  IterableDiffer,\r\n  IterableDiffers,\r\n  OnDestroy,\r\n  Optional,\r\n} from '@angular/core';\r\nimport { NgControl } from '@angular/forms';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { uuid } from '../../util/uuid';\r\nimport { KitFormFieldService } from '../kit-form-field.service';\r\n\r\n/**\r\n * Registers `control` in `KitFormFieldService`.\r\n *\r\n * Also generates unique _id (needed for correct working label in form-field).\r\n */\r\n@Directive({\r\n  // tslint:disable-next-line\r\n  selector: '[ngModel],[formControl],[formControlName]',\r\n})\r\nexport class KitNgControlDirective implements OnDestroy, DoCheck {\r\n  @Input() required: boolean;\r\n\r\n  private _id: string = uuid();\r\n\r\n  private _errorStateChanges = new Subject<string[]>();\r\n\r\n  private errorsDiffer: IterableDiffer<string>;\r\n\r\n  constructor(\r\n    @Host() @Optional() public ngControl: NgControl,\r\n    @Optional() private formFieldService: KitFormFieldService,\r\n    private differs: IterableDiffers,\r\n  ) {\r\n    if (this.ngControl && this.formFieldService) {\r\n      this.formFieldService.add(this);\r\n    }\r\n  }\r\n\r\n  @HostBinding('attr.id') get idBinding(): string {\r\n    return this._id;\r\n  }\r\n\r\n  get id(): string {\r\n    return this._id;\r\n  }\r\n\r\n  @Input() set id(id: string) {\r\n    this._id = id;\r\n  }\r\n\r\n  get errorStateChanges(): Observable<string[]> {\r\n    return this._errorStateChanges.asObservable();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.formFieldService) {\r\n      this.formFieldService.remove(this);\r\n    }\r\n  }\r\n\r\n  ngDoCheck() {\r\n    if (this.formFieldService) {\r\n      const errors = this.formFieldService.getErrorsToDisplay();\r\n      if (errors && !this.errorsDiffer) {\r\n        this.errorsDiffer = this.differs.find(errors).create();\r\n        this._errorStateChanges.next(errors);\r\n      }\r\n      if (this.errorsDiffer) {\r\n        const diff = this.errorsDiffer.diff(errors);\r\n        if (diff) {\r\n          this._errorStateChanges.next(errors);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","declars":[{"kind":230,"kindString":"class","jsDoc":[{"comment":"Registers `control` in `KitFormFieldService`.\r\n\r\nAlso generates unique _id (needed for correct working label in form-field).","tags":[]}],"isInternal":false,"isDemo":false,"decorators":["@Directive({\r\n  // tslint:disable-next-line\r\n  selector: '[ngModel],[formControl],[formControlName]',\r\n})"],"modifiers":["export"],"name":"KitNgControlDirective","members":[{"kind":150,"name":"required","jsDoc":[],"isInternal":false,"decorators":["@Input()"],"type":"boolean","text":"@Input() required: boolean;","signature":"@Input() required: boolean"},{"kind":150,"name":"_id","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"string","initializer":"uuid()","text":"private _id: string = uuid();","signature":"private _id: string = uuid()"},{"kind":150,"name":"_errorStateChanges","jsDoc":[],"isInternal":false,"modifiers":["private"],"initializer":"new Subject<string[]>()","text":"private _errorStateChanges = new Subject<string[]>();","signature":"private _errorStateChanges = new Subject<string[]>()"},{"kind":150,"name":"errorsDiffer","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"IterableDiffer<string>","text":"private errorsDiffer: IterableDiffer<string>;","signature":"private errorsDiffer: IterableDiffer<string>"},{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["@Host() @Optional() public ngControl: NgControl","@Optional() private formFieldService: KitFormFieldService","private differs: IterableDiffers"],"text":"constructor(\r\n    @Host() @Optional() public ngControl: NgControl,\r\n    @Optional() private formFieldService: KitFormFieldService,\r\n    private differs: IterableDiffers,\r\n  ) {\r\n    if (this.ngControl && this.formFieldService) {\r\n      this.formFieldService.add(this);\r\n    }\r\n  }","signature":"constructor(@Host() @Optional() public ngControl: NgControl, @Optional() private formFieldService: KitFormFieldService, private differs: IterableDiffers)"},{"kind":154,"name":"idBinding","jsDoc":[],"isInternal":false,"decorators":["@HostBinding('attr.id')"],"parameters":[],"type":"string","text":"@HostBinding('attr.id') get idBinding(): string {\r\n    return this._id;\r\n  }","signature":"@HostBinding('attr.id') get idBinding(): string"},{"kind":154,"name":"id","jsDoc":[],"isInternal":false,"parameters":[],"type":"string","text":"get id(): string {\r\n    return this._id;\r\n  }","signature":"get id(): string"},{"kind":155,"name":"id","jsDoc":[],"isInternal":false,"decorators":["@Input()"],"parameters":["id: string"],"text":"@Input() set id(id: string) {\r\n    this._id = id;\r\n  }","signature":"@Input() set id(id: string)"},{"kind":154,"name":"errorStateChanges","jsDoc":[],"isInternal":false,"parameters":[],"type":"Observable<string[]>","text":"get errorStateChanges(): Observable<string[]> {\r\n    return this._errorStateChanges.asObservable();\r\n  }","signature":"get errorStateChanges(): Observable<string[]>"},{"kind":152,"name":"ngOnDestroy","jsDoc":[],"isInternal":false,"parameters":[],"text":"ngOnDestroy() {\r\n    if (this.formFieldService) {\r\n      this.formFieldService.remove(this);\r\n    }\r\n  }","signature":"ngOnDestroy()"},{"kind":152,"name":"ngDoCheck","jsDoc":[],"isInternal":false,"parameters":[],"text":"ngDoCheck() {\r\n    if (this.formFieldService) {\r\n      const errors = this.formFieldService.getErrorsToDisplay();\r\n      if (errors && !this.errorsDiffer) {\r\n        this.errorsDiffer = this.differs.find(errors).create();\r\n        this._errorStateChanges.next(errors);\r\n      }\r\n      if (this.errorsDiffer) {\r\n        const diff = this.errorsDiffer.diff(errors);\r\n        if (diff) {\r\n          this._errorStateChanges.next(errors);\r\n        }\r\n      }\r\n    }\r\n  }","signature":"ngDoCheck()"}],"ngMeta":{"type":"Directive","decorator":{"selector":"'[ngModel],[formControl],[formControlName]'"}}}]},{"fileName":"src/kit-form-touch/kit-form-touch.module.ts","type":"ts","text":"import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { KitFormTouchDirective } from './kit-form-touch/kit-form-touch.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  declarations: [\r\n    KitFormTouchDirective,\r\n  ],\r\n  exports: [\r\n    KitFormTouchDirective,\r\n  ],\r\n  providers: [],\r\n})\r\nexport class KitFormTouchModule {\r\n}\r\n","declars":[{"kind":230,"kindString":"class","jsDoc":[],"isInternal":false,"isDemo":false,"decorators":["@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  declarations: [\r\n    KitFormTouchDirective,\r\n  ],\r\n  exports: [\r\n    KitFormTouchDirective,\r\n  ],\r\n  providers: [],\r\n})"],"modifiers":["export"],"name":"KitFormTouchModule","members":[],"ngMeta":{"type":"NgModule","decorator":{"exports":"[\r\n    KitFormTouchDirective,\r\n  ]","providers":"[]"}}}]},{"fileName":"src/kit-form-touch/kit-form-touch.ts","type":"ts","text":"export * from './kit-form-touch.module';\r\nexport * from './kit-form-touch/kit-form-touch.directive';\r\n","declars":[]},{"fileName":"src/kit-form-touch/kit-form-touch/kit-form-touch.directive.ts","type":"ts","text":"import { Directive, HostListener, Optional } from '@angular/core';\nimport { ControlContainer, FormGroup } from '@angular/forms';\n\n/**\n * Touch all form's fields for proper errors displaying.\n *\n *\n * ### Usage\n *\n * Add `kitFormTouch` directive to submit button:\n *\n * ```html\n * <form ...>\n *   ...\n *   <button kitFormTouch ...>Submit</button>\n * </form>\n * ```\n *\n *\n * ### Example\n *\n * * collection:form - [demo](https://ngx-kit.com/collection/module/ui-form)\n */\n@Directive({\n  // tslint:disable-next-line\n  selector: '[kitFormTouch]',\n})\nexport class KitFormTouchDirective {\n  constructor(\n    @Optional() private container: ControlContainer,\n  ) {\n  }\n\n  @HostListener('click') clickHandler() {\n    if (this.container) {\n      this.formTouchAll((this.container.formDirective as any).form);\n    } else {\n      throw new Error('Use kitFormTouch inside NgForm or FormGroup');\n    }\n  }\n\n  /**\n   * Touches all FormGroup controls and controls in nested FormGroups at any level.\n   */\n  formTouchAll(form: FormGroup, revalidate?: boolean) {\n    form.markAsTouched();\n    for (const i in form.controls) {\n      if (form.controls.hasOwnProperty(i)) {\n        const control = form.controls[i];\n        if (control) {\n          control.markAsTouched();\n          if (control instanceof FormGroup) {\n            this.formTouchAll(control);\n          } else if (revalidate) {\n            control.setValue(control.value);\n          }\n        }\n      }\n    }\n  }\n}\n","declars":[{"kind":230,"kindString":"class","jsDoc":[{"comment":"Touch all form's fields for proper errors displaying.\n\n\n### Usage\n\nAdd `kitFormTouch` directive to submit button:\n\n```html\n<form ...>\n   ...\n   <button kitFormTouch ...>Submit</button>\n</form>\n```\n\n\n### Example\n\n* collection:form - [demo](https://ngx-kit.com/collection/module/ui-form)","tags":[]}],"isInternal":false,"isDemo":false,"decorators":["@Directive({\n  // tslint:disable-next-line\n  selector: '[kitFormTouch]',\n})"],"modifiers":["export"],"name":"KitFormTouchDirective","members":[{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["@Optional() private container: ControlContainer"],"text":"constructor(\n    @Optional() private container: ControlContainer,\n  ) {\n  }","signature":"constructor(@Optional() private container: ControlContainer)"},{"kind":152,"name":"clickHandler","jsDoc":[],"isInternal":false,"decorators":["@HostListener('click')"],"parameters":[],"text":"@HostListener('click') clickHandler() {\n    if (this.container) {\n      this.formTouchAll((this.container.formDirective as any).form);\n    } else {\n      throw new Error('Use kitFormTouch inside NgForm or FormGroup');\n    }\n  }","signature":"@HostListener('click') clickHandler()"},{"kind":152,"name":"formTouchAll","jsDoc":[{"comment":"Touches all FormGroup controls and controls in nested FormGroups at any level.","tags":[]}],"isInternal":false,"parameters":["form: FormGroup","revalidate?: boolean"],"text":"formTouchAll(form: FormGroup, revalidate?: boolean) {\n    form.markAsTouched();\n    for (const i in form.controls) {\n      if (form.controls.hasOwnProperty(i)) {\n        const control = form.controls[i];\n        if (control) {\n          control.markAsTouched();\n          if (control instanceof FormGroup) {\n            this.formTouchAll(control);\n          } else if (revalidate) {\n            control.setValue(control.value);\n          }\n        }\n      }\n    }\n  }","signature":"formTouchAll(form: FormGroup, revalidate?: boolean)"}],"ngMeta":{"type":"Directive","decorator":{"selector":"'[kitFormTouch]'"}}}]},{"fileName":"src/kit-hammer/kit-hammer-provider.ts","type":"ts","text":"import { Injectable } from '@angular/core';\nimport { KitPlatformService } from '../kit-platform/kit-platform.service';\n\n/**\n * Provides [Hammer.JS](https://hammerjs.github.io/) instance if available.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class KitHammerProvider<T> {\n  private _hammer: T | null = null;\n\n  constructor(\n    private platform: KitPlatformService,\n  ) {\n    if (this.platform.isBrowser()) {\n      if (window && 'Hammer' in window) {\n        this._hammer = (window as any)['Hammer'];\n      }\n    }\n  }\n\n  /**\n   * Get Hammer.JS.\n   * Returns null if not available.\n   */\n  get hammer() {\n    return this._hammer;\n  }\n\n  /**\n   * Get event position relative to passed element, not the viewport.\n   */\n  calcRelatedPosition(\n    el: HTMLElement,\n    center: {x: number, y: number},\n  ): {x: number, y: number} {\n    const rect: ClientRect = el.getBoundingClientRect();\n    return {\n      x: center.x - rect.left,\n      y: center.y - rect.top,\n    };\n  }\n}\n","declars":[{"kind":230,"kindString":"class","jsDoc":[{"comment":"Provides [Hammer.JS](https://hammerjs.github.io/) instance if available.","tags":[]}],"isInternal":false,"isDemo":false,"decorators":["@Injectable({\n  providedIn: 'root',\n})"],"modifiers":["export"],"name":"KitHammerProvider","members":[{"kind":150,"name":"_hammer","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"T | null","initializer":"null","text":"private _hammer: T | null = null;","signature":"private _hammer: T | null = null"},{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["private platform: KitPlatformService"],"text":"constructor(\n    private platform: KitPlatformService,\n  ) {\n    if (this.platform.isBrowser()) {\n      if (window && 'Hammer' in window) {\n        this._hammer = (window as any)['Hammer'];\n      }\n    }\n  }","signature":"constructor(private platform: KitPlatformService)"},{"kind":154,"name":"hammer","jsDoc":[{"comment":"Get Hammer.JS.\nReturns null if not available.","tags":[]}],"isInternal":false,"parameters":[],"text":"get hammer() {\n    return this._hammer;\n  }","signature":"get hammer()"},{"kind":152,"name":"calcRelatedPosition","jsDoc":[{"comment":"Get event position relative to passed element, not the viewport.","tags":[]}],"isInternal":false,"parameters":["el: HTMLElement","center: {x: number, y: number}"],"type":"{x: number, y: number}","text":"calcRelatedPosition(\n    el: HTMLElement,\n    center: {x: number, y: number},\n  ): {x: number, y: number} {\n    const rect: ClientRect = el.getBoundingClientRect();\n    return {\n      x: center.x - rect.left,\n      y: center.y - rect.top,\n    };\n  }","signature":"calcRelatedPosition(el: HTMLElement, center: {x: number, y: number}): {x: number, y: number}"}],"ngMeta":{"type":"Injectable","decorator":{"providedIn":"'root'"}}}]},{"fileName":"src/kit-hammer/kit-hammer.ts","type":"ts","text":"export * from './kit-hammer-provider';\r\nexport * from './meta';\r\n","declars":[]},{"fileName":"src/kit-hammer/meta.ts","type":"ts","text":"export namespace KitHammerTypes {\r\n  export const INPUT_TYPE_TOUCH = 'touch';\r\n  export const INPUT_TYPE_PEN = 'pen';\r\n  export const INPUT_TYPE_MOUSE = 'mouse';\r\n  export const INPUT_TYPE_KINECT = 'kinect';\r\n\r\n  export const COMPUTE_INTERVAL = 25;\r\n\r\n  export const INPUT_START = 1;\r\n  export const INPUT_MOVE = 2;\r\n  export const INPUT_END = 4;\r\n  export const INPUT_CANCEL = 8;\r\n\r\n  export const DIRECTION_NONE = 1;\r\n  export const DIRECTION_LEFT = 2;\r\n  export const DIRECTION_RIGHT = 4;\r\n  export const DIRECTION_UP = 8;\r\n  export const DIRECTION_DOWN = 16;\r\n\r\n  export const DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\r\n  export const DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\r\n  export const DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\r\n}\r\n","declars":[]},{"fileName":"src/kit-icons/kit-icon/kit-icon.component.ts","type":"ts","text":"import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Renderer2,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\nimport { from, Subject } from 'rxjs';\r\nimport { filter, mapTo, switchMap, take, takeUntil } from 'rxjs/operators';\r\nimport { KitIntersectionService } from '../../kit-intersection/kit-intersection.service';\r\nimport { KitPlatformService } from '../../kit-platform/kit-platform.service';\r\nimport { isArray } from '../../util/is-array';\r\nimport { uuid } from '../../util/uuid';\r\nimport { KitIconsRegistryService } from '../kit-icons-registry.service';\r\nimport { KitIconSource } from '../meta';\r\n\r\n@Component({\r\n  selector: 'kit-icon',\r\n  template: `\r\n    <ng-content></ng-content>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: inline-flex;\r\n      align-self: center;\r\n    }\r\n  `],\r\n  providers: [\r\n    KitIntersectionService,\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class KitIconComponent implements OnChanges, OnDestroy {\r\n  /**\r\n   * Svg fill color.\r\n   */\r\n  @Input() color = 'currentcolor';\r\n\r\n  /**\r\n   * Name in the registry.\r\n   */\r\n  @Input() name: string;\r\n\r\n  /**\r\n   * Size. If not specified icon size depends on line-height.\r\n   * Height and width can be specified separately by passing array `[height, width]`.\r\n   * Accepts any css sizing ('32px', '100%', '2em').\r\n   */\r\n  @Input() size: string | [string, string];\r\n\r\n  /**\r\n   * A11y title.\r\n   */\r\n  @Input() title: string;\r\n\r\n  /**\r\n   * A11y description.\r\n   */\r\n  @Input() desc: string;\r\n\r\n  /**\r\n   * Load and render icon only when visible.\r\n   */\r\n  @Input() intersectionLoad = false;\r\n\r\n  private source: KitIconSource;\r\n\r\n  private svg: SVGElement;\r\n\r\n  private nameChanges = new Subject<string>();\r\n\r\n  private destroy = new Subject<void>();\r\n\r\n  private titleEl: any;\r\n\r\n  private descEl: any;\r\n\r\n  constructor(\r\n    private registry: KitIconsRegistryService,\r\n    private el: ElementRef,\r\n    private renderer: Renderer2,\r\n    private platform: KitPlatformService,\r\n    private intersection: KitIntersectionService,\r\n  ) {\r\n    this.nameChanges\r\n      .pipe(\r\n        takeUntil(this.destroy),\r\n        switchMap(name => {\r\n          // Debounce icon load until being visible (if needed).\r\n          return this.intersectionLoad\r\n            ? this.intersection.observe().pipe(\r\n              filter(Boolean),\r\n              take(1),\r\n              mapTo(name),\r\n            )\r\n            : from([name]);\r\n        }),\r\n        switchMap(name => this.registry.get(name)),\r\n      )\r\n      .subscribe((source: KitIconSource) => {\r\n        this.source = source;\r\n        this.svg = this.svgElementFromString(this.source.svg);\r\n        this.clear();\r\n        this.updateStyles();\r\n        this.updateA11y();\r\n        this.mount();\r\n      });\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if ('name' in changes) {\r\n      this.nameChanges.next(this.name);\r\n    }\r\n    if ('size' in changes || 'color' in changes) {\r\n      this.updateStyles();\r\n    }\r\n    if ('title' in changes || 'desc' in changes) {\r\n      this.updateA11y();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroy.next();\r\n  }\r\n\r\n  private clear() {\r\n    if (this.platform.isBrowser()) {\r\n      const el: HTMLElement = this.el.nativeElement;\r\n      while (el.hasChildNodes() && el.lastChild) {\r\n        el.removeChild(el.lastChild);\r\n      }\r\n    }\r\n    this.titleEl = null;\r\n    this.descEl = null;\r\n  }\r\n\r\n  private updateStyles() {\r\n    if (this.source && this.svg) {\r\n      let height: string;\r\n      let width: string;\r\n      let position: string;\r\n      let top: string;\r\n      const size = this.size || this.source.size;\r\n      if (size) {\r\n        if (isArray(size)) {\r\n          height = size[0];\r\n          width = size[1];\r\n        } else {\r\n          height = size;\r\n          width = size;\r\n        }\r\n      } else {\r\n        height = '1em';\r\n        width = '1em';\r\n      }\r\n      // Fix position if height is 1em (default inline sizing)\r\n      if (height === '1em') {\r\n        position = 'relative';\r\n        top = '.125em';\r\n      } else {\r\n        position = 'static';\r\n        top = 'auto';\r\n      }\r\n      // Set props\r\n      this.renderer.setStyle(this.svg, 'fill', this.color);\r\n      this.renderer.setStyle(this.svg, 'height', height);\r\n      this.renderer.setStyle(this.svg, 'position', position);\r\n      this.renderer.setStyle(this.svg, 'top', top);\r\n      this.renderer.setStyle(this.svg, 'width', width);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a DOM element from the given SVG string.\r\n   */\r\n  private svgElementFromString(str: string): SVGElement {\r\n    const div = this.renderer.createElement('div');\r\n    div.innerHTML = str;\r\n    const svg = div.querySelector('svg') as SVGElement;\r\n    if (svg) {\r\n      return svg;\r\n    } else {\r\n      throw new Error(`SVG has not been rendered from \"${str}\"`);\r\n    }\r\n  }\r\n\r\n  private updateA11y() {\r\n    if (this.source && this.svg) {\r\n      this.renderer.setAttribute(this.svg, 'role', 'img');\r\n      if (this.title) {\r\n        if (!this.titleEl) {\r\n          this.titleEl = this.renderer.createElement('title');\r\n          const titleId = uuid();\r\n          this.renderer.setAttribute(this.titleEl, 'id', titleId);\r\n          this.renderer.insertBefore(this.svg, this.titleEl, this.svg.childNodes[0]);\r\n        }\r\n        this.titleEl.innerHTML = this.title;\r\n      }\r\n      if (this.desc) {\r\n        if (!this.descEl) {\r\n          this.descEl = this.renderer.createElement('desc');\r\n          const descId = uuid();\r\n          this.renderer.setAttribute(this.descEl, 'id', descId);\r\n          this.renderer.appendChild(this.svg, this.descEl);\r\n        }\r\n        this.descEl.innerHTML = this.desc;\r\n      }\r\n      this.renderer.setAttribute(\r\n        this.svg,\r\n        'aria-labelledby',\r\n        `${this.titleEl ? this.titleEl.id : ''} ${this.descEl ? this.descEl.id : ''}`,\r\n      );\r\n    }\r\n  }\r\n\r\n  private mount() {\r\n    this.renderer.appendChild(this.el.nativeElement, this.svg);\r\n  }\r\n}\r\n","declars":[{"kind":230,"kindString":"class","jsDoc":[],"isInternal":false,"isDemo":false,"decorators":["@Component({\r\n  selector: 'kit-icon',\r\n  template: `\r\n    <ng-content></ng-content>\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: inline-flex;\r\n      align-self: center;\r\n    }\r\n  `],\r\n  providers: [\r\n    KitIntersectionService,\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})"],"modifiers":["export"],"name":"KitIconComponent","members":[{"kind":150,"name":"color","jsDoc":[{"comment":"Svg fill color.","tags":[]}],"isInternal":false,"decorators":["@Input()"],"initializer":"'currentcolor'","text":"@Input() color = 'currentcolor';","signature":"@Input() color = 'currentcolor'"},{"kind":150,"name":"name","jsDoc":[{"comment":"Name in the registry.","tags":[]}],"isInternal":false,"decorators":["@Input()"],"type":"string","text":"@Input() name: string;","signature":"@Input() name: string"},{"kind":150,"name":"size","jsDoc":[{"comment":"Size. If not specified icon size depends on line-height.\r\nHeight and width can be specified separately by passing array `[height, width]`.\r\nAccepts any css sizing ('32px', '100%', '2em').","tags":[]}],"isInternal":false,"decorators":["@Input()"],"type":"string | [string, string]","text":"@Input() size: string | [string, string];","signature":"@Input() size: string | [string, string]"},{"kind":150,"name":"title","jsDoc":[{"comment":"A11y title.","tags":[]}],"isInternal":false,"decorators":["@Input()"],"type":"string","text":"@Input() title: string;","signature":"@Input() title: string"},{"kind":150,"name":"desc","jsDoc":[{"comment":"A11y description.","tags":[]}],"isInternal":false,"decorators":["@Input()"],"type":"string","text":"@Input() desc: string;","signature":"@Input() desc: string"},{"kind":150,"name":"intersectionLoad","jsDoc":[{"comment":"Load and render icon only when visible.","tags":[]}],"isInternal":false,"decorators":["@Input()"],"initializer":"false","text":"@Input() intersectionLoad = false;","signature":"@Input() intersectionLoad = false"},{"kind":150,"name":"source","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"KitIconSource","text":"private source: KitIconSource;","signature":"private source: KitIconSource"},{"kind":150,"name":"svg","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"SVGElement","text":"private svg: SVGElement;","signature":"private svg: SVGElement"},{"kind":150,"name":"nameChanges","jsDoc":[],"isInternal":false,"modifiers":["private"],"initializer":"new Subject<string>()","text":"private nameChanges = new Subject<string>();","signature":"private nameChanges = new Subject<string>()"},{"kind":150,"name":"destroy","jsDoc":[],"isInternal":false,"modifiers":["private"],"initializer":"new Subject<void>()","text":"private destroy = new Subject<void>();","signature":"private destroy = new Subject<void>()"},{"kind":150,"name":"titleEl","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"any","text":"private titleEl: any;","signature":"private titleEl: any"},{"kind":150,"name":"descEl","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"any","text":"private descEl: any;","signature":"private descEl: any"},{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["private registry: KitIconsRegistryService","private el: ElementRef","private renderer: Renderer2","private platform: KitPlatformService","private intersection: KitIntersectionService"],"text":"constructor(\r\n    private registry: KitIconsRegistryService,\r\n    private el: ElementRef,\r\n    private renderer: Renderer2,\r\n    private platform: KitPlatformService,\r\n    private intersection: KitIntersectionService,\r\n  ) {\r\n    this.nameChanges\r\n      .pipe(\r\n        takeUntil(this.destroy),\r\n        switchMap(name => {\r\n          // Debounce icon load until being visible (if needed).\r\n          return this.intersectionLoad\r\n            ? this.intersection.observe().pipe(\r\n              filter(Boolean),\r\n              take(1),\r\n              mapTo(name),\r\n            )\r\n            : from([name]);\r\n        }),\r\n        switchMap(name => this.registry.get(name)),\r\n      )\r\n      .subscribe((source: KitIconSource) => {\r\n        this.source = source;\r\n        this.svg = this.svgElementFromString(this.source.svg);\r\n        this.clear();\r\n        this.updateStyles();\r\n        this.updateA11y();\r\n        this.mount();\r\n      });\r\n  }","signature":"constructor(private registry: KitIconsRegistryService, private el: ElementRef, private renderer: Renderer2, private platform: KitPlatformService, private intersection: KitIntersectionService)"},{"kind":152,"name":"ngOnChanges","jsDoc":[],"isInternal":false,"parameters":["changes: SimpleChanges"],"text":"ngOnChanges(changes: SimpleChanges) {\r\n    if ('name' in changes) {\r\n      this.nameChanges.next(this.name);\r\n    }\r\n    if ('size' in changes || 'color' in changes) {\r\n      this.updateStyles();\r\n    }\r\n    if ('title' in changes || 'desc' in changes) {\r\n      this.updateA11y();\r\n    }\r\n  }","signature":"ngOnChanges(changes: SimpleChanges)"},{"kind":152,"name":"ngOnDestroy","jsDoc":[],"isInternal":false,"parameters":[],"text":"ngOnDestroy() {\r\n    this.destroy.next();\r\n  }","signature":"ngOnDestroy()"},{"kind":152,"name":"clear","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":[],"text":"private clear() {\r\n    if (this.platform.isBrowser()) {\r\n      const el: HTMLElement = this.el.nativeElement;\r\n      while (el.hasChildNodes() && el.lastChild) {\r\n        el.removeChild(el.lastChild);\r\n      }\r\n    }\r\n    this.titleEl = null;\r\n    this.descEl = null;\r\n  }","signature":"private clear()"},{"kind":152,"name":"updateStyles","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":[],"text":"private updateStyles() {\r\n    if (this.source && this.svg) {\r\n      let height: string;\r\n      let width: string;\r\n      let position: string;\r\n      let top: string;\r\n      const size = this.size || this.source.size;\r\n      if (size) {\r\n        if (isArray(size)) {\r\n          height = size[0];\r\n          width = size[1];\r\n        } else {\r\n          height = size;\r\n          width = size;\r\n        }\r\n      } else {\r\n        height = '1em';\r\n        width = '1em';\r\n      }\r\n      // Fix position if height is 1em (default inline sizing)\r\n      if (height === '1em') {\r\n        position = 'relative';\r\n        top = '.125em';\r\n      } else {\r\n        position = 'static';\r\n        top = 'auto';\r\n      }\r\n      // Set props\r\n      this.renderer.setStyle(this.svg, 'fill', this.color);\r\n      this.renderer.setStyle(this.svg, 'height', height);\r\n      this.renderer.setStyle(this.svg, 'position', position);\r\n      this.renderer.setStyle(this.svg, 'top', top);\r\n      this.renderer.setStyle(this.svg, 'width', width);\r\n    }\r\n  }","signature":"private updateStyles()"},{"kind":152,"name":"svgElementFromString","jsDoc":[{"comment":"Creates a DOM element from the given SVG string.","tags":[]}],"isInternal":false,"modifiers":["private"],"parameters":["str: string"],"type":"SVGElement","text":"private svgElementFromString(str: string): SVGElement {\r\n    const div = this.renderer.createElement('div');\r\n    div.innerHTML = str;\r\n    const svg = div.querySelector('svg') as SVGElement;\r\n    if (svg) {\r\n      return svg;\r\n    } else {\r\n      throw new Error(`SVG has not been rendered from \"${str}\"`);\r\n    }\r\n  }","signature":"private svgElementFromString(str: string): SVGElement"},{"kind":152,"name":"updateA11y","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":[],"text":"private updateA11y() {\r\n    if (this.source && this.svg) {\r\n      this.renderer.setAttribute(this.svg, 'role', 'img');\r\n      if (this.title) {\r\n        if (!this.titleEl) {\r\n          this.titleEl = this.renderer.createElement('title');\r\n          const titleId = uuid();\r\n          this.renderer.setAttribute(this.titleEl, 'id', titleId);\r\n          this.renderer.insertBefore(this.svg, this.titleEl, this.svg.childNodes[0]);\r\n        }\r\n        this.titleEl.innerHTML = this.title;\r\n      }\r\n      if (this.desc) {\r\n        if (!this.descEl) {\r\n          this.descEl = this.renderer.createElement('desc');\r\n          const descId = uuid();\r\n          this.renderer.setAttribute(this.descEl, 'id', descId);\r\n          this.renderer.appendChild(this.svg, this.descEl);\r\n        }\r\n        this.descEl.innerHTML = this.desc;\r\n      }\r\n      this.renderer.setAttribute(\r\n        this.svg,\r\n        'aria-labelledby',\r\n        `${this.titleEl ? this.titleEl.id : ''} ${this.descEl ? this.descEl.id : ''}`,\r\n      );\r\n    }\r\n  }","signature":"private updateA11y()"},{"kind":152,"name":"mount","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":[],"text":"private mount() {\r\n    this.renderer.appendChild(this.el.nativeElement, this.svg);\r\n  }","signature":"private mount()"}],"ngMeta":{"type":"Component","decorator":{"selector":"'kit-icon'"}}}]},{"fileName":"src/kit-icons/kit-icons-registry.service.ts","type":"ts","text":"import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { filter, map, take, tap } from 'rxjs/operators';\nimport { isArray } from '../util/is-array';\nimport { KitIcon, KitIconCached, KitIconSource } from './meta';\n\n/**\n * Icons registry.\n *\n * ```typescript\n * this.iconsRegistry.add({name: 'star', url: '/assets/icons/star.svg'});\n * // or\n * this.iconsRegistry.add([\n * {name: 'star', url: '/assets/icons/star.svg'},\n * {name: 'cloud', url: '/assets/icons/cloud.svg'},\n * ]);\n * ```\n *\n * Use in a template\n *\n * ```html\n * <kit-icon name=\"star\"></kit-icon>\n * ```\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class KitIconsRegistryService {\n  private cache: KitIconCached[] = [];\n\n  private icons: KitIcon[] = [];\n\n  constructor(private http: HttpClient) {\n  }\n\n  /**\n   * Add icons to registry.\n   */\n  add(icon: KitIcon | KitIcon[]) {\n    const icons = isArray(icon) ? icon : [icon];\n    // Validate\n    icons.forEach(i => {\n      if (!i.url && !i.xml) {\n        throw new Error('KitIconsRegistryService: icon registration requires url or xml.');\n      }\n    });\n    // Merge\n    this.icons = [...this.icons, ...icons];\n  }\n\n  /**\n   * Get icon by name.\n   *\n   * @internal\n   */\n  get(name: string): Observable<KitIconSource> {\n    const icon = this.icons.find(i => i.name === name);\n    if (icon) {\n      // Init cache\n      const fromCache = this.cache.find(c => c.name === name);\n      const cached = fromCache\n        ? fromCache\n        : {\n          name,\n          svg: new BehaviorSubject(null),\n        };\n      if (!fromCache) {\n        // Add cached to the pull\n        this.cache.push(cached);\n        if (icon.url) {\n          // Fetch\n          return this.http.get(icon.url, {responseType: 'text'})\n            .pipe(\n              tap(svg => cached.svg.next(svg)),\n              map(svg => ({svg, size: icon.size})),\n            );\n        } else if (icon.xml) {\n          // Register xml\n          cached.svg.next(icon.xml);\n        }\n      }\n      // Return stream\n      return cached.svg\n        .asObservable()\n        .pipe(\n          filter(svg => svg !== null),\n          take(1),\n          map((svg: string) => ({svg, size: icon.size})),\n        );\n    } else {\n      throw new Error(`Icon \"${name}\" not found!`);\n    }\n  }\n}\n","declars":[{"kind":230,"kindString":"class","jsDoc":[{"comment":"Icons registry.\n\n```typescript\nthis.iconsRegistry.add({name: 'star', url: '/assets/icons/star.svg'});\n// or\nthis.iconsRegistry.add([\n{name: 'star', url: '/assets/icons/star.svg'},\n{name: 'cloud', url: '/assets/icons/cloud.svg'},\n]);\n```\n\nUse in a template\n\n```html\n<kit-icon name=\"star\"></kit-icon>\n```","tags":[]}],"isInternal":false,"isDemo":false,"decorators":["@Injectable({\n  providedIn: 'root',\n})"],"modifiers":["export"],"name":"KitIconsRegistryService","members":[{"kind":150,"name":"cache","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"KitIconCached[]","initializer":"[]","text":"private cache: KitIconCached[] = [];","signature":"private cache: KitIconCached[] = []"},{"kind":150,"name":"icons","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"KitIcon[]","initializer":"[]","text":"private icons: KitIcon[] = [];","signature":"private icons: KitIcon[] = []"},{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["private http: HttpClient"],"text":"constructor(private http: HttpClient) {\n  }","signature":"constructor(private http: HttpClient)"},{"kind":152,"name":"add","jsDoc":[{"comment":"Add icons to registry.","tags":[]}],"isInternal":false,"parameters":["icon: KitIcon | KitIcon[]"],"text":"add(icon: KitIcon | KitIcon[]) {\n    const icons = isArray(icon) ? icon : [icon];\n    // Validate\n    icons.forEach(i => {\n      if (!i.url && !i.xml) {\n        throw new Error('KitIconsRegistryService: icon registration requires url or xml.');\n      }\n    });\n    // Merge\n    this.icons = [...this.icons, ...icons];\n  }","signature":"add(icon: KitIcon | KitIcon[])"},{"kind":152,"name":"get","jsDoc":[{"comment":"Get icon by name.","tags":[{"name":"internal"}]}],"isInternal":true,"parameters":["name: string"],"type":"Observable<KitIconSource>","text":"get(name: string): Observable<KitIconSource> {\n    const icon = this.icons.find(i => i.name === name);\n    if (icon) {\n      // Init cache\n      const fromCache = this.cache.find(c => c.name === name);\n      const cached = fromCache\n        ? fromCache\n        : {\n          name,\n          svg: new BehaviorSubject(null),\n        };\n      if (!fromCache) {\n        // Add cached to the pull\n        this.cache.push(cached);\n        if (icon.url) {\n          // Fetch\n          return this.http.get(icon.url, {responseType: 'text'})\n            .pipe(\n              tap(svg => cached.svg.next(svg)),\n              map(svg => ({svg, size: icon.size})),\n            );\n        } else if (icon.xml) {\n          // Register xml\n          cached.svg.next(icon.xml);\n        }\n      }\n      // Return stream\n      return cached.svg\n        .asObservable()\n        .pipe(\n          filter(svg => svg !== null),\n          take(1),\n          map((svg: string) => ({svg, size: icon.size})),\n        );\n    } else {\n      throw new Error(`Icon \"${name}\" not found!`);\n    }\n  }","signature":"get(name: string): Observable<KitIconSource>"}],"ngMeta":{"type":"Injectable","decorator":{"providedIn":"'root'"}}}]},{"fileName":"src/kit-icons/kit-icons.module.ts","type":"ts","text":"import { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { KitIconComponent } from './kit-icon/kit-icon.component';\n\n@NgModule({\n  imports: [\n    HttpClientModule,\n  ],\n  exports: [\n    KitIconComponent,\n  ],\n  declarations: [\n    KitIconComponent,\n  ],\n})\nexport class KitIconsModule {\n}\n","declars":[{"kind":230,"kindString":"class","jsDoc":[],"isInternal":false,"isDemo":false,"decorators":["@NgModule({\n  imports: [\n    HttpClientModule,\n  ],\n  exports: [\n    KitIconComponent,\n  ],\n  declarations: [\n    KitIconComponent,\n  ],\n})"],"modifiers":["export"],"name":"KitIconsModule","members":[],"ngMeta":{"type":"NgModule","decorator":{"exports":"[\n    KitIconComponent,\n  ]"}}}]},{"fileName":"src/kit-icons/kit-icons.ts","type":"ts","text":"export * from './meta';\r\nexport * from './kit-icon/kit-icon.component';\r\nexport * from './kit-icons.module';\r\nexport * from './kit-icons-registry.service';\r\n","declars":[]},{"fileName":"src/kit-icons/meta.ts","type":"ts","text":"import { BehaviorSubject } from 'rxjs';\n\nexport interface KitIcon {\n  name: string;\n  url?: string;\n  xml?: string;\n  size?: string;\n}\n\nexport interface KitIconSource {\n  svg: string;\n  size?: string;\n}\n\nexport interface KitIconCached {\n  name: string;\n  svg: BehaviorSubject<string | null>;\n}\n","declars":[{"kind":231,"kindString":"interface","jsDoc":[],"isInternal":false,"name":"KitIcon","members":[{"kind":149,"jsDoc":[],"isInternal":false,"name":"name","type":"string","text":"name: string;","signature":"name(): string"},{"kind":149,"jsDoc":[],"isInternal":false,"name":"url","type":"string","text":"url?: string;","signature":"url(): string"},{"kind":149,"jsDoc":[],"isInternal":false,"name":"xml","type":"string","text":"xml?: string;","signature":"xml(): string"},{"kind":149,"jsDoc":[],"isInternal":false,"name":"size","type":"string","text":"size?: string;","signature":"size(): string"}]},{"kind":231,"kindString":"interface","jsDoc":[],"isInternal":false,"name":"KitIconSource","members":[{"kind":149,"jsDoc":[],"isInternal":false,"name":"svg","type":"string","text":"svg: string;","signature":"svg(): string"},{"kind":149,"jsDoc":[],"isInternal":false,"name":"size","type":"string","text":"size?: string;","signature":"size(): string"}]},{"kind":231,"kindString":"interface","jsDoc":[],"isInternal":false,"name":"KitIconCached","members":[{"kind":149,"jsDoc":[],"isInternal":false,"name":"name","type":"string","text":"name: string;","signature":"name(): string"},{"kind":149,"jsDoc":[],"isInternal":false,"name":"svg","type":"BehaviorSubject<string | null>","text":"svg: BehaviorSubject<string | null>;","signature":"svg(): BehaviorSubject<string | null>"}]}]},{"fileName":"src/kit-input-date/kit-input-date.directive.ts","type":"ts","text":"import { Directive, forwardRef, Input, OnChanges } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { KitMomentProvider } from '../kit-moment/kit-moment-provider';\nimport { KitModelInterceptor } from '../kit-value-accessor/kit-model-interceptor';\n\n/**\n * Displays date in an input in any format and store JS Date-object in model.\n *\n *\n * ### Usage\n *\n * Use the directive:\n *\n * ```html\n * <input [(ngModel)]=\"date\"\n *        kitInputDate>\n * ```\n *\n * #### Format\n *\n * You can define rendering/parsing format:\n *\n * ```html\n * <input [(ngModel)]=\"date\"\n *        kitInputDate\n *        format=\"YYYY/DD/MM\">\n * ```\n *\n * __Requires Moment.js.__\n *\n *\n * ### Example\n *\n * * collection:date-picker -\n * [sources](https://github.com/ngx-kit/ngx-kit/tree/master/packages/collection/lib/ui-date-picker),\n * [demo](http://ngx-kit.com/collection/module/ui-date-picker)\n */\n@Directive({\n  selector: '[kitInputDate]',\n  providers: [\n    {\n      provide: KitModelInterceptor,\n      useExisting: forwardRef(() => KitInputDateDirective),\n    },\n  ],\n})\nexport class KitInputDateDirective implements KitModelInterceptor, OnChanges {\n  @Input() kitInputDate: void;\n\n  /**\n   * `Date.toLocaleDateString()` options.\n   */\n  @Input() options: any = {};\n\n  /**\n   * Parse and render format (works only with moment.js).\n   */\n  @Input() format: string;\n\n  readonly viewStateChanges = new Subject<string>();\n\n  readonly modelStateChanges = new Subject<any>();\n\n  private moment: any = null;\n\n  constructor(private momentProvider: KitMomentProvider<any>) {\n    this.moment = this.momentProvider.moment;\n  }\n\n  ngOnChanges() {\n    if (this.format && !this.moment) {\n      throw new Error(\n        'KitInputDateDirective: Format option requires moment.js!\\n' +\n        '==========\\n' +\n        'Possible solution:\\n' +\n        '  1. Install moment: npm install moment\\n' +\n        '  2. Add \"node_modules/moment/moment.js\" to angular.json scripts section.\\n' +\n        '==========\\n',\n      );\n    }\n  }\n\n  /**\n   * Handle input changing by user.\n   */\n  input(value: string, event: any) {\n    const date = this.parse(value);\n    this.modelStateChanges.next(this.isValid(date) ? date : null);\n  }\n\n  keyDown(event: any) {\n  }\n\n  /**\n   * Handle external modal changing.\n   */\n  writeValue(value: any) {\n    const date = this.parse(value);\n    this.viewStateChanges.next(\n      this.isValid(date)\n        ? this.moment && this.format ? this.moment(date).format(this.format) : date.toDateString()\n        : '');\n  }\n\n  private parse(raw: any) {\n    return this.moment && this.format\n      ? this.moment(raw, this.format).toDate()\n      : new Date(Date.parse(raw));\n  }\n\n  private isValid(raw: Date) {\n    const date = new Date(raw);\n    return !isNaN(date.getTime());\n  }\n}\n","declars":[{"kind":230,"kindString":"class","jsDoc":[{"comment":"Displays date in an input in any format and store JS Date-object in model.\n\n\n### Usage\n\nUse the directive:\n\n```html\n<input [(ngModel)]=\"date\"\n        kitInputDate>\n```\n\n#### Format\n\nYou can define rendering/parsing format:\n\n```html\n<input [(ngModel)]=\"date\"\n        kitInputDate\n        format=\"YYYY/DD/MM\">\n```\n\n__Requires Moment.js.__\n\n\n### Example\n\n* collection:date-picker -\n[sources](https://github.com/ngx-kit/ngx-kit/tree/master/packages/collection/lib/ui-date-picker),\n[demo](http://ngx-kit.com/collection/module/ui-date-picker)","tags":[]}],"isInternal":false,"isDemo":false,"decorators":["@Directive({\n  selector: '[kitInputDate]',\n  providers: [\n    {\n      provide: KitModelInterceptor,\n      useExisting: forwardRef(() => KitInputDateDirective),\n    },\n  ],\n})"],"modifiers":["export"],"name":"KitInputDateDirective","members":[{"kind":150,"name":"kitInputDate","jsDoc":[],"isInternal":false,"decorators":["@Input()"],"type":"void","text":"@Input() kitInputDate: void;","signature":"@Input() kitInputDate: void"},{"kind":150,"name":"options","jsDoc":[{"comment":"`Date.toLocaleDateString()` options.","tags":[]}],"isInternal":false,"decorators":["@Input()"],"type":"any","initializer":"{}","text":"@Input() options: any = {};","signature":"@Input() options: any = {}"},{"kind":150,"name":"format","jsDoc":[{"comment":"Parse and render format (works only with moment.js).","tags":[]}],"isInternal":false,"decorators":["@Input()"],"type":"string","text":"@Input() format: string;","signature":"@Input() format: string"},{"kind":150,"name":"viewStateChanges","jsDoc":[],"isInternal":false,"modifiers":["readonly"],"initializer":"new Subject<string>()","text":"readonly viewStateChanges = new Subject<string>();","signature":"readonly viewStateChanges = new Subject<string>()"},{"kind":150,"name":"modelStateChanges","jsDoc":[],"isInternal":false,"modifiers":["readonly"],"initializer":"new Subject<any>()","text":"readonly modelStateChanges = new Subject<any>();","signature":"readonly modelStateChanges = new Subject<any>()"},{"kind":150,"name":"moment","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"any","initializer":"null","text":"private moment: any = null;","signature":"private moment: any = null"},{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["private momentProvider: KitMomentProvider<any>"],"text":"constructor(private momentProvider: KitMomentProvider<any>) {\n    this.moment = this.momentProvider.moment;\n  }","signature":"constructor(private momentProvider: KitMomentProvider<any>)"},{"kind":152,"name":"ngOnChanges","jsDoc":[],"isInternal":false,"parameters":[],"text":"ngOnChanges() {\n    if (this.format && !this.moment) {\n      throw new Error(\n        'KitInputDateDirective: Format option requires moment.js!\\n' +\n        '==========\\n' +\n        'Possible solution:\\n' +\n        '  1. Install moment: npm install moment\\n' +\n        '  2. Add \"node_modules/moment/moment.js\" to angular.json scripts section.\\n' +\n        '==========\\n',\n      );\n    }\n  }","signature":"ngOnChanges()"},{"kind":152,"name":"input","jsDoc":[{"comment":"Handle input changing by user.","tags":[]}],"isInternal":false,"parameters":["value: string","event: any"],"text":"input(value: string, event: any) {\n    const date = this.parse(value);\n    this.modelStateChanges.next(this.isValid(date) ? date : null);\n  }","signature":"input(value: string, event: any)"},{"kind":152,"name":"keyDown","jsDoc":[],"isInternal":false,"parameters":["event: any"],"text":"keyDown(event: any) {\n  }","signature":"keyDown(event: any)"},{"kind":152,"name":"writeValue","jsDoc":[{"comment":"Handle external modal changing.","tags":[]}],"isInternal":false,"parameters":["value: any"],"text":"writeValue(value: any) {\n    const date = this.parse(value);\n    this.viewStateChanges.next(\n      this.isValid(date)\n        ? this.moment && this.format ? this.moment(date).format(this.format) : date.toDateString()\n        : '');\n  }","signature":"writeValue(value: any)"},{"kind":152,"name":"parse","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":["raw: any"],"text":"private parse(raw: any) {\n    return this.moment && this.format\n      ? this.moment(raw, this.format).toDate()\n      : new Date(Date.parse(raw));\n  }","signature":"private parse(raw: any)"},{"kind":152,"name":"isValid","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":["raw: Date"],"text":"private isValid(raw: Date) {\n    const date = new Date(raw);\n    return !isNaN(date.getTime());\n  }","signature":"private isValid(raw: Date)"}],"ngMeta":{"type":"Directive","decorator":{"selector":"'[kitInputDate]'"}}}]},{"fileName":"src/kit-input-date/kit-input-date.module.ts","type":"ts","text":"import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { KitValueAccessorModule } from '../kit-value-accessor/kit-value-accessor.module';\r\nimport { KitInputDateDirective } from './kit-input-date.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  exports: [\r\n    KitValueAccessorModule,\r\n    KitInputDateDirective,\r\n  ],\r\n  declarations: [\r\n    KitInputDateDirective,\r\n  ],\r\n})\r\nexport class KitInputDateModule {\r\n}\r\n","declars":[{"kind":230,"kindString":"class","jsDoc":[],"isInternal":false,"isDemo":false,"decorators":["@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  exports: [\r\n    KitValueAccessorModule,\r\n    KitInputDateDirective,\r\n  ],\r\n  declarations: [\r\n    KitInputDateDirective,\r\n  ],\r\n})"],"modifiers":["export"],"name":"KitInputDateModule","members":[],"ngMeta":{"type":"NgModule","decorator":{"exports":"[\r\n    KitValueAccessorModule,\r\n    KitInputDateDirective,\r\n  ]"}}}]},{"fileName":"src/kit-input-date/kit-input-date.ts","type":"ts","text":"export * from './kit-input-date.directive';\r\nexport * from './kit-input-date.module';\r\n","declars":[]},{"fileName":"src/kit-intersection/kit-intersection.module.ts","type":"ts","text":"import { NgModule } from '@angular/core';\r\nimport { KitIntersectionDirective } from './kit-intersection/kit-intersection.directive';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    KitIntersectionDirective,\r\n  ],\r\n  exports: [\r\n    KitIntersectionDirective,\r\n  ],\r\n})\r\nexport class KitIntersectionModule {\r\n}\r\n","declars":[{"kind":230,"kindString":"class","jsDoc":[],"isInternal":false,"isDemo":false,"decorators":["@NgModule({\r\n  declarations: [\r\n    KitIntersectionDirective,\r\n  ],\r\n  exports: [\r\n    KitIntersectionDirective,\r\n  ],\r\n})"],"modifiers":["export"],"name":"KitIntersectionModule","members":[],"ngMeta":{"type":"NgModule","decorator":{"exports":"[\r\n    KitIntersectionDirective,\r\n  ]"}}}]},{"fileName":"src/kit-intersection/kit-intersection.service.ts","type":"ts","text":"import { ElementRef, Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject, from, Observable } from 'rxjs';\nimport { KitPlatformService } from '../kit-platform/kit-platform.service';\n\n/**\n * Observe viewport intersection.\n *\n * Should be provided on a component or a directive.\n *\n *\n * ### Usage\n *\n * Provide `KitIntersectionService` on a component or a directive, that you want to observe.\n *\n * ```typescript\n * \\@Component({\n *   ...\n *   providers: [\n *     KitIntersectionService,\n *   ],\n * })\n * export class TestComponent {\n *   constructor(private intersection: KitIntersectionService) {\n *   }\n *   ...\n *   // Check\n *   const visible = this.instersection.isIntersecting;\n *   ...\n *   // Observe\n *   this.instersection.observe().subscribe(isIntersecting => {\n *   });\n * }\n * ```\n */\n@Injectable()\nexport class KitIntersectionService implements OnDestroy {\n  private observer = new BehaviorSubject<boolean>(false);\n\n  private io: IntersectionObserver;\n\n  constructor(\n    private elementRef: ElementRef,\n    private platform: KitPlatformService,\n  ) {\n  }\n\n  get isIntersecting() {\n    return this.observer.value;\n  }\n\n  ngOnDestroy() {\n    if (this.io) {\n      this.io.disconnect();\n    }\n  }\n\n  observe(): Observable<boolean | null> {\n    if (this.platform.isBrowser() && 'IntersectionObserver' in window) {\n      if (!this.io) {\n        this.initObserver();\n      }\n      return this.observer.asObservable();\n    } else {\n      return from([null]);\n    }\n  }\n\n  private initObserver() {\n    this.io = new IntersectionObserver((data) => {\n      this.observer.next(data && data[0] && data[0].isIntersecting);\n    });\n    this.io.observe(this.elementRef.nativeElement);\n  }\n}\n","declars":[{"kind":230,"kindString":"class","jsDoc":[{"comment":"Observe viewport intersection.\n\nShould be provided on a component or a directive.\n\n\n### Usage\n\nProvide `KitIntersectionService` on a component or a directive, that you want to observe.\n\n```typescript\n\\@Component({\n   ...\n   providers: [\n     KitIntersectionService,\n   ],\n})\nexport class TestComponent {\n   constructor(private intersection: KitIntersectionService) {\n   }\n   ...\n   // Check\n   const visible = this.instersection.isIntersecting;\n   ...\n   // Observe\n   this.instersection.observe().subscribe(isIntersecting => {\n   });\n}\n```","tags":[]}],"isInternal":false,"isDemo":false,"decorators":["@Injectable()"],"modifiers":["export"],"name":"KitIntersectionService","members":[{"kind":150,"name":"observer","jsDoc":[],"isInternal":false,"modifiers":["private"],"initializer":"new BehaviorSubject<boolean>(false)","text":"private observer = new BehaviorSubject<boolean>(false);","signature":"private observer = new BehaviorSubject<boolean>(false)"},{"kind":150,"name":"io","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"IntersectionObserver","text":"private io: IntersectionObserver;","signature":"private io: IntersectionObserver"},{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["private elementRef: ElementRef","private platform: KitPlatformService"],"text":"constructor(\n    private elementRef: ElementRef,\n    private platform: KitPlatformService,\n  ) {\n  }","signature":"constructor(private elementRef: ElementRef, private platform: KitPlatformService)"},{"kind":154,"name":"isIntersecting","jsDoc":[],"isInternal":false,"parameters":[],"text":"get isIntersecting() {\n    return this.observer.value;\n  }","signature":"get isIntersecting()"},{"kind":152,"name":"ngOnDestroy","jsDoc":[],"isInternal":false,"parameters":[],"text":"ngOnDestroy() {\n    if (this.io) {\n      this.io.disconnect();\n    }\n  }","signature":"ngOnDestroy()"},{"kind":152,"name":"observe","jsDoc":[],"isInternal":false,"parameters":[],"type":"Observable<boolean | null>","text":"observe(): Observable<boolean | null> {\n    if (this.platform.isBrowser() && 'IntersectionObserver' in window) {\n      if (!this.io) {\n        this.initObserver();\n      }\n      return this.observer.asObservable();\n    } else {\n      return from([null]);\n    }\n  }","signature":"observe(): Observable<boolean | null>"},{"kind":152,"name":"initObserver","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":[],"text":"private initObserver() {\n    this.io = new IntersectionObserver((data) => {\n      this.observer.next(data && data[0] && data[0].isIntersecting);\n    });\n    this.io.observe(this.elementRef.nativeElement);\n  }","signature":"private initObserver()"}],"ngMeta":{"type":"Injectable","decorator":{}}}]},{"fileName":"src/kit-intersection/kit-intersection.ts","type":"ts","text":"export * from './kit-intersection.module';\r\nexport * from './kit-intersection.service';\r\nexport * from './kit-intersection/kit-intersection.directive';\r\n","declars":[]},{"fileName":"src/kit-intersection/kit-intersection/kit-intersection.directive.ts","type":"ts","text":"import { Directive, EventEmitter, OnInit, Output } from '@angular/core';\nimport { KitIntersectionService } from '../kit-intersection.service';\n\n/**\n * Observe viewport intersection.\n *\n *\n * ### Usage\n *\n * And listen to intersection changes:\n *\n * ```html\n * <div (kitIntersection)=\"visible = $event\">\n * </div>\n * ```\n */\n@Directive({\n  selector: '[kitIntersection]',\n  providers: [\n    KitIntersectionService,\n  ],\n})\nexport class KitIntersectionDirective implements OnInit {\n  @Output() kitIntersection = new EventEmitter<boolean>();\n\n  constructor(\n    private intersection: KitIntersectionService,\n  ) {\n  }\n\n  ngOnInit() {\n    this.intersection.observe().subscribe(isIntersecting => {\n      this.kitIntersection.emit(!!isIntersecting);\n    });\n  }\n}\n","declars":[{"kind":230,"kindString":"class","jsDoc":[{"comment":"Observe viewport intersection.\n\n\n### Usage\n\nAnd listen to intersection changes:\n\n```html\n<div (kitIntersection)=\"visible = $event\">\n</div>\n```","tags":[]}],"isInternal":false,"isDemo":false,"decorators":["@Directive({\n  selector: '[kitIntersection]',\n  providers: [\n    KitIntersectionService,\n  ],\n})"],"modifiers":["export"],"name":"KitIntersectionDirective","members":[{"kind":150,"name":"kitIntersection","jsDoc":[],"isInternal":false,"decorators":["@Output()"],"initializer":"new EventEmitter<boolean>()","text":"@Output() kitIntersection = new EventEmitter<boolean>();","signature":"@Output() kitIntersection = new EventEmitter<boolean>()"},{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["private intersection: KitIntersectionService"],"text":"constructor(\n    private intersection: KitIntersectionService,\n  ) {\n  }","signature":"constructor(private intersection: KitIntersectionService)"},{"kind":152,"name":"ngOnInit","jsDoc":[],"isInternal":false,"parameters":[],"text":"ngOnInit() {\n    this.intersection.observe().subscribe(isIntersecting => {\n      this.kitIntersection.emit(!!isIntersecting);\n    });\n  }","signature":"ngOnInit()"}],"ngMeta":{"type":"Directive","decorator":{"selector":"'[kitIntersection]'"}}}]},{"fileName":"src/kit-loading/kit-loading-progress.ts","type":"ts","text":"import { Observable, Subject } from 'rxjs';\r\nimport { uuid } from '../util/uuid';\r\nimport { KitLoadingEndFn, KitLoadingState } from './meta';\r\n\r\nexport class KitLoadingProgress {\r\n\r\n  private current = new Set<string>();\r\n\r\n  private _state: KitLoadingState = KitLoadingState.None;\r\n\r\n  private _stateChanges = new Subject<KitLoadingState>();\r\n\r\n  constructor(public readonly id: string) {\r\n  }\r\n\r\n  get state(): KitLoadingState {\r\n    return this._state;\r\n  }\r\n\r\n  get stateChanges(): Observable<KitLoadingState> {\r\n    return this._stateChanges.asObservable();\r\n  }\r\n\r\n  start(key?: string): KitLoadingEndFn {\r\n    this.current.add(key || uuid());\r\n    this.checkState();\r\n    return () => {\r\n      this.end(key);\r\n    };\r\n  }\r\n\r\n  end(key?: string) {\r\n    if (key) {\r\n      this.current.delete(key);\r\n    } else {\r\n      this.current.clear();\r\n    }\r\n    this.checkState();\r\n  }\r\n\r\n  private checkState() {\r\n    if (this.current.size > 0 && this._state === KitLoadingState.None) {\r\n      this.setState(KitLoadingState.InProgress);\r\n    }\r\n    if (this.current.size === 0 && this._state === KitLoadingState.InProgress) {\r\n      this.setState(KitLoadingState.None);\r\n    }\r\n  }\r\n\r\n  private setState(state: KitLoadingState) {\r\n    this._state = state;\r\n    this._stateChanges.next(this._state);\r\n  }\r\n}\r\n","declars":[{"kind":230,"kindString":"class","jsDoc":[],"isInternal":false,"isDemo":false,"modifiers":["export"],"name":"KitLoadingProgress","members":[{"kind":150,"name":"current","jsDoc":[],"isInternal":false,"modifiers":["private"],"initializer":"new Set<string>()","text":"private current = new Set<string>();","signature":"private current = new Set<string>()"},{"kind":150,"name":"_state","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"KitLoadingState","initializer":"KitLoadingState.None","text":"private _state: KitLoadingState = KitLoadingState.None;","signature":"private _state: KitLoadingState = KitLoadingState.None"},{"kind":150,"name":"_stateChanges","jsDoc":[],"isInternal":false,"modifiers":["private"],"initializer":"new Subject<KitLoadingState>()","text":"private _stateChanges = new Subject<KitLoadingState>();","signature":"private _stateChanges = new Subject<KitLoadingState>()"},{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["public readonly id: string"],"text":"constructor(public readonly id: string) {\r\n  }","signature":"constructor(public readonly id: string)"},{"kind":154,"name":"state","jsDoc":[],"isInternal":false,"parameters":[],"type":"KitLoadingState","text":"get state(): KitLoadingState {\r\n    return this._state;\r\n  }","signature":"get state(): KitLoadingState"},{"kind":154,"name":"stateChanges","jsDoc":[],"isInternal":false,"parameters":[],"type":"Observable<KitLoadingState>","text":"get stateChanges(): Observable<KitLoadingState> {\r\n    return this._stateChanges.asObservable();\r\n  }","signature":"get stateChanges(): Observable<KitLoadingState>"},{"kind":152,"name":"start","jsDoc":[],"isInternal":false,"parameters":["key?: string"],"type":"KitLoadingEndFn","text":"start(key?: string): KitLoadingEndFn {\r\n    this.current.add(key || uuid());\r\n    this.checkState();\r\n    return () => {\r\n      this.end(key);\r\n    };\r\n  }","signature":"start(key?: string): KitLoadingEndFn"},{"kind":152,"name":"end","jsDoc":[],"isInternal":false,"parameters":["key?: string"],"text":"end(key?: string) {\r\n    if (key) {\r\n      this.current.delete(key);\r\n    } else {\r\n      this.current.clear();\r\n    }\r\n    this.checkState();\r\n  }","signature":"end(key?: string)"},{"kind":152,"name":"checkState","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":[],"text":"private checkState() {\r\n    if (this.current.size > 0 && this._state === KitLoadingState.None) {\r\n      this.setState(KitLoadingState.InProgress);\r\n    }\r\n    if (this.current.size === 0 && this._state === KitLoadingState.InProgress) {\r\n      this.setState(KitLoadingState.None);\r\n    }\r\n  }","signature":"private checkState()"},{"kind":152,"name":"setState","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":["state: KitLoadingState"],"text":"private setState(state: KitLoadingState) {\r\n    this._state = state;\r\n    this._stateChanges.next(this._state);\r\n  }","signature":"private setState(state: KitLoadingState)"}]}]},{"fileName":"src/kit-loading/kit-loading.service.ts","type":"ts","text":"import { Injectable } from '@angular/core';\nimport { NavigationEnd, NavigationStart, Router } from '@angular/router';\nimport { KitLoadingProgress } from './kit-loading-progress';\nimport { kitLoadingGlobal } from './meta';\n\n/**\n * Service for providing loading state.\n *\n *\n * ### Usage\n *\n * #### Global progress\n *\n * Provide `KitLoadingService`, get `global` progress and subscribe on state changes:\n *\n * ```typescript\n * constructor(private loading: KitLoadingService) {\n * }\n *\n * ngOnInit() {\n *   this.loading.global.stateChanges\n *     .subscribe(s => {\n *       this.loadingState = s;\n *     });\n * }\n * ```\n *\n * There are two states: `KitLoadingState.InProgress` and `KitLoadingState.None`.\n *\n * State changes on `NavigationStart` and `NavigationEnd` event by default.\n *\n * Also you can run progress manually. For example, show loading progress while data is fetching:\n *\n * ```typescript\n * this.loading.global.start('data');\n * this.dataService.get().subscribe(() => {\n *   ...\n *   this.loading.global.end('data');\n * });\n * ```\n *\n * State switched to `None` only after all started events was ended.\n *\n * #### Custom progress\n *\n * Get a progress by `.progress(key: string)` method, if progress is not presented it will be automatically created.\n *\n * Custom progresses do not watch on router events, only on manual `start`/`end` calls.\n *\n * ```typescript\n * this.loading.progress('data-loading').start('data');\n * this.dataService.get().subscribe(() => {\n *   ...\n *   this.loading.progress('data-loading').end('data');\n * });\n * ```\n *\n *\n * ### Example\n *\n * * collection:loading-bar -\n * [sources](https://github.com/ngx-kit/ngx-kit/tree/master/packages/collection/lib/ui-loading-bar),\n * [demo](https://ngx-kit.com/collection/module/ui-loading-bar)\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class KitLoadingService {\n  private progresses = new Map<string, KitLoadingProgress>();\n\n  constructor(private router: Router) {\n    // create global progress\n    const globalProgress = this.progress(kitLoadingGlobal);\n    // subscribe globalProgress to router events\n    this.router.events.subscribe(event => {\n      if (event instanceof NavigationStart) {\n        globalProgress.start('routing');\n      }\n      if (event instanceof NavigationEnd) {\n        globalProgress.end('routing');\n      }\n    });\n  }\n\n  get global(): KitLoadingProgress {\n    return this.progress(kitLoadingGlobal);\n  }\n\n  progress(id: string): KitLoadingProgress {\n    if (this.progresses.has(id)) {\n      return this.progresses.get(id) as KitLoadingProgress;\n    } else {\n      const progress = new KitLoadingProgress(id);\n      this.progresses.set(id, progress);\n      return progress;\n    }\n  }\n}\n","declars":[{"kind":230,"kindString":"class","jsDoc":[{"comment":"Service for providing loading state.\n\n\n### Usage\n\n#### Global progress\n\nProvide `KitLoadingService`, get `global` progress and subscribe on state changes:\n\n```typescript\nconstructor(private loading: KitLoadingService) {\n}\n\nngOnInit() {\n   this.loading.global.stateChanges\n     .subscribe(s => {\n       this.loadingState = s;\n     });\n}\n```\n\nThere are two states: `KitLoadingState.InProgress` and `KitLoadingState.None`.\n\nState changes on `NavigationStart` and `NavigationEnd` event by default.\n\nAlso you can run progress manually. For example, show loading progress while data is fetching:\n\n```typescript\nthis.loading.global.start('data');\nthis.dataService.get().subscribe(() => {\n   ...\n   this.loading.global.end('data');\n});\n```\n\nState switched to `None` only after all started events was ended.\n\n#### Custom progress\n\nGet a progress by `.progress(key: string)` method, if progress is not presented it will be automatically created.\n\nCustom progresses do not watch on router events, only on manual `start`/`end` calls.\n\n```typescript\nthis.loading.progress('data-loading').start('data');\nthis.dataService.get().subscribe(() => {\n   ...\n   this.loading.progress('data-loading').end('data');\n});\n```\n\n\n### Example\n\n* collection:loading-bar -\n[sources](https://github.com/ngx-kit/ngx-kit/tree/master/packages/collection/lib/ui-loading-bar),\n[demo](https://ngx-kit.com/collection/module/ui-loading-bar)","tags":[]}],"isInternal":false,"isDemo":false,"decorators":["@Injectable({\n  providedIn: 'root',\n})"],"modifiers":["export"],"name":"KitLoadingService","members":[{"kind":150,"name":"progresses","jsDoc":[],"isInternal":false,"modifiers":["private"],"initializer":"new Map<string, KitLoadingProgress>()","text":"private progresses = new Map<string, KitLoadingProgress>();","signature":"private progresses = new Map<string, KitLoadingProgress>()"},{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["private router: Router"],"text":"constructor(private router: Router) {\n    // create global progress\n    const globalProgress = this.progress(kitLoadingGlobal);\n    // subscribe globalProgress to router events\n    this.router.events.subscribe(event => {\n      if (event instanceof NavigationStart) {\n        globalProgress.start('routing');\n      }\n      if (event instanceof NavigationEnd) {\n        globalProgress.end('routing');\n      }\n    });\n  }","signature":"constructor(private router: Router)"},{"kind":154,"name":"global","jsDoc":[],"isInternal":false,"parameters":[],"type":"KitLoadingProgress","text":"get global(): KitLoadingProgress {\n    return this.progress(kitLoadingGlobal);\n  }","signature":"get global(): KitLoadingProgress"},{"kind":152,"name":"progress","jsDoc":[],"isInternal":false,"parameters":["id: string"],"type":"KitLoadingProgress","text":"progress(id: string): KitLoadingProgress {\n    if (this.progresses.has(id)) {\n      return this.progresses.get(id) as KitLoadingProgress;\n    } else {\n      const progress = new KitLoadingProgress(id);\n      this.progresses.set(id, progress);\n      return progress;\n    }\n  }","signature":"progress(id: string): KitLoadingProgress"}],"ngMeta":{"type":"Injectable","decorator":{"providedIn":"'root'"}}}]},{"fileName":"src/kit-loading/kit-loading.ts","type":"ts","text":"export * from './kit-loading.service';\r\nexport * from './kit-loading-progress';\r\nexport * from './meta';\r\n","declars":[]},{"fileName":"src/kit-loading/meta.ts","type":"ts","text":"export const kitLoadingGlobal = 'global';\r\n\r\nexport type KitLoadingEndFn = () => void;\r\n\r\nexport enum KitLoadingState {\r\n  InProgress = 'in-progress',\r\n  None = 'none',\r\n}\r\n","declars":[{"kind":232,"kindString":"typeAlias","jsDoc":[],"isInternal":false,"name":"KitLoadingEndFn","type":"() => void","text":"export type KitLoadingEndFn = () => void;"}]},{"fileName":"src/kit-modal/kit-modal-backdrop/kit-modal-backdrop.component.ts","type":"ts","text":"import { animate, style, transition, trigger } from '@angular/animations';\r\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'kit-modal-backdrop',\r\n  template: `\r\n    <div *ngIf=\"display\"\r\n         class=\"backdrop\"\r\n         [@fade]=\"true\"\r\n         (click)=\"close.emit()\">\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .backdrop {\r\n      background: rgba(0, 0, 0, .4);\r\n      position: fixed;\r\n      top: 0;\r\n      right: 0;\r\n      bottom: 0;\r\n      left: 0;\r\n    }\r\n  `],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('fade', [\r\n      transition(':enter', [\r\n        style({\r\n          opacity: 0,\r\n        }),\r\n        animate('150ms ease-out', style({\r\n          opacity: 1,\r\n        })),\r\n      ]),\r\n      transition(':leave', [\r\n        style({opacity: 1}),\r\n        animate('150ms ease-in', style({\r\n          opacity: 0,\r\n        })),\r\n      ]),\r\n    ]),\r\n  ],\r\n})\r\nexport class KitModalBackdropComponent {\r\n  @Output() close = new EventEmitter<void>();\r\n\r\n  private _display = false;\r\n\r\n  constructor(private cdr: ChangeDetectorRef) {\r\n  }\r\n\r\n  get display() {\r\n    return this._display;\r\n  }\r\n\r\n  @Input() set display(display: boolean) {\r\n    if (display !== this._display) {\r\n      this._display = display;\r\n      this.cdr.detectChanges();\r\n    }\r\n  }\r\n}\r\n","declars":[{"kind":230,"kindString":"class","jsDoc":[],"isInternal":false,"isDemo":false,"decorators":["@Component({\r\n  selector: 'kit-modal-backdrop',\r\n  template: `\r\n    <div *ngIf=\"display\"\r\n         class=\"backdrop\"\r\n         [@fade]=\"true\"\r\n         (click)=\"close.emit()\">\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .backdrop {\r\n      background: rgba(0, 0, 0, .4);\r\n      position: fixed;\r\n      top: 0;\r\n      right: 0;\r\n      bottom: 0;\r\n      left: 0;\r\n    }\r\n  `],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('fade', [\r\n      transition(':enter', [\r\n        style({\r\n          opacity: 0,\r\n        }),\r\n        animate('150ms ease-out', style({\r\n          opacity: 1,\r\n        })),\r\n      ]),\r\n      transition(':leave', [\r\n        style({opacity: 1}),\r\n        animate('150ms ease-in', style({\r\n          opacity: 0,\r\n        })),\r\n      ]),\r\n    ]),\r\n  ],\r\n})"],"modifiers":["export"],"name":"KitModalBackdropComponent","members":[{"kind":150,"name":"close","jsDoc":[],"isInternal":false,"decorators":["@Output()"],"initializer":"new EventEmitter<void>()","text":"@Output() close = new EventEmitter<void>();","signature":"@Output() close = new EventEmitter<void>()"},{"kind":150,"name":"_display","jsDoc":[],"isInternal":false,"modifiers":["private"],"initializer":"false","text":"private _display = false;","signature":"private _display = false"},{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["private cdr: ChangeDetectorRef"],"text":"constructor(private cdr: ChangeDetectorRef) {\r\n  }","signature":"constructor(private cdr: ChangeDetectorRef)"},{"kind":154,"name":"display","jsDoc":[],"isInternal":false,"parameters":[],"text":"get display() {\r\n    return this._display;\r\n  }","signature":"get display()"},{"kind":155,"name":"display","jsDoc":[],"isInternal":false,"decorators":["@Input()"],"parameters":["display: boolean"],"text":"@Input() set display(display: boolean) {\r\n    if (display !== this._display) {\r\n      this._display = display;\r\n      this.cdr.detectChanges();\r\n    }\r\n  }","signature":"@Input() set display(display: boolean)"}],"ngMeta":{"type":"Component","decorator":{"selector":"'kit-modal-backdrop'"}}}]},{"fileName":"src/kit-modal/kit-modal-ref.ts","type":"ts","text":"import { Injectable, ViewRef } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { KitOverlayComponentRef, KitOverlayInput } from '../../';\nimport { Partial } from '../util/util';\nimport { uuid } from '../util/uuid';\nimport { KitModalOptions } from './meta';\n\n@Injectable()\nexport class KitModalRef<T> {\n  /** @internal */\n  readonly id = uuid();\n\n  readonly onClose = new Subject<void>();\n\n  readonly onDestroy = new Subject<void>();\n\n  /** @internal */\n  viewRef: ViewRef;\n\n  /** @internal */\n  componentRef: KitOverlayComponentRef<T>;\n\n  private _options: Partial<KitModalOptions> = {};\n\n  get options(): Partial<KitModalOptions> {\n    return this._options;\n  }\n\n  set options(options: Partial<KitModalOptions>) {\n    this._options = {...options};\n  }\n\n  get instance(): T {\n    if (this.componentRef) {\n      return this.componentRef.componentRef.instance;\n    } else {\n      throw new Error('Modal initiated without instance.');\n    }\n  }\n\n  /** @internal */\n  applyParams(params: Partial<KitModalOptions>) {\n    this._options = {...this.options, ...params};\n  }\n\n  /**\n   * Emit close event.\n   */\n  close() {\n    this.onClose.next();\n  }\n\n  /**\n   * Pass input to the hosted component.\n   */\n  input(input: KitOverlayInput<T>) {\n    if (this.componentRef) {\n      this.componentRef.input(input);\n    } else {\n      throw new Error('Modal initiated without instance. Input could be passed programmatically only for ' +\n        'service-hosted modals.');\n    }\n  }\n}\n","declars":[{"kind":230,"kindString":"class","jsDoc":[],"isInternal":false,"isDemo":false,"decorators":["@Injectable()"],"modifiers":["export"],"name":"KitModalRef","members":[{"kind":150,"name":"id","jsDoc":[{"tags":[{"name":"internal"}]}],"isInternal":true,"modifiers":["readonly"],"initializer":"uuid()","text":"readonly id = uuid();","signature":"readonly id = uuid()"},{"kind":150,"name":"onClose","jsDoc":[],"isInternal":false,"modifiers":["readonly"],"initializer":"new Subject<void>()","text":"readonly onClose = new Subject<void>();","signature":"readonly onClose = new Subject<void>()"},{"kind":150,"name":"onDestroy","jsDoc":[],"isInternal":false,"modifiers":["readonly"],"initializer":"new Subject<void>()","text":"readonly onDestroy = new Subject<void>();","signature":"readonly onDestroy = new Subject<void>()"},{"kind":150,"name":"viewRef","jsDoc":[{"tags":[{"name":"internal"}]}],"isInternal":true,"type":"ViewRef","text":"viewRef: ViewRef;","signature":"viewRef: ViewRef"},{"kind":150,"name":"componentRef","jsDoc":[{"tags":[{"name":"internal"}]}],"isInternal":true,"type":"KitOverlayComponentRef<T>","text":"componentRef: KitOverlayComponentRef<T>;","signature":"componentRef: KitOverlayComponentRef<T>"},{"kind":150,"name":"_options","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"Partial<KitModalOptions>","initializer":"{}","text":"private _options: Partial<KitModalOptions> = {};","signature":"private _options: Partial<KitModalOptions> = {}"},{"kind":154,"name":"options","jsDoc":[],"isInternal":false,"parameters":[],"type":"Partial<KitModalOptions>","text":"get options(): Partial<KitModalOptions> {\n    return this._options;\n  }","signature":"get options(): Partial<KitModalOptions>"},{"kind":155,"name":"options","jsDoc":[],"isInternal":false,"parameters":["options: Partial<KitModalOptions>"],"text":"set options(options: Partial<KitModalOptions>) {\n    this._options = {...options};\n  }","signature":"set options(options: Partial<KitModalOptions>)"},{"kind":154,"name":"instance","jsDoc":[],"isInternal":false,"parameters":[],"type":"T","text":"get instance(): T {\n    if (this.componentRef) {\n      return this.componentRef.componentRef.instance;\n    } else {\n      throw new Error('Modal initiated without instance.');\n    }\n  }","signature":"get instance(): T"},{"kind":152,"name":"applyParams","jsDoc":[{"tags":[{"name":"internal"}]}],"isInternal":true,"parameters":["params: Partial<KitModalOptions>"],"text":"applyParams(params: Partial<KitModalOptions>) {\n    this._options = {...this.options, ...params};\n  }","signature":"applyParams(params: Partial<KitModalOptions>)"},{"kind":152,"name":"close","jsDoc":[{"comment":"Emit close event.","tags":[]}],"isInternal":false,"parameters":[],"text":"close() {\n    this.onClose.next();\n  }","signature":"close()"},{"kind":152,"name":"input","jsDoc":[{"comment":"Pass input to the hosted component.","tags":[]}],"isInternal":false,"parameters":["input: KitOverlayInput<T>"],"text":"input(input: KitOverlayInput<T>) {\n    if (this.componentRef) {\n      this.componentRef.input(input);\n    } else {\n      throw new Error('Modal initiated without instance. Input could be passed programmatically only for ' +\n        'service-hosted modals.');\n    }\n  }","signature":"input(input: KitOverlayInput<T>)"}],"ngMeta":{"type":"Injectable","decorator":{}}}]},{"fileName":"src/kit-modal/kit-modal.module.ts","type":"ts","text":"import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { KitModalBackdropComponent } from './kit-modal-backdrop/kit-modal-backdrop.component';\r\nimport { KitModalComponent } from './kit-modal/kit-modal.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  declarations: [\r\n    KitModalBackdropComponent,\r\n    KitModalComponent,\r\n  ],\r\n  exports: [\r\n    KitModalComponent,\r\n  ],\r\n  entryComponents: [\r\n    KitModalBackdropComponent,\r\n  ],\r\n})\r\nexport class KitModalModule {\r\n}\r\n","declars":[{"kind":230,"kindString":"class","jsDoc":[],"isInternal":false,"isDemo":false,"decorators":["@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  declarations: [\r\n    KitModalBackdropComponent,\r\n    KitModalComponent,\r\n  ],\r\n  exports: [\r\n    KitModalComponent,\r\n  ],\r\n  entryComponents: [\r\n    KitModalBackdropComponent,\r\n  ],\r\n})"],"modifiers":["export"],"name":"KitModalModule","members":[],"ngMeta":{"type":"NgModule","decorator":{"exports":"[\r\n    KitModalComponent,\r\n  ]"}}}]},{"fileName":"src/kit-modal/kit-modal.service.ts","type":"ts","text":"import { DOCUMENT } from '@angular/common';\nimport { ComponentFactoryResolver, forwardRef, Inject, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { KitEventManagerService } from '../kit-event-manager/kit-event-manager.service';\nimport { keyEscape } from '../kit-event-manager/meta';\nimport { KitOverlayComponentRef } from '../kit-overlay/kit-overlay-component-ref';\nimport { KitOverlayService } from '../kit-overlay/kit-overlay.service';\nimport { KitPlatformService } from '../kit-platform/kit-platform.service';\nimport { KitModalBackdropComponent } from './kit-modal-backdrop/kit-modal-backdrop.component';\nimport { KitModalRef } from './kit-modal-ref';\nimport { KitModalOptions, KitModalShowArgs } from './meta';\n\n/**\n * Modal dialogs are displayed in a layer is above of the page content.\n *\n *\n * ### Usage\n *\n * Core does not provide styling or structure for modal, only tools for controlling overlay, backdrop, nesting, a11y.\n *\n * You can use Angular component composition and create any set of modals.\n *\n * ```typescript\n * export class DemoComponent {\n *   private modalRef: KitModalRef<DemoModalComponent>;\n *\n *   constructor(private modalService: KitModalService) {\n *   }\n *\n *   showModal() {\n *     this.modalRef = this.modalService.show({component: DemoModalComponent});\n *   }\n *\n *   closeModal() {\n *     this.modalRef.close();\n *   }\n * }\n * ```\n *\n * You can provide `KitModalRef` in `DemoModalComponent`:\n *\n * ```typescript\n * export class DemoModalComponent {\n *   constructor(private modalRef: KitModalRef<DemoModalComponent>) {\n *   }\n *\n *   close() {\n *     this.modalRef.close();\n *   }\n * }\n * ```\n *\n * When `KitModalRef.close()` called it destroys component instance.\n *\n * Do not forget to define `DemoModalComponent` in `entryComponents`.\n *\n * #### Configuration\n *\n * Available options:\n *   * `backdropClose` (default: `true`) - indicating if clicking the backdrop should close the modal.\n *   * `escClose` (default: `true`) - indicating if pressing the `esc` key should close the modal.\n *   * `scrollLock` (default: `true`) - indicating if scroll of body is disabled while modal is displayed.\n *\n * Modal options can be passed by DI provider, `KitModelService.show()` method or with `kit-modal` params.\n *\n * ```typescript\n * this.modalService.show({component: DemoModalComponent, options: {backdropClose: false}});\n * ```\n *\n * ##### Default config\n *\n * If you want to redefine default options with DI you should define all options:\n *\n * ```typescript\n * providers: [\n *   {\n *     provide: KitModalOptions,\n *     useValue: {\n *       backdropClose: true,\n *       escClose: true,\n *       scrollLock: true,\n *     },\n *   },\n * ],\n * ```\n *\n * #### Data-binding\n *\n * For service-hosted modals we have methods for communication with component instance.\n *\n * ##### input\n *\n * ```typescript\n * export class DemoModalComponent {\n *   @Input() field: string;\n * }\n * ```\n *\n * ```typescript\n * this.modalRef = this.modalService.show({component: DemoModalComponent});\n * this.modalRef.input({field: 'value'});\n * ```\n *\n * `input` method passes value to the defined field and calls `ngOnChanges` life-cycle hook (if needed).\n *\n * ##### output\n *\n * ```typescript\n * export class DemoModalComponent {\n *   @Output() event = new EventEmitter<any>();\n * }\n * ```\n *\n * ```typescript\n * this.modalRef = this.modalService.show({component: DemoModalComponent});\n * this.modalRef.instance.event.subscribe((value: any) => {\n * });\n * ```\n *\n * As you can see `DemoModalComponent` can be used both in the service-hosted and in the template-hosted approach.\n *\n * ```html\n * <kit-modal>\n *   <demo-modal *kitOverlay=\"display\"\n *               [field]=\"\"\n *               (event)=\"\">\n *   </demo-modal>\n * </kit-modal>\n * ```\n *\n * #### Guards\n *\n * ##### `canClose`\n *\n * Handy for service-hosted modals when you don't have full control of closing process.\n *\n * If `canClose` method returns `false` modal will not be destroyed.\n *\n * ```typescript\n * export class DemoModalComponent implements KitModalCanClose {\n *   canClose(): boolean {\n *   }\n * }\n * ```\n *\n * #### Modal components in Lazy Modules\n *\n * You could get error `No component factory found for NameOfModalComponent` inside Lazy Modules. To solve the problem\n *     just provide `KitModelService` in this module.\n *\n *\n * ### Example\n *\n * * collection:modal - [sources](https://github.com/ngx-kit/ngx-kit/tree/master/packages/collection/lib/ui-modal),\n *     [demo](https://ngx-kit.com/collection/module/ui-modal)\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class KitModalService {\n  private backdropRef: KitOverlayComponentRef<KitModalBackdropComponent>;\n\n  private displayed = new Set<KitModalRef<any>>();\n\n  private isRoot: boolean;\n\n  constructor(\n    private overlay: KitOverlayService,\n    private em: KitEventManagerService,\n    private options: KitModalOptions,\n    @Inject(DOCUMENT) private document: any,\n    private platform: KitPlatformService,\n    @Optional() @Inject(forwardRef(() => KitModalService)) @SkipSelf() private parent: KitModalService,\n    private cfr: ComponentFactoryResolver,\n  ) {\n    this.isRoot = !this.parent;\n  }\n\n  /**\n   * Display component as modal in the overlay.\n   */\n  show<T>(\n    {\n      component,\n      options,\n      componentFactoryResolver,\n      viewContainerRef,\n    }: KitModalShowArgs<T>,\n  ): KitModalRef<T> {\n    if (this.isRoot) {\n      this.initBackdrop();\n      const ref = new KitModalRef<T>();\n      const componentRef = this.overlay\n        .hostComponent<T>({\n          component,\n          providers: [\n            {\n              provide: KitModalRef,\n              useValue: ref,\n            },\n          ],\n          componentFactoryResolver: componentFactoryResolver,\n          viewContainerRef: viewContainerRef,\n        });\n      ref.options = {...this.options, ...options};\n      ref.componentRef = componentRef;\n      ref.viewRef = componentRef.componentRef.hostView;\n      ref.onClose.subscribe(() => {\n        // run closing guard if defined\n        if (!ref.instance['canClose'] || ref.instance['canClose']()) {\n          componentRef.componentRef.destroy();\n          ref.onDestroy.next();\n        }\n      });\n      this.addRef(ref);\n      return ref;\n    } else {\n      return this.parent.show({\n        component,\n        options,\n        componentFactoryResolver: componentFactoryResolver || this.cfr,\n        viewContainerRef,\n      });\n    }\n  }\n\n  /** @internal */\n  addRef(ref: KitModalRef<any>) {\n    if (this.isRoot) {\n      this.initBackdrop();\n      this.displayed.add(ref);\n      // update backdrop\n      ref.onDestroy.subscribe(() => {\n        this.displayed.delete(ref);\n        this.checkBackdrop();\n      });\n      this.checkBackdrop();\n    } else {\n      this.parent.addRef(ref);\n    }\n  }\n\n  private checkBackdrop() {\n    this.backdropRef.input({display: this.displayed.size > 0});\n    // move backdrop\n    const top = this.getTopModalRef();\n    if (top) {\n      this.overlay.moveUnder(this.backdropRef.componentRef.hostView, top.viewRef);\n    }\n    // handle body scroll-lock\n    if (this.platform.isBrowser() && this.document) {\n      if (top && top.options.scrollLock) {\n        this.document.body.style.overflow = 'hidden';\n      } else {\n        this.document.body.style.removeProperty('overflow');\n      }\n    }\n  }\n\n  private backdropClickHandler() {\n    const top = this.getTopModalRef();\n    if (top && top.options.backdropClose) {\n      top.onClose.next();\n    }\n  }\n\n  private escHandler() {\n    const top = this.getTopModalRef();\n    if (top && top.options.escClose) {\n      top.onClose.next();\n    }\n  }\n\n  private getTopModalRef(): KitModalRef<any> | undefined {\n    return Array.from(this.displayed.values()).pop();\n  }\n\n  private initBackdrop() {\n    if (!this.backdropRef) {\n      this.backdropRef = this.overlay.hostComponent({component: KitModalBackdropComponent});\n      // backdrop close handler\n      this.backdropRef.componentRef.instance.close.subscribe(() => {\n        this.backdropClickHandler();\n      });\n      // control esc\n      this.em.listenGlobal('keydown', (event: KeyboardEvent) => {\n        if (event.keyCode === keyEscape) {\n          this.escHandler();\n        }\n      }, true);\n    }\n  }\n}\n","declars":[{"kind":230,"kindString":"class","jsDoc":[{"comment":"Modal dialogs are displayed in a layer is above of the page content.\n\n\n### Usage\n\nCore does not provide styling or structure for modal, only tools for controlling overlay, backdrop, nesting, a11y.\n\nYou can use Angular component composition and create any set of modals.\n\n```typescript\nexport class DemoComponent {\n   private modalRef: KitModalRef<DemoModalComponent>;\n\n   constructor(private modalService: KitModalService) {\n   }\n\n   showModal() {\n     this.modalRef = this.modalService.show({component: DemoModalComponent});\n   }\n\n   closeModal() {\n     this.modalRef.close();\n   }\n}\n```\n\nYou can provide `KitModalRef` in `DemoModalComponent`:\n\n```typescript\nexport class DemoModalComponent {\n   constructor(private modalRef: KitModalRef<DemoModalComponent>) {\n   }\n\n   close() {\n     this.modalRef.close();\n   }\n}\n```\n\nWhen `KitModalRef.close()` called it destroys component instance.\n\nDo not forget to define `DemoModalComponent` in `entryComponents`.\n\n#### Configuration\n\nAvailable options:\n   * `backdropClose` (default: `true`) - indicating if clicking the backdrop should close the modal.\n   * `escClose` (default: `true`) - indicating if pressing the `esc` key should close the modal.\n   * `scrollLock` (default: `true`) - indicating if scroll of body is disabled while modal is displayed.\n\nModal options can be passed by DI provider, `KitModelService.show()` method or with `kit-modal` params.\n\n```typescript\nthis.modalService.show({component: DemoModalComponent, options: {backdropClose: false}});\n```\n\n##### Default config\n\nIf you want to redefine default options with DI you should define all options:\n\n```typescript\nproviders: [\n   {\n     provide: KitModalOptions,\n     useValue: {\n       backdropClose: true,\n       escClose: true,\n       scrollLock: true,\n     },\n   },\n],\n```\n\n#### Data-binding\n\nFor service-hosted modals we have methods for communication with component instance.\n\n##### input\n\n```typescript\nexport class DemoModalComponent {\n   ","tags":[{"name":"Input","value":"() field: string;\n}\n```\n\n```typescript\nthis.modalRef = this.modalService.show({component: DemoModalComponent});\nthis.modalRef.input({field: 'value'});\n```\n\n`input` method passes value to the defined field and calls `ngOnChanges` life-cycle hook (if needed).\n\n##### output\n\n```typescript\nexport class DemoModalComponent {"},{"name":"Output","value":"() event = new EventEmitter<any>();\n}\n```\n\n```typescript\nthis.modalRef = this.modalService.show({component: DemoModalComponent});\nthis.modalRef.instance.event.subscribe((value: any) => {\n});\n```\n\nAs you can see `DemoModalComponent` can be used both in the service-hosted and in the template-hosted approach.\n\n```html\n<kit-modal>\n<demo-modal *kitOverlay=\"display\"\n     [field]=\"\"\n     (event)=\"\">\n</demo-modal>\n</kit-modal>\n```\n\n#### Guards\n\n##### `canClose`\n\nHandy for service-hosted modals when you don't have full control of closing process.\n\nIf `canClose` method returns `false` modal will not be destroyed.\n\n```typescript\nexport class DemoModalComponent implements KitModalCanClose {\ncanClose(): boolean {\n}\n}\n```\n\n#### Modal components in Lazy Modules\n\nYou could get error `No component factory found for NameOfModalComponent` inside Lazy Modules. To solve the problem\njust provide `KitModelService` in this module.\n\n\n### Example\n\n* collection:modal - [sources](https://github.com/ngx-kit/ngx-kit/tree/master/packages/collection/lib/ui-modal),\n[demo](https://ngx-kit.com/collection/module/ui-modal)"}]}],"isInternal":false,"isDemo":false,"decorators":["@Injectable({\n  providedIn: 'root',\n})"],"modifiers":["export"],"name":"KitModalService","members":[{"kind":150,"name":"backdropRef","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"KitOverlayComponentRef<KitModalBackdropComponent>","text":"private backdropRef: KitOverlayComponentRef<KitModalBackdropComponent>;","signature":"private backdropRef: KitOverlayComponentRef<KitModalBackdropComponent>"},{"kind":150,"name":"displayed","jsDoc":[],"isInternal":false,"modifiers":["private"],"initializer":"new Set<KitModalRef<any>>()","text":"private displayed = new Set<KitModalRef<any>>();","signature":"private displayed = new Set<KitModalRef<any>>()"},{"kind":150,"name":"isRoot","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"boolean","text":"private isRoot: boolean;","signature":"private isRoot: boolean"},{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["private overlay: KitOverlayService","private em: KitEventManagerService","private options: KitModalOptions","@Inject(DOCUMENT) private document: any","private platform: KitPlatformService","@Optional() @Inject(forwardRef(() => KitModalService)) @SkipSelf() private parent: KitModalService","private cfr: ComponentFactoryResolver"],"text":"constructor(\n    private overlay: KitOverlayService,\n    private em: KitEventManagerService,\n    private options: KitModalOptions,\n    @Inject(DOCUMENT) private document: any,\n    private platform: KitPlatformService,\n    @Optional() @Inject(forwardRef(() => KitModalService)) @SkipSelf() private parent: KitModalService,\n    private cfr: ComponentFactoryResolver,\n  ) {\n    this.isRoot = !this.parent;\n  }","signature":"constructor(private overlay: KitOverlayService, private em: KitEventManagerService, private options: KitModalOptions, @Inject(DOCUMENT) private document: any, private platform: KitPlatformService, @Optional() @Inject(forwardRef(() => KitModalService)) @SkipSelf() private parent: KitModalService, private cfr: ComponentFactoryResolver)"},{"kind":152,"name":"show","jsDoc":[{"comment":"Display component as modal in the overlay.","tags":[]}],"isInternal":false,"parameters":["{\n      component,\n      options,\n      componentFactoryResolver,\n      viewContainerRef,\n    }: KitModalShowArgs<T>"],"type":"KitModalRef<T>","text":"show<T>(\n    {\n      component,\n      options,\n      componentFactoryResolver,\n      viewContainerRef,\n    }: KitModalShowArgs<T>,\n  ): KitModalRef<T> {\n    if (this.isRoot) {\n      this.initBackdrop();\n      const ref = new KitModalRef<T>();\n      const componentRef = this.overlay\n        .hostComponent<T>({\n          component,\n          providers: [\n            {\n              provide: KitModalRef,\n              useValue: ref,\n            },\n          ],\n          componentFactoryResolver: componentFactoryResolver,\n          viewContainerRef: viewContainerRef,\n        });\n      ref.options = {...this.options, ...options};\n      ref.componentRef = componentRef;\n      ref.viewRef = componentRef.componentRef.hostView;\n      ref.onClose.subscribe(() => {\n        // run closing guard if defined\n        if (!ref.instance['canClose'] || ref.instance['canClose']()) {\n          componentRef.componentRef.destroy();\n          ref.onDestroy.next();\n        }\n      });\n      this.addRef(ref);\n      return ref;\n    } else {\n      return this.parent.show({\n        component,\n        options,\n        componentFactoryResolver: componentFactoryResolver || this.cfr,\n        viewContainerRef,\n      });\n    }\n  }","signature":"show({\n      component,\n      options,\n      componentFactoryResolver,\n      viewContainerRef,\n    }: KitModalShowArgs<T>): KitModalRef<T>"},{"kind":152,"name":"addRef","jsDoc":[{"tags":[{"name":"internal"}]}],"isInternal":true,"parameters":["ref: KitModalRef<any>"],"text":"addRef(ref: KitModalRef<any>) {\n    if (this.isRoot) {\n      this.initBackdrop();\n      this.displayed.add(ref);\n      // update backdrop\n      ref.onDestroy.subscribe(() => {\n        this.displayed.delete(ref);\n        this.checkBackdrop();\n      });\n      this.checkBackdrop();\n    } else {\n      this.parent.addRef(ref);\n    }\n  }","signature":"addRef(ref: KitModalRef<any>)"},{"kind":152,"name":"checkBackdrop","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":[],"text":"private checkBackdrop() {\n    this.backdropRef.input({display: this.displayed.size > 0});\n    // move backdrop\n    const top = this.getTopModalRef();\n    if (top) {\n      this.overlay.moveUnder(this.backdropRef.componentRef.hostView, top.viewRef);\n    }\n    // handle body scroll-lock\n    if (this.platform.isBrowser() && this.document) {\n      if (top && top.options.scrollLock) {\n        this.document.body.style.overflow = 'hidden';\n      } else {\n        this.document.body.style.removeProperty('overflow');\n      }\n    }\n  }","signature":"private checkBackdrop()"},{"kind":152,"name":"backdropClickHandler","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":[],"text":"private backdropClickHandler() {\n    const top = this.getTopModalRef();\n    if (top && top.options.backdropClose) {\n      top.onClose.next();\n    }\n  }","signature":"private backdropClickHandler()"},{"kind":152,"name":"escHandler","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":[],"text":"private escHandler() {\n    const top = this.getTopModalRef();\n    if (top && top.options.escClose) {\n      top.onClose.next();\n    }\n  }","signature":"private escHandler()"},{"kind":152,"name":"getTopModalRef","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":[],"type":"KitModalRef<any> | undefined","text":"private getTopModalRef(): KitModalRef<any> | undefined {\n    return Array.from(this.displayed.values()).pop();\n  }","signature":"private getTopModalRef(): KitModalRef<any> | undefined"},{"kind":152,"name":"initBackdrop","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":[],"text":"private initBackdrop() {\n    if (!this.backdropRef) {\n      this.backdropRef = this.overlay.hostComponent({component: KitModalBackdropComponent});\n      // backdrop close handler\n      this.backdropRef.componentRef.instance.close.subscribe(() => {\n        this.backdropClickHandler();\n      });\n      // control esc\n      this.em.listenGlobal('keydown', (event: KeyboardEvent) => {\n        if (event.keyCode === keyEscape) {\n          this.escHandler();\n        }\n      }, true);\n    }\n  }","signature":"private initBackdrop()"}],"ngMeta":{"type":"Injectable","decorator":{"providedIn":"'root'"}}}]},{"fileName":"src/kit-modal/kit-modal.ts","type":"ts","text":"export * from './kit-modal.module';\r\nexport * from './kit-modal.service';\r\nexport * from './kit-modal-ref';\r\nexport * from './meta';\r\nexport * from './kit-modal/kit-modal.component';\r\n","declars":[]},{"fileName":"src/kit-modal/kit-modal/kit-modal.component.ts","type":"ts","text":"import { AfterContentInit, Component, ContentChild, EventEmitter, Input, OnDestroy, Output } from '@angular/core';\nimport { KitOverlayDirective } from '../../kit-overlay/kit-overlay/kit-overlay.directive';\nimport { KitModalRef } from '../kit-modal-ref';\nimport { KitModalService } from '../kit-modal.service';\nimport { KitModalOptions } from '../meta';\n\n/**\n * When modal hosted in template `KitModalRef.close()` just emit `(close)` event on the `kit-modal` component. Display\n * state should be controlled by `*kitOverlay` directive:\n *\n * ```html\n * <button (click)=\"display = true\">Show modal</button>\n * <kit-modal (close)=\"display = false\">\n *   <demo-modal *kitOverlay=\"display\"></demo-modal>\n * </kit-modal>\n * ```\n */\n@Component({\n  selector: 'kit-modal',\n  template: '<ng-content></ng-content>',\n  providers: [\n    KitModalRef,\n  ],\n})\nexport class KitModalComponent implements OnDestroy, AfterContentInit {\n  /**\n   * Emits when modal should be closed.\n   */\n  @Output() close = new EventEmitter<void>();\n\n  @ContentChild(KitOverlayDirective) overlay: KitOverlayDirective;\n\n  private _displayed = false;\n\n  constructor(\n    private ref: KitModalRef<any>,\n    private service: KitModalService,\n    private options: KitModalOptions,\n  ) {\n    this.ref.options = this.options;\n    this.ref.onClose.subscribe(() => {\n      this.close.emit();\n    });\n  }\n\n  /**\n   * Indicating if clicking the backdrop should close the modal.\n   */\n  @Input() set backdropClose(backdropClose: boolean) {\n    this.ref.applyParams({backdropClose});\n  }\n\n  /**\n   * Indicating if pressing the `esc` key should close the modal.\n   */\n  @Input() set escClose(escClose: boolean) {\n    this.ref.applyParams({escClose});\n  }\n\n  /**\n   * Indicating if scroll of body is disabled while modal is displayed.\n   */\n  @Input() set scrollLock(scrollLock: boolean) {\n    this.ref.applyParams({scrollLock});\n  }\n\n  ngAfterContentInit() {\n    this.overlay.displayed.subscribe(displayed => {\n      if (this._displayed !== displayed) {\n        this._displayed = displayed;\n        if (displayed && this.overlay.viewRef) {\n          this.ref.viewRef = this.overlay.viewRef;\n          this.service.addRef(this.ref);\n        } else {\n          this.ref.onDestroy.next();\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.ref.onDestroy.next();\n  }\n}\n","declars":[{"kind":230,"kindString":"class","jsDoc":[{"comment":"When modal hosted in template `KitModalRef.close()` just emit `(close)` event on the `kit-modal` component. Display\nstate should be controlled by `*kitOverlay` directive:\n\n```html\n<button (click)=\"display = true\">Show modal</button>\n<kit-modal (close)=\"display = false\">\n   <demo-modal *kitOverlay=\"display\"></demo-modal>\n</kit-modal>\n```","tags":[]}],"isInternal":false,"isDemo":false,"decorators":["@Component({\n  selector: 'kit-modal',\n  template: '<ng-content></ng-content>',\n  providers: [\n    KitModalRef,\n  ],\n})"],"modifiers":["export"],"name":"KitModalComponent","members":[{"kind":150,"name":"close","jsDoc":[{"comment":"Emits when modal should be closed.","tags":[]}],"isInternal":false,"decorators":["@Output()"],"initializer":"new EventEmitter<void>()","text":"@Output() close = new EventEmitter<void>();","signature":"@Output() close = new EventEmitter<void>()"},{"kind":150,"name":"overlay","jsDoc":[],"isInternal":false,"decorators":["@ContentChild(KitOverlayDirective)"],"type":"KitOverlayDirective","text":"@ContentChild(KitOverlayDirective) overlay: KitOverlayDirective;","signature":"@ContentChild(KitOverlayDirective) overlay: KitOverlayDirective"},{"kind":150,"name":"_displayed","jsDoc":[],"isInternal":false,"modifiers":["private"],"initializer":"false","text":"private _displayed = false;","signature":"private _displayed = false"},{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["private ref: KitModalRef<any>","private service: KitModalService","private options: KitModalOptions"],"text":"constructor(\n    private ref: KitModalRef<any>,\n    private service: KitModalService,\n    private options: KitModalOptions,\n  ) {\n    this.ref.options = this.options;\n    this.ref.onClose.subscribe(() => {\n      this.close.emit();\n    });\n  }","signature":"constructor(private ref: KitModalRef<any>, private service: KitModalService, private options: KitModalOptions)"},{"kind":155,"name":"backdropClose","jsDoc":[{"comment":"Indicating if clicking the backdrop should close the modal.","tags":[]}],"isInternal":false,"decorators":["@Input()"],"parameters":["backdropClose: boolean"],"text":"@Input() set backdropClose(backdropClose: boolean) {\n    this.ref.applyParams({backdropClose});\n  }","signature":"@Input() set backdropClose(backdropClose: boolean)"},{"kind":155,"name":"escClose","jsDoc":[{"comment":"Indicating if pressing the `esc` key should close the modal.","tags":[]}],"isInternal":false,"decorators":["@Input()"],"parameters":["escClose: boolean"],"text":"@Input() set escClose(escClose: boolean) {\n    this.ref.applyParams({escClose});\n  }","signature":"@Input() set escClose(escClose: boolean)"},{"kind":155,"name":"scrollLock","jsDoc":[{"comment":"Indicating if scroll of body is disabled while modal is displayed.","tags":[]}],"isInternal":false,"decorators":["@Input()"],"parameters":["scrollLock: boolean"],"text":"@Input() set scrollLock(scrollLock: boolean) {\n    this.ref.applyParams({scrollLock});\n  }","signature":"@Input() set scrollLock(scrollLock: boolean)"},{"kind":152,"name":"ngAfterContentInit","jsDoc":[],"isInternal":false,"parameters":[],"text":"ngAfterContentInit() {\n    this.overlay.displayed.subscribe(displayed => {\n      if (this._displayed !== displayed) {\n        this._displayed = displayed;\n        if (displayed && this.overlay.viewRef) {\n          this.ref.viewRef = this.overlay.viewRef;\n          this.service.addRef(this.ref);\n        } else {\n          this.ref.onDestroy.next();\n        }\n      }\n    });\n  }","signature":"ngAfterContentInit()"},{"kind":152,"name":"ngOnDestroy","jsDoc":[],"isInternal":false,"parameters":[],"text":"ngOnDestroy() {\n    this.ref.onDestroy.next();\n  }","signature":"ngOnDestroy()"}],"ngMeta":{"type":"Component","decorator":{"selector":"'kit-modal'"}}}]},{"fileName":"src/kit-modal/meta.ts","type":"ts","text":"import { ComponentFactoryResolver, Injectable, Type, ViewContainerRef } from '@angular/core';\r\nimport { Partial } from '../../';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class KitModalOptions {\r\n  backdropClose = true;\r\n\r\n  escClose = true;\r\n\r\n  scrollLock = true;\r\n}\r\n\r\nexport interface KitModalShowArgs<T> {\r\n  component: Type<T>;\r\n  options?: Partial<KitModalOptions>;\r\n  componentFactoryResolver?: ComponentFactoryResolver;\r\n  viewContainerRef?: ViewContainerRef;\r\n}\r\n\r\nexport interface KitModalCanClose {\r\n  canClose(): boolean;\r\n}\r\n","declars":[{"kind":230,"kindString":"class","jsDoc":[],"isInternal":false,"isDemo":false,"decorators":["@Injectable({\r\n  providedIn: 'root',\r\n})"],"modifiers":["export"],"name":"KitModalOptions","members":[{"kind":150,"name":"backdropClose","jsDoc":[],"isInternal":false,"initializer":"true","text":"backdropClose = true;","signature":"backdropClose = true"},{"kind":150,"name":"escClose","jsDoc":[],"isInternal":false,"initializer":"true","text":"escClose = true;","signature":"escClose = true"},{"kind":150,"name":"scrollLock","jsDoc":[],"isInternal":false,"initializer":"true","text":"scrollLock = true;","signature":"scrollLock = true"}],"ngMeta":{"type":"Injectable","decorator":{"providedIn":"'root'"}}},{"kind":231,"kindString":"interface","jsDoc":[],"isInternal":false,"name":"KitModalShowArgs","members":[{"kind":149,"jsDoc":[],"isInternal":false,"name":"component","type":"Type<T>","text":"component: Type<T>;","signature":"component(): Type<T>"},{"kind":149,"jsDoc":[],"isInternal":false,"name":"options","type":"Partial<KitModalOptions>","text":"options?: Partial<KitModalOptions>;","signature":"options(): Partial<KitModalOptions>"},{"kind":149,"jsDoc":[],"isInternal":false,"name":"componentFactoryResolver","type":"ComponentFactoryResolver","text":"componentFactoryResolver?: ComponentFactoryResolver;","signature":"componentFactoryResolver(): ComponentFactoryResolver"},{"kind":149,"jsDoc":[],"isInternal":false,"name":"viewContainerRef","type":"ViewContainerRef","text":"viewContainerRef?: ViewContainerRef;","signature":"viewContainerRef(): ViewContainerRef"}]},{"kind":231,"kindString":"interface","jsDoc":[],"isInternal":false,"name":"KitModalCanClose","members":[{"kind":151,"jsDoc":[],"isInternal":false,"name":"canClose","parameters":[],"type":"boolean","text":"canClose(): boolean;","signature":"canClose(): boolean"}]}]},{"fileName":"src/kit-moment/kit-moment-provider.ts","type":"ts","text":"import { Injectable } from '@angular/core';\nimport { KitPlatformService } from '../kit-platform/kit-platform.service';\n\n/**\n * Provides [Moment.js](https://momentjs.com/) instance if available.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class KitMomentProvider<T> {\n  private _moment: T | null = null;\n\n  constructor(\n    private platform: KitPlatformService,\n  ) {\n    if (this.platform.isBrowser()) {\n      if (window && 'moment' in window) {\n        this._moment = (window as any)['moment'];\n      }\n    }\n  }\n\n  /**\n   * Get Moment.js instance.\n   * Returns null if not available.\n   */\n  get moment(): T | null {\n    return this._moment;\n  }\n}\n","declars":[{"kind":230,"kindString":"class","jsDoc":[{"comment":"Provides [Moment.js](https://momentjs.com/) instance if available.","tags":[]}],"isInternal":false,"isDemo":false,"decorators":["@Injectable({\n  providedIn: 'root',\n})"],"modifiers":["export"],"name":"KitMomentProvider","members":[{"kind":150,"name":"_moment","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"T | null","initializer":"null","text":"private _moment: T | null = null;","signature":"private _moment: T | null = null"},{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["private platform: KitPlatformService"],"text":"constructor(\n    private platform: KitPlatformService,\n  ) {\n    if (this.platform.isBrowser()) {\n      if (window && 'moment' in window) {\n        this._moment = (window as any)['moment'];\n      }\n    }\n  }","signature":"constructor(private platform: KitPlatformService)"},{"kind":154,"name":"moment","jsDoc":[{"comment":"Get Moment.js instance.\nReturns null if not available.","tags":[]}],"isInternal":false,"parameters":[],"type":"T | null","text":"get moment(): T | null {\n    return this._moment;\n  }","signature":"get moment(): T | null"}],"ngMeta":{"type":"Injectable","decorator":{"providedIn":"'root'"}}}]},{"fileName":"src/kit-moment/kit-moment.ts","type":"ts","text":"export * from './kit-moment-provider';\r\n","declars":[]},{"fileName":"src/kit-mq/kit-mq.module.ts","type":"ts","text":"import { NgModule } from '@angular/core';\r\nimport { KitMqDirective } from './kit-mq/kit-mq.directive';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    KitMqDirective,\r\n  ],\r\n  exports: [\r\n    KitMqDirective,\r\n  ],\r\n})\r\nexport class KitMqModule {\r\n}\r\n","declars":[{"kind":230,"kindString":"class","jsDoc":[],"isInternal":false,"isDemo":false,"decorators":["@NgModule({\r\n  declarations: [\r\n    KitMqDirective,\r\n  ],\r\n  exports: [\r\n    KitMqDirective,\r\n  ],\r\n})"],"modifiers":["export"],"name":"KitMqModule","members":[],"ngMeta":{"type":"NgModule","decorator":{"exports":"[\r\n    KitMqDirective,\r\n  ]"}}}]},{"fileName":"src/kit-mq/kit-mq.service.ts","type":"ts","text":"import { Inject, Injectable, Optional } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { KitPlatformService } from '../kit-platform/kit-platform.service';\nimport { kitMqBreakpoints, KitMqParams } from './meta';\n\nconst breakpointsError =\n  'Provide breakpoints for KitMqService:\\n' +\n  'providers: [\\n' +\n  '  {\\n' +\n  '    provide: kitMqBreakpoints,\\n' +\n  '    useValue: {\\n' +\n  '      mobile: \\'320px\\',\\n' +\n  '      tablet: \\'740px\\',\\n' +\n  '      desktop: \\'980px\\',\\n' +\n  '      wide: \\'1300px\\',\\n' +\n  '    }\\n' +\n  '  }\\n' +\n  ']';\n\n/**\n * Check or observe media query.\n *\n * ### Usage\n *\n * Provide breakpoints in the root module:\n *\n * ```typescript\n * ...\n * providers: [\n *   {\n *     provide: kitMqBreakpoints,\n *     useValue: {\n *       mobile: '320px',\n *       tablet: '740px',\n *       desktop: '980px',\n *       wide: '1300px',\n *     },\n *   },\n * ],\n * ```\n *\n * Set of breakpoint is a fully customizable.\n *\n * Use the service:\n *\n * ```typescript\n * constructor(private mq: KitMqService) {\n * }\n * ...\n * // Check\n * const matches = this.mq.check({from: 'mobile', until: 'tablet'});\n * ...\n * // Observe\n * this.mq.observe({from: 'tablet'}).subscribe(matches => {\n * });\n * ```\n *\n * @todo remove mq observer on destroy\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class KitMqService {\n  private matchMedia: ((mediaQuery: string) => MediaQueryList);\n\n  private mqs = new Map<string, MediaQueryList>();\n\n  constructor(\n    private platform: KitPlatformService,\n    @Optional() @Inject(kitMqBreakpoints) private breakpoints: any,\n  ) {\n    if (!this.breakpoints) {\n      throw new Error(breakpointsError);\n    }\n    if (this.platform.isBrowser() && 'matchMedia' in window) {\n      this.matchMedia = window.matchMedia.bind(window);\n    }\n  }\n\n  check(params: KitMqParams) {\n    return this.checkRaw(this.buildQuery(params));\n  }\n\n  checkRaw(mediaQuery: string): boolean | null {\n    if (this.matchMedia) {\n      const mq = this.getMq(mediaQuery);\n      return mq.matches;\n    } else {\n      return null;\n    }\n  }\n\n  observe(params: KitMqParams) {\n    return this.observeRaw(this.buildQuery(params));\n  }\n\n  observeRaw(mediaQuery: string): Observable<boolean | null> {\n    return new Observable((observer) => {\n      if (this.matchMedia) {\n        const listener: MediaQueryListListener = (mql) => {\n          observer.next(mql.matches);\n        };\n        const mq = this.getMq(mediaQuery);\n        observer.next(mq.matches);\n        mq.addListener(listener);\n      } else {\n        observer.next(null);\n        observer.complete();\n      }\n    });\n  }\n\n  private buildQuery(params: KitMqParams) {\n    if (!params.from && !params.until) {\n      throw new Error(`KitMqService: invalid mq params`);\n    }\n    let query = '';\n    // Compile media type\n    if (params.type) {\n      query = `${params.type}`;\n    }\n    // Compile from\n    if (params.from) {\n      if (!this.breakpoints[params.from]) {\n        throw new Error(`KitMqService: breakpoint \"${params.from}\" has not been registered!`);\n      }\n      query = this.concatQuery(query, `(min-width: ${this.breakpoints[params.from]})`);\n    }\n    // Compile until\n    if (params.until) {\n      if (!this.breakpoints[params.until]) {\n        throw new Error(`KitMqService: breakpoint \"${params.until}\" has not been registered!`);\n      }\n      query = this.concatQuery(query, `(max-width: ${this.breakpoints[params.until]})`);\n    }\n    // Compile \"and\"\n    if (params.and) {\n      query = this.concatQuery(query, params.and);\n    }\n    return query;\n  }\n\n  private concatQuery(query: string, attach: string) {\n    return query && query.length > 0 ? `${query} and ${attach}` : attach;\n  }\n\n  private getMq(query: string) {\n    let mq = this.mqs.get(query);\n    if (!mq) {\n      mq = this.matchMedia(query);\n      this.mqs.set(query, mq);\n    }\n    return mq;\n  }\n}\n","declars":[{"kind":230,"kindString":"class","jsDoc":[{"comment":"Check or observe media query.\n\n### Usage\n\nProvide breakpoints in the root module:\n\n```typescript\n...\nproviders: [\n   {\n     provide: kitMqBreakpoints,\n     useValue: {\n       mobile: '320px',\n       tablet: '740px',\n       desktop: '980px',\n       wide: '1300px',\n     },\n   },\n],\n```\n\nSet of breakpoint is a fully customizable.\n\nUse the service:\n\n```typescript\nconstructor(private mq: KitMqService) {\n}\n...\n// Check\nconst matches = this.mq.check({from: 'mobile', until: 'tablet'});\n...\n// Observe\nthis.mq.observe({from: 'tablet'}).subscribe(matches => {\n});\n```","tags":[{"name":"todo","value":"remove mq observer on destroy"}]}],"isInternal":false,"isDemo":false,"decorators":["@Injectable({\n  providedIn: 'root',\n})"],"modifiers":["export"],"name":"KitMqService","members":[{"kind":150,"name":"matchMedia","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"((mediaQuery: string) => MediaQueryList)","text":"private matchMedia: ((mediaQuery: string) => MediaQueryList);","signature":"private matchMedia: ((mediaQuery: string) => MediaQueryList)"},{"kind":150,"name":"mqs","jsDoc":[],"isInternal":false,"modifiers":["private"],"initializer":"new Map<string, MediaQueryList>()","text":"private mqs = new Map<string, MediaQueryList>();","signature":"private mqs = new Map<string, MediaQueryList>()"},{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["private platform: KitPlatformService","@Optional() @Inject(kitMqBreakpoints) private breakpoints: any"],"text":"constructor(\n    private platform: KitPlatformService,\n    @Optional() @Inject(kitMqBreakpoints) private breakpoints: any,\n  ) {\n    if (!this.breakpoints) {\n      throw new Error(breakpointsError);\n    }\n    if (this.platform.isBrowser() && 'matchMedia' in window) {\n      this.matchMedia = window.matchMedia.bind(window);\n    }\n  }","signature":"constructor(private platform: KitPlatformService, @Optional() @Inject(kitMqBreakpoints) private breakpoints: any)"},{"kind":152,"name":"check","jsDoc":[],"isInternal":false,"parameters":["params: KitMqParams"],"text":"check(params: KitMqParams) {\n    return this.checkRaw(this.buildQuery(params));\n  }","signature":"check(params: KitMqParams)"},{"kind":152,"name":"checkRaw","jsDoc":[],"isInternal":false,"parameters":["mediaQuery: string"],"type":"boolean | null","text":"checkRaw(mediaQuery: string): boolean | null {\n    if (this.matchMedia) {\n      const mq = this.getMq(mediaQuery);\n      return mq.matches;\n    } else {\n      return null;\n    }\n  }","signature":"checkRaw(mediaQuery: string): boolean | null"},{"kind":152,"name":"observe","jsDoc":[],"isInternal":false,"parameters":["params: KitMqParams"],"text":"observe(params: KitMqParams) {\n    return this.observeRaw(this.buildQuery(params));\n  }","signature":"observe(params: KitMqParams)"},{"kind":152,"name":"observeRaw","jsDoc":[],"isInternal":false,"parameters":["mediaQuery: string"],"type":"Observable<boolean | null>","text":"observeRaw(mediaQuery: string): Observable<boolean | null> {\n    return new Observable((observer) => {\n      if (this.matchMedia) {\n        const listener: MediaQueryListListener = (mql) => {\n          observer.next(mql.matches);\n        };\n        const mq = this.getMq(mediaQuery);\n        observer.next(mq.matches);\n        mq.addListener(listener);\n      } else {\n        observer.next(null);\n        observer.complete();\n      }\n    });\n  }","signature":"observeRaw(mediaQuery: string): Observable<boolean | null>"},{"kind":152,"name":"buildQuery","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":["params: KitMqParams"],"text":"private buildQuery(params: KitMqParams) {\n    if (!params.from && !params.until) {\n      throw new Error(`KitMqService: invalid mq params`);\n    }\n    let query = '';\n    // Compile media type\n    if (params.type) {\n      query = `${params.type}`;\n    }\n    // Compile from\n    if (params.from) {\n      if (!this.breakpoints[params.from]) {\n        throw new Error(`KitMqService: breakpoint \"${params.from}\" has not been registered!`);\n      }\n      query = this.concatQuery(query, `(min-width: ${this.breakpoints[params.from]})`);\n    }\n    // Compile until\n    if (params.until) {\n      if (!this.breakpoints[params.until]) {\n        throw new Error(`KitMqService: breakpoint \"${params.until}\" has not been registered!`);\n      }\n      query = this.concatQuery(query, `(max-width: ${this.breakpoints[params.until]})`);\n    }\n    // Compile \"and\"\n    if (params.and) {\n      query = this.concatQuery(query, params.and);\n    }\n    return query;\n  }","signature":"private buildQuery(params: KitMqParams)"},{"kind":152,"name":"concatQuery","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":["query: string","attach: string"],"text":"private concatQuery(query: string, attach: string) {\n    return query && query.length > 0 ? `${query} and ${attach}` : attach;\n  }","signature":"private concatQuery(query: string, attach: string)"},{"kind":152,"name":"getMq","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":["query: string"],"text":"private getMq(query: string) {\n    let mq = this.mqs.get(query);\n    if (!mq) {\n      mq = this.matchMedia(query);\n      this.mqs.set(query, mq);\n    }\n    return mq;\n  }","signature":"private getMq(query: string)"}],"ngMeta":{"type":"Injectable","decorator":{"providedIn":"'root'"}}}]},{"fileName":"src/kit-mq/kit-mq.ts","type":"ts","text":"export * from './kit-mq.module';\r\nexport * from './kit-mq.service';\r\nexport * from './meta';\r\nexport * from './kit-mq/kit-mq.directive';\r\n","declars":[]},{"fileName":"src/kit-mq/kit-mq/kit-mq.directive.ts","type":"ts","text":"import {\n  ChangeDetectorRef,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n  ViewRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { KitMqService } from '../kit-mq.service';\nimport { KitMqParams } from '../meta';\n\n/**\n * Structural directive to check/observe media query.\n *\n * Works like `*ngIf`.\n *\n *\n * ### Usage\n *\n * ```html\n * <div *kitMq=\"{from: 'desktop'}\">\n *   Displays on desktops and wider.\n * </div>\n * ```\n */\n@Directive({\n  selector: '[kitMq]',\n})\nexport class KitMqDirective implements OnChanges, OnDestroy {\n  @Input() kitMq: KitMqParams;\n\n  private _viewRef: ViewRef | null;\n\n  private subscription: Subscription;\n\n  constructor(\n    private templateRef: TemplateRef<any>,\n    private cdr: ChangeDetectorRef,\n    private vcr: ViewContainerRef,\n    private mq: KitMqService,\n  ) {\n  }\n\n  get viewRef(): ViewRef | null {\n    return this._viewRef;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['kitMq']) {\n      if (this.subscription) {\n        this.subscription.unsubscribe();\n      }\n      this.subscription = this.mq.observe(this.kitMq)\n        .subscribe(matches => {\n          this.updateHost(!!matches);\n          this.cdr.detectChanges();\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.destroyView();\n  }\n\n  updateHost(matches: boolean) {\n    if (matches && !this._viewRef) {\n      this._viewRef = this.vcr.createEmbeddedView(this.templateRef);\n    } else if (!matches) {\n      this.destroyView();\n    }\n  }\n\n  private destroyView() {\n    if (this._viewRef) {\n      this._viewRef.destroy();\n      this._viewRef = null;\n    }\n  }\n}\n","declars":[{"kind":230,"kindString":"class","jsDoc":[{"comment":"Structural directive to check/observe media query.\n\nWorks like `*ngIf`.\n\n\n### Usage\n\n```html\n<div *kitMq=\"{from: 'desktop'}\">\n   Displays on desktops and wider.\n</div>\n```","tags":[]}],"isInternal":false,"isDemo":false,"decorators":["@Directive({\n  selector: '[kitMq]',\n})"],"modifiers":["export"],"name":"KitMqDirective","members":[{"kind":150,"name":"kitMq","jsDoc":[],"isInternal":false,"decorators":["@Input()"],"type":"KitMqParams","text":"@Input() kitMq: KitMqParams;","signature":"@Input() kitMq: KitMqParams"},{"kind":150,"name":"_viewRef","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"ViewRef | null","text":"private _viewRef: ViewRef | null;","signature":"private _viewRef: ViewRef | null"},{"kind":150,"name":"subscription","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"Subscription","text":"private subscription: Subscription;","signature":"private subscription: Subscription"},{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["private templateRef: TemplateRef<any>","private cdr: ChangeDetectorRef","private vcr: ViewContainerRef","private mq: KitMqService"],"text":"constructor(\n    private templateRef: TemplateRef<any>,\n    private cdr: ChangeDetectorRef,\n    private vcr: ViewContainerRef,\n    private mq: KitMqService,\n  ) {\n  }","signature":"constructor(private templateRef: TemplateRef<any>, private cdr: ChangeDetectorRef, private vcr: ViewContainerRef, private mq: KitMqService)"},{"kind":154,"name":"viewRef","jsDoc":[],"isInternal":false,"parameters":[],"type":"ViewRef | null","text":"get viewRef(): ViewRef | null {\n    return this._viewRef;\n  }","signature":"get viewRef(): ViewRef | null"},{"kind":152,"name":"ngOnChanges","jsDoc":[],"isInternal":false,"parameters":["changes: SimpleChanges"],"text":"ngOnChanges(changes: SimpleChanges) {\n    if (changes['kitMq']) {\n      if (this.subscription) {\n        this.subscription.unsubscribe();\n      }\n      this.subscription = this.mq.observe(this.kitMq)\n        .subscribe(matches => {\n          this.updateHost(!!matches);\n          this.cdr.detectChanges();\n        });\n    }\n  }","signature":"ngOnChanges(changes: SimpleChanges)"},{"kind":152,"name":"ngOnDestroy","jsDoc":[],"isInternal":false,"parameters":[],"text":"ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.destroyView();\n  }","signature":"ngOnDestroy()"},{"kind":152,"name":"updateHost","jsDoc":[],"isInternal":false,"parameters":["matches: boolean"],"text":"updateHost(matches: boolean) {\n    if (matches && !this._viewRef) {\n      this._viewRef = this.vcr.createEmbeddedView(this.templateRef);\n    } else if (!matches) {\n      this.destroyView();\n    }\n  }","signature":"updateHost(matches: boolean)"},{"kind":152,"name":"destroyView","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":[],"text":"private destroyView() {\n    if (this._viewRef) {\n      this._viewRef.destroy();\n      this._viewRef = null;\n    }\n  }","signature":"private destroyView()"}],"ngMeta":{"type":"Directive","decorator":{"selector":"'[kitMq]'"}}}]},{"fileName":"src/kit-mq/meta.ts","type":"ts","text":"import { InjectionToken } from '@angular/core';\r\n\r\nexport const kitMqBreakpoints = new InjectionToken('kitMqPoints');\r\n\r\nexport interface KitMqParams {\r\n  type?: 'all' | 'print' | 'screen' | 'speech';\r\n  from?: string;\r\n  until?: string;\r\n  and?: string;\r\n}\r\n","declars":[{"kind":231,"kindString":"interface","jsDoc":[],"isInternal":false,"name":"KitMqParams","members":[{"kind":149,"jsDoc":[],"isInternal":false,"name":"type","type":"'all' | 'print' | 'screen' | 'speech'","text":"type?: 'all' | 'print' | 'screen' | 'speech';","signature":"type(): 'all' | 'print' | 'screen' | 'speech'"},{"kind":149,"jsDoc":[],"isInternal":false,"name":"from","type":"string","text":"from?: string;","signature":"from(): string"},{"kind":149,"jsDoc":[],"isInternal":false,"name":"until","type":"string","text":"until?: string;","signature":"until(): string"},{"kind":149,"jsDoc":[],"isInternal":false,"name":"and","type":"string","text":"and?: string;","signature":"and(): string"}]}]},{"fileName":"src/kit-outside-click/kit-outside-click.directive.ts","type":"ts","text":"import { Directive, EventEmitter, Input, OnChanges, OnInit, Output } from '@angular/core';\nimport { KitAnchor } from '../kit-anchor/meta';\nimport { isArray } from '../util/is-array';\nimport { KitOutsideClickService } from './kit-outside-click.service';\n\n/**\n * Emitted when user clicks not on current element.\n *\n *\n * ### Usage\n * ```html\n * <div (kitOutsideClick)=\"outside()\"></div>\n * ```\n *\n * `outside()` method will be called on any click except at this `div` and his children.\n *\n * #### Skip\n *\n * You can define additional elements to skip:\n *\n * ```html\n * <button #skip1>...</button>\n * <button #skip2>...</button>\n * <div (kitOutsideClick)=\"outside()\"\n *      [skip]=\"[skip1, skip2]\">\n * </div>\n * ```\n *\n * Use `kitAnchor` to skip components:\n *\n * ```html\n * <app-some-component kitAnchor #skip1=\"anchor\"></app-some-component>\n * <div (kitOutsideClick)=\"outside()\"\n *      [skip]=\"[skip1]\">\n * </div>\n * ```\n *\n *\n * ### Example\n *\n * * collection:date-picker -\n * [sources](https://github.com/ngx-kit/ngx-kit/tree/master/packages/collection/lib/ui-date-picker),\n * [demo](http://ngx-kit.com/collection/module/ui-date-picker)\n */\n@Directive({\n  selector: '[kitOutsideClick]',\n  providers: [\n    KitOutsideClickService,\n  ],\n})\nexport class KitOutsideClickDirective implements OnInit, OnChanges {\n  // @todo also accept HtmlElement\n  // @todo do not capture anchor?\n  @Input() anchor: KitAnchor;\n\n  /**\n   * Define elements that are not considered as outside.\n   */\n  @Input() skip: KitAnchor | KitAnchor[];\n\n  @Output() kitOutsideClick = new EventEmitter<any>();\n\n  constructor(\n    private service: KitOutsideClickService,\n  ) {\n  }\n\n  ngOnInit() {\n    this.service.outsideClick.subscribe(e => {\n      this.kitOutsideClick.emit(e);\n    });\n  }\n\n  ngOnChanges() {\n    this.service.skip = [\n      ...this.anchor ? [this.anchor.nativeEl] : [],\n      ...this.skip\n        ? isArray(this.skip) ? this.skip.map(s => s.nativeEl || s) : [this.skip.nativeEl || this.skip]\n        : [],\n    ];\n  }\n}\n","declars":[{"kind":230,"kindString":"class","jsDoc":[{"comment":"Emitted when user clicks not on current element.\n\n\n### Usage\n```html\n<div (kitOutsideClick)=\"outside()\"></div>\n```\n\n`outside()` method will be called on any click except at this `div` and his children.\n\n#### Skip\n\nYou can define additional elements to skip:\n\n```html\n<button #skip1>...</button>\n<button #skip2>...</button>\n<div (kitOutsideClick)=\"outside()\"\n      [skip]=\"[skip1, skip2]\">\n</div>\n```\n\nUse `kitAnchor` to skip components:\n\n```html\n<app-some-component kitAnchor #skip1=\"anchor\"></app-some-component>\n<div (kitOutsideClick)=\"outside()\"\n      [skip]=\"[skip1]\">\n</div>\n```\n\n\n### Example\n\n* collection:date-picker -\n[sources](https://github.com/ngx-kit/ngx-kit/tree/master/packages/collection/lib/ui-date-picker),\n[demo](http://ngx-kit.com/collection/module/ui-date-picker)","tags":[]}],"isInternal":false,"isDemo":false,"decorators":["@Directive({\n  selector: '[kitOutsideClick]',\n  providers: [\n    KitOutsideClickService,\n  ],\n})"],"modifiers":["export"],"name":"KitOutsideClickDirective","members":[{"kind":150,"name":"anchor","jsDoc":[],"isInternal":false,"decorators":["@Input()"],"type":"KitAnchor","text":"@Input() anchor: KitAnchor;","signature":"@Input() anchor: KitAnchor"},{"kind":150,"name":"skip","jsDoc":[{"comment":"Define elements that are not considered as outside.","tags":[]}],"isInternal":false,"decorators":["@Input()"],"type":"KitAnchor | KitAnchor[]","text":"@Input() skip: KitAnchor | KitAnchor[];","signature":"@Input() skip: KitAnchor | KitAnchor[]"},{"kind":150,"name":"kitOutsideClick","jsDoc":[],"isInternal":false,"decorators":["@Output()"],"initializer":"new EventEmitter<any>()","text":"@Output() kitOutsideClick = new EventEmitter<any>();","signature":"@Output() kitOutsideClick = new EventEmitter<any>()"},{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["private service: KitOutsideClickService"],"text":"constructor(\n    private service: KitOutsideClickService,\n  ) {\n  }","signature":"constructor(private service: KitOutsideClickService)"},{"kind":152,"name":"ngOnInit","jsDoc":[],"isInternal":false,"parameters":[],"text":"ngOnInit() {\n    this.service.outsideClick.subscribe(e => {\n      this.kitOutsideClick.emit(e);\n    });\n  }","signature":"ngOnInit()"},{"kind":152,"name":"ngOnChanges","jsDoc":[],"isInternal":false,"parameters":[],"text":"ngOnChanges() {\n    this.service.skip = [\n      ...this.anchor ? [this.anchor.nativeEl] : [],\n      ...this.skip\n        ? isArray(this.skip) ? this.skip.map(s => s.nativeEl || s) : [this.skip.nativeEl || this.skip]\n        : [],\n    ];\n  }","signature":"ngOnChanges()"}],"ngMeta":{"type":"Directive","decorator":{"selector":"'[kitOutsideClick]'"}}}]},{"fileName":"src/kit-outside-click/kit-outside-click.module.ts","type":"ts","text":"import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { KitOutsideClickDirective } from './kit-outside-click.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  declarations: [\r\n    KitOutsideClickDirective,\r\n  ],\r\n  exports: [\r\n    KitOutsideClickDirective,\r\n  ],\r\n})\r\nexport class KitOutsideClickModule {\r\n}\r\n","declars":[{"kind":230,"kindString":"class","jsDoc":[],"isInternal":false,"isDemo":false,"decorators":["@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  declarations: [\r\n    KitOutsideClickDirective,\r\n  ],\r\n  exports: [\r\n    KitOutsideClickDirective,\r\n  ],\r\n})"],"modifiers":["export"],"name":"KitOutsideClickModule","members":[],"ngMeta":{"type":"NgModule","decorator":{"exports":"[\r\n    KitOutsideClickDirective,\r\n  ]"}}}]},{"fileName":"src/kit-outside-click/kit-outside-click.service.ts","type":"ts","text":"import { ElementRef, Injectable, NgZone, OnDestroy } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { KitEventManagerService } from '../kit-event-manager/kit-event-manager.service';\n\n/**\n * Emits event when user clicks not on a hosted element.\n */\n@Injectable()\nexport class KitOutsideClickService implements OnDestroy {\n  skip: HTMLElement[] = [];\n\n  private _outsideClick = new Subject<any>();\n\n  private unsubFn: Function;\n\n  constructor(\n    private zone: NgZone,\n    private em: KitEventManagerService,\n    private elementRef: ElementRef,\n  ) {\n    this.zone.runOutsideAngular(() => {\n      this.unsubFn = this.em.listenGlobal(\n        'click',\n        (event: MouseEvent) => {\n          const path = event['path'] || this.em.getEventPath(event);\n          // Check event path\n          const skip = [this.elementRef.nativeElement, ...this.skip];\n          if (skip.every(e => path.indexOf(e) === -1)) {\n            this.zone.run(() => {\n              this._outsideClick.next(event);\n            });\n          }\n        },\n        true);\n    });\n  }\n\n  get outsideClick(): Observable<any> {\n    return this._outsideClick.asObservable();\n  }\n\n  ngOnDestroy() {\n    if (this.unsubFn) {\n      this.unsubFn();\n    }\n  }\n}\n","declars":[{"kind":230,"kindString":"class","jsDoc":[{"comment":"Emits event when user clicks not on a hosted element.","tags":[]}],"isInternal":false,"isDemo":false,"decorators":["@Injectable()"],"modifiers":["export"],"name":"KitOutsideClickService","members":[{"kind":150,"name":"skip","jsDoc":[],"isInternal":false,"type":"HTMLElement[]","initializer":"[]","text":"skip: HTMLElement[] = [];","signature":"skip: HTMLElement[] = []"},{"kind":150,"name":"_outsideClick","jsDoc":[],"isInternal":false,"modifiers":["private"],"initializer":"new Subject<any>()","text":"private _outsideClick = new Subject<any>();","signature":"private _outsideClick = new Subject<any>()"},{"kind":150,"name":"unsubFn","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"Function","text":"private unsubFn: Function;","signature":"private unsubFn: Function"},{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["private zone: NgZone","private em: KitEventManagerService","private elementRef: ElementRef"],"text":"constructor(\n    private zone: NgZone,\n    private em: KitEventManagerService,\n    private elementRef: ElementRef,\n  ) {\n    this.zone.runOutsideAngular(() => {\n      this.unsubFn = this.em.listenGlobal(\n        'click',\n        (event: MouseEvent) => {\n          const path = event['path'] || this.em.getEventPath(event);\n          // Check event path\n          const skip = [this.elementRef.nativeElement, ...this.skip];\n          if (skip.every(e => path.indexOf(e) === -1)) {\n            this.zone.run(() => {\n              this._outsideClick.next(event);\n            });\n          }\n        },\n        true);\n    });\n  }","signature":"constructor(private zone: NgZone, private em: KitEventManagerService, private elementRef: ElementRef)"},{"kind":154,"name":"outsideClick","jsDoc":[],"isInternal":false,"parameters":[],"type":"Observable<any>","text":"get outsideClick(): Observable<any> {\n    return this._outsideClick.asObservable();\n  }","signature":"get outsideClick(): Observable<any>"},{"kind":152,"name":"ngOnDestroy","jsDoc":[],"isInternal":false,"parameters":[],"text":"ngOnDestroy() {\n    if (this.unsubFn) {\n      this.unsubFn();\n    }\n  }","signature":"ngOnDestroy()"}],"ngMeta":{"type":"Injectable","decorator":{}}}]},{"fileName":"src/kit-outside-click/kit-outside-click.ts","type":"ts","text":"export * from './kit-outside-click.directive';\r\nexport * from './kit-outside-click.module';\r\nexport * from './kit-outside-click.service';\r\n","declars":[]},{"fileName":"src/kit-overlay/kit-overlay-component-ref.ts","type":"ts","text":"import { ChangeDetectorRef, ComponentRef, Injectable, SimpleChange, SimpleChanges } from '@angular/core';\r\nimport { KitOverlayInput } from './meta';\r\n\r\n@Injectable()\r\nexport class KitOverlayComponentRef<T> {\r\n  componentRef: ComponentRef<T>;\r\n\r\n  /**\r\n   * Pass input to the hosted component.\r\n   */\r\n  input(input: KitOverlayInput<T>) {\r\n    if (this.componentRef && this.componentRef.instance) {\r\n      // Set props and gather changes object\r\n      const changes: SimpleChanges = {};\r\n      for (const name in input) {\r\n        if (input.hasOwnProperty(name)) {\r\n          const prev = this.componentRef.instance[name];\r\n          // @ts-ignore\r\n          this.componentRef.instance[name] = input[name];\r\n          changes[name] = new SimpleChange(prev, input[name], false);\r\n        }\r\n      }\r\n      // Emit ngOnChanges hook\r\n      if (this.componentRef.instance['ngOnChanges']) {\r\n        this.componentRef.instance['ngOnChanges'](changes);\r\n      }\r\n      // Run change detection on the component host (for applying host bindings)\r\n      this.componentRef.changeDetectorRef.detectChanges();\r\n      // Run change detection inside component\r\n      this.componentRef.injector.get<ChangeDetectorRef>(ChangeDetectorRef as any).detectChanges();\r\n    } else {\r\n      throw new Error('Modal initiated without instance. Input could be passed programmatically only for ' +\r\n        'service-hosted modals.');\r\n    }\r\n  }\r\n}\r\n","declars":[{"kind":230,"kindString":"class","jsDoc":[],"isInternal":false,"isDemo":false,"decorators":["@Injectable()"],"modifiers":["export"],"name":"KitOverlayComponentRef","members":[{"kind":150,"name":"componentRef","jsDoc":[],"isInternal":false,"type":"ComponentRef<T>","text":"componentRef: ComponentRef<T>;","signature":"componentRef: ComponentRef<T>"},{"kind":152,"name":"input","jsDoc":[{"comment":"Pass input to the hosted component.","tags":[]}],"isInternal":false,"parameters":["input: KitOverlayInput<T>"],"text":"input(input: KitOverlayInput<T>) {\r\n    if (this.componentRef && this.componentRef.instance) {\r\n      // Set props and gather changes object\r\n      const changes: SimpleChanges = {};\r\n      for (const name in input) {\r\n        if (input.hasOwnProperty(name)) {\r\n          const prev = this.componentRef.instance[name];\r\n          // @ts-ignore\r\n          this.componentRef.instance[name] = input[name];\r\n          changes[name] = new SimpleChange(prev, input[name], false);\r\n        }\r\n      }\r\n      // Emit ngOnChanges hook\r\n      if (this.componentRef.instance['ngOnChanges']) {\r\n        this.componentRef.instance['ngOnChanges'](changes);\r\n      }\r\n      // Run change detection on the component host (for applying host bindings)\r\n      this.componentRef.changeDetectorRef.detectChanges();\r\n      // Run change detection inside component\r\n      this.componentRef.injector.get<ChangeDetectorRef>(ChangeDetectorRef as any).detectChanges();\r\n    } else {\r\n      throw new Error('Modal initiated without instance. Input could be passed programmatically only for ' +\r\n        'service-hosted modals.');\r\n    }\r\n  }","signature":"input(input: KitOverlayInput<T>)"}],"ngMeta":{"type":"Injectable","decorator":{}}}]},{"fileName":"src/kit-overlay/kit-overlay-host/kit-overlay-host-wrapper.component.ts","type":"ts","text":"import { ChangeDetectionStrategy, Component, ViewContainerRef, } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'kit-overlay-host-wrapper',\r\n  template: '',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class KitOverlayHostWrapperComponent {\r\n  constructor(\r\n    public vcr: ViewContainerRef,\r\n  ) {\r\n  }\r\n}\r\n","declars":[{"kind":230,"kindString":"class","jsDoc":[],"isInternal":false,"isDemo":false,"decorators":["@Component({\r\n  selector: 'kit-overlay-host-wrapper',\r\n  template: '',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})"],"modifiers":["export"],"name":"KitOverlayHostWrapperComponent","members":[{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["public vcr: ViewContainerRef"],"text":"constructor(\r\n    public vcr: ViewContainerRef,\r\n  ) {\r\n  }","signature":"constructor(public vcr: ViewContainerRef)"}],"ngMeta":{"type":"Component","decorator":{"selector":"'kit-overlay-host-wrapper'"}}}]},{"fileName":"src/kit-overlay/kit-overlay-host/kit-overlay-host.component.ts","type":"ts","text":"import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  NgZone,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'kit-overlay-host',\r\n  template: '',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class KitOverlayHostComponent {\r\n  constructor(\r\n    public zone: NgZone,\r\n    public vcr: ViewContainerRef,\r\n    public cdr: ChangeDetectorRef,\r\n    public elRef: ElementRef,\r\n  ) {\r\n  }\r\n}\r\n","declars":[{"kind":230,"kindString":"class","jsDoc":[],"isInternal":false,"isDemo":false,"decorators":["@Component({\r\n  selector: 'kit-overlay-host',\r\n  template: '',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})"],"modifiers":["export"],"name":"KitOverlayHostComponent","members":[{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["public zone: NgZone","public vcr: ViewContainerRef","public cdr: ChangeDetectorRef","public elRef: ElementRef"],"text":"constructor(\r\n    public zone: NgZone,\r\n    public vcr: ViewContainerRef,\r\n    public cdr: ChangeDetectorRef,\r\n    public elRef: ElementRef,\r\n  ) {\r\n  }","signature":"constructor(public zone: NgZone, public vcr: ViewContainerRef, public cdr: ChangeDetectorRef, public elRef: ElementRef)"}],"ngMeta":{"type":"Component","decorator":{"selector":"'kit-overlay-host'"}}}]},{"fileName":"src/kit-overlay/kit-overlay-toggle/kit-overlay-toggle.directive.ts","type":"ts","text":"import { Directive, ElementRef, HostListener, Input } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';\r\nimport { Observable } from 'rxjs/internal/Observable';\r\nimport { KitAnchor } from '../../kit-anchor/meta';\r\nimport { KitOverlayToggleTrigger } from '../meta';\r\n\r\n@Directive({\r\n  selector: '[kitOverlayToggle]',\r\n  exportAs: 'toggle',\r\n})\r\nexport class KitOverlayToggleDirective implements KitAnchor {\r\n  @Input() trigger: KitOverlayToggleTrigger = 'click';\r\n\r\n  private _state = new BehaviorSubject<boolean>(false);\r\n\r\n  constructor(private _elementRef: ElementRef) {\r\n  }\r\n\r\n  get stateChanges(): Observable<boolean> {\r\n    return this._state.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Get state.\r\n   */\r\n  get state() {\r\n    return this._state.value;\r\n  }\r\n\r\n  /**\r\n   * Get reference to anchored element.\r\n   */\r\n  get elementRef(): ElementRef {\r\n    return this._elementRef;\r\n  }\r\n\r\n  /**\r\n   * Get anchored html-element.\r\n   */\r\n  get nativeEl() {\r\n    return this._elementRef.nativeElement;\r\n  }\r\n\r\n  @HostListener('click') clickHandler() {\r\n    if (this.trigger === 'click') {\r\n      this.toggle();\r\n    }\r\n  }\r\n\r\n  @HostListener('mouseenter') mouseenterHandler() {\r\n    if (this.trigger === 'hover') {\r\n      this.show();\r\n    }\r\n  }\r\n\r\n  @HostListener('mouseleave') mouseleaveHandler() {\r\n    if (this.trigger === 'hover') {\r\n      this.close();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set state to true.\r\n   */\r\n  show() {\r\n    this._state.next(true);\r\n  }\r\n\r\n  /**\r\n   * Set state to false.\r\n   */\r\n  close() {\r\n    this._state.next(false);\r\n  }\r\n\r\n  /**\r\n   * Toggle state.\r\n   */\r\n  toggle() {\r\n    this._state.next(!this._state.value);\r\n  }\r\n}\r\n","declars":[{"kind":230,"kindString":"class","jsDoc":[],"isInternal":false,"isDemo":false,"decorators":["@Directive({\r\n  selector: '[kitOverlayToggle]',\r\n  exportAs: 'toggle',\r\n})"],"modifiers":["export"],"name":"KitOverlayToggleDirective","members":[{"kind":150,"name":"trigger","jsDoc":[],"isInternal":false,"decorators":["@Input()"],"type":"KitOverlayToggleTrigger","initializer":"'click'","text":"@Input() trigger: KitOverlayToggleTrigger = 'click';","signature":"@Input() trigger: KitOverlayToggleTrigger = 'click'"},{"kind":150,"name":"_state","jsDoc":[],"isInternal":false,"modifiers":["private"],"initializer":"new BehaviorSubject<boolean>(false)","text":"private _state = new BehaviorSubject<boolean>(false);","signature":"private _state = new BehaviorSubject<boolean>(false)"},{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["private _elementRef: ElementRef"],"text":"constructor(private _elementRef: ElementRef) {\r\n  }","signature":"constructor(private _elementRef: ElementRef)"},{"kind":154,"name":"stateChanges","jsDoc":[],"isInternal":false,"parameters":[],"type":"Observable<boolean>","text":"get stateChanges(): Observable<boolean> {\r\n    return this._state.asObservable();\r\n  }","signature":"get stateChanges(): Observable<boolean>"},{"kind":154,"name":"state","jsDoc":[{"comment":"Get state.","tags":[]}],"isInternal":false,"parameters":[],"text":"get state() {\r\n    return this._state.value;\r\n  }","signature":"get state()"},{"kind":154,"name":"elementRef","jsDoc":[{"comment":"Get reference to anchored element.","tags":[]}],"isInternal":false,"parameters":[],"type":"ElementRef","text":"get elementRef(): ElementRef {\r\n    return this._elementRef;\r\n  }","signature":"get elementRef(): ElementRef"},{"kind":154,"name":"nativeEl","jsDoc":[{"comment":"Get anchored html-element.","tags":[]}],"isInternal":false,"parameters":[],"text":"get nativeEl() {\r\n    return this._elementRef.nativeElement;\r\n  }","signature":"get nativeEl()"},{"kind":152,"name":"clickHandler","jsDoc":[],"isInternal":false,"decorators":["@HostListener('click')"],"parameters":[],"text":"@HostListener('click') clickHandler() {\r\n    if (this.trigger === 'click') {\r\n      this.toggle();\r\n    }\r\n  }","signature":"@HostListener('click') clickHandler()"},{"kind":152,"name":"mouseenterHandler","jsDoc":[],"isInternal":false,"decorators":["@HostListener('mouseenter')"],"parameters":[],"text":"@HostListener('mouseenter') mouseenterHandler() {\r\n    if (this.trigger === 'hover') {\r\n      this.show();\r\n    }\r\n  }","signature":"@HostListener('mouseenter') mouseenterHandler()"},{"kind":152,"name":"mouseleaveHandler","jsDoc":[],"isInternal":false,"decorators":["@HostListener('mouseleave')"],"parameters":[],"text":"@HostListener('mouseleave') mouseleaveHandler() {\r\n    if (this.trigger === 'hover') {\r\n      this.close();\r\n    }\r\n  }","signature":"@HostListener('mouseleave') mouseleaveHandler()"},{"kind":152,"name":"show","jsDoc":[{"comment":"Set state to true.","tags":[]}],"isInternal":false,"parameters":[],"text":"show() {\r\n    this._state.next(true);\r\n  }","signature":"show()"},{"kind":152,"name":"close","jsDoc":[{"comment":"Set state to false.","tags":[]}],"isInternal":false,"parameters":[],"text":"close() {\r\n    this._state.next(false);\r\n  }","signature":"close()"},{"kind":152,"name":"toggle","jsDoc":[{"comment":"Toggle state.","tags":[]}],"isInternal":false,"parameters":[],"text":"toggle() {\r\n    this._state.next(!this._state.value);\r\n  }","signature":"toggle()"}],"ngMeta":{"type":"Directive","decorator":{"selector":"'[kitOverlayToggle]'","exportAs":"'toggle'"}}}]},{"fileName":"src/kit-overlay/kit-overlay.module.ts","type":"ts","text":"import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { KitOverlayHostWrapperComponent } from './kit-overlay-host/kit-overlay-host-wrapper.component';\nimport { KitOverlayHostComponent } from './kit-overlay-host/kit-overlay-host.component';\nimport { KitOverlayToggleDirective } from './kit-overlay-toggle/kit-overlay-toggle.directive';\nimport { KitOverlayDirective } from './kit-overlay/kit-overlay.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  exports: [\n    KitOverlayDirective,\n    KitOverlayToggleDirective,\n  ],\n  declarations: [\n    KitOverlayDirective,\n    KitOverlayHostWrapperComponent,\n    KitOverlayHostComponent,\n    KitOverlayToggleDirective,\n  ],\n  entryComponents: [\n    KitOverlayHostWrapperComponent,\n    KitOverlayHostComponent,\n  ],\n})\nexport class KitOverlayModule {\n}\n","declars":[{"kind":230,"kindString":"class","jsDoc":[],"isInternal":false,"isDemo":false,"decorators":["@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  exports: [\n    KitOverlayDirective,\n    KitOverlayToggleDirective,\n  ],\n  declarations: [\n    KitOverlayDirective,\n    KitOverlayHostWrapperComponent,\n    KitOverlayHostComponent,\n    KitOverlayToggleDirective,\n  ],\n  entryComponents: [\n    KitOverlayHostWrapperComponent,\n    KitOverlayHostComponent,\n  ],\n})"],"modifiers":["export"],"name":"KitOverlayModule","members":[],"ngMeta":{"type":"NgModule","decorator":{"exports":"[\n    KitOverlayDirective,\n    KitOverlayToggleDirective,\n  ]"}}}]},{"fileName":"src/kit-overlay/kit-overlay.service.ts","type":"ts","text":"import { DOCUMENT } from '@angular/common';\r\nimport {\r\n  ComponentFactoryResolver,\r\n  ComponentRef,\r\n  EmbeddedViewRef,\r\n  forwardRef,\r\n  Inject,\r\n  Injectable,\r\n  Injector,\r\n  NgZone,\r\n  Optional,\r\n  SkipSelf,\r\n  TemplateRef,\r\n  Type,\r\n  ViewContainerRef,\r\n  ViewRef,\r\n} from '@angular/core';\r\nimport { StaticProvider } from '@angular/core/src/di/provider';\r\nimport { Observable, Subject, Subscription } from 'rxjs';\r\nimport { KitPlatformService } from '../kit-platform/kit-platform.service';\r\nimport { KitOverlayComponentRef } from './kit-overlay-component-ref';\r\nimport { KitOverlayHostWrapperComponent } from './kit-overlay-host/kit-overlay-host-wrapper.component';\r\nimport { KitOverlayHostComponent } from './kit-overlay-host/kit-overlay-host.component';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class KitOverlayService {\r\n  private _onHostStable = new Subject<void>();\r\n\r\n  private hostWrapperRef: ComponentRef<KitOverlayHostWrapperComponent>;\r\n\r\n  private hostRef: ComponentRef<KitOverlayHostComponent>;\r\n\r\n  private host: KitOverlayHostComponent;\r\n\r\n  private container: Element;\r\n\r\n  private isRoot: boolean;\r\n\r\n  constructor(\r\n    @Inject(DOCUMENT) private document: any,\r\n    private cfr: ComponentFactoryResolver,\r\n    private injector: Injector,\r\n    @Optional() @Inject(forwardRef(() => KitOverlayService)) @SkipSelf() private parent: KitOverlayService,\r\n    private platform: KitPlatformService,\r\n  ) {\r\n    this.isRoot = !this.parent;\r\n    if (this.isRoot) {\r\n      this.mountHost();\r\n    }\r\n  }\r\n\r\n  get onHostStable(): Observable<void> {\r\n    return this.isRoot\r\n      ? this._onHostStable.asObservable()\r\n      : this.parent.onHostStable;\r\n  }\r\n\r\n  /**\r\n   * Render component in the overlay.\r\n   */\r\n  hostComponent<T>(\r\n    {component, providers = [], componentFactoryResolver, viewContainerRef}: {\r\n      component: Type<T>;\r\n      providers?: StaticProvider[];\r\n      componentFactoryResolver?: ComponentFactoryResolver;\r\n      viewContainerRef?: ViewContainerRef;\r\n    },\r\n  ): KitOverlayComponentRef<T> {\r\n    if (this.isRoot) {\r\n      // Pick passed vcr or from host\r\n      const hostVcr = viewContainerRef || this.host.vcr;\r\n      // Provide passed providers and parent injector\r\n      const injector = Injector.create({\r\n        providers,\r\n        parent: hostVcr.injector,\r\n      });\r\n      // Create component\r\n      const componentFactory = componentFactoryResolver\r\n        ? componentFactoryResolver.resolveComponentFactory(component)\r\n        : this.cfr.resolveComponentFactory(component);\r\n      const ref = new KitOverlayComponentRef<T>();\r\n      ref.componentRef = hostVcr.createComponent<T>(componentFactory, hostVcr.length, injector);\r\n      // Move component to the host\r\n      this.host.elRef.nativeElement.appendChild(this.getComponentRootNode(ref.componentRef));\r\n      // Force change detection\r\n      ref.componentRef.changeDetectorRef.detectChanges();\r\n      // Proxy CD to the hosted component from host\r\n      const cdSub: Subscription = hostVcr.injector.get<NgZone>(NgZone).onStable\r\n        .subscribe(() => {\r\n          ref.componentRef.changeDetectorRef.detectChanges();\r\n        });\r\n      ref.componentRef.onDestroy(() => {\r\n        cdSub.unsubscribe();\r\n      });\r\n      // Return the ref\r\n      return ref;\r\n    } else {\r\n      // Proxy to root\r\n      return this.parent.hostComponent({component, providers, componentFactoryResolver, viewContainerRef});\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render template (passed by TemplateRef) on the overlay.\r\n   */\r\n  hostTemplate(\r\n    {templateRef, context = {}, viewContainerRef}: {\r\n      templateRef: TemplateRef<any>,\r\n      context?: any;\r\n      viewContainerRef?: ViewContainerRef;\r\n    },\r\n  ): ViewRef {\r\n    if (this.isRoot) {\r\n      const hostVcr = viewContainerRef || this.host.vcr;\r\n      const ref = hostVcr.createEmbeddedView(templateRef, context);\r\n      this.host.elRef.nativeElement.appendChild(this.getTemplateRootNode(ref));\r\n      return ref;\r\n    } else {\r\n      return this.parent.hostTemplate({templateRef, context, viewContainerRef});\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Move passed ViewRef under target ViewRef.\r\n   * Used for multi-modals backdrop handling.\r\n   */\r\n  moveUnder(ref: ViewRef, target: ViewRef) {\r\n    if (this.isRoot) {\r\n      this.getTemplateRootNode(this.hostRef.hostView)\r\n        .insertBefore(this.getTemplateRootNode(ref), this.getTemplateRootNode(target));\r\n    } else {\r\n      this.parent.moveUnder(ref, target);\r\n    }\r\n  }\r\n\r\n  /** Gets the root HTMLElement for an instantiated component. */\r\n  private getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\r\n    return this.getTemplateRootNode(componentRef.hostView);\r\n  }\r\n\r\n  private getTemplateRootNode(viewRef: EmbeddedViewRef<any> | ViewRef): HTMLElement {\r\n    return (viewRef as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\r\n  }\r\n\r\n  private mountHost() {\r\n    if (!this.isRoot) {\r\n      throw new Error(`Run .mountHost() only for root service`);\r\n    }\r\n    // Init container\r\n    this.container = this.document.createElement('div');\r\n    // Append container, only in browser\r\n    if (this.platform.isBrowser()) {\r\n      this.container.classList.add('kit-overlay-container');\r\n      this.document.body.appendChild(this.container);\r\n    }\r\n    // Create host-wrapper\r\n    const hostWrapperFactory = this.cfr.resolveComponentFactory(KitOverlayHostWrapperComponent);\r\n    this.hostWrapperRef = hostWrapperFactory.create(this.injector);\r\n    this.container.appendChild(this.getComponentRootNode(this.hostWrapperRef));\r\n    // Create host\r\n    const hostFactory = this.cfr.resolveComponentFactory(KitOverlayHostComponent);\r\n    const wrapperVcr = this.hostWrapperRef.instance.vcr;\r\n    this.hostRef = wrapperVcr.createComponent(hostFactory, wrapperVcr.length, this.injector);\r\n    this.host = this.hostRef.instance;\r\n    this.container.appendChild(this.getComponentRootNode(this.hostRef));\r\n    // Track CD\r\n    this.host.zone.onStable.subscribe(() => {\r\n      this._onHostStable.next();\r\n    });\r\n  }\r\n}\r\n","declars":[{"kind":230,"kindString":"class","jsDoc":[],"isInternal":false,"isDemo":false,"decorators":["@Injectable({\r\n  providedIn: 'root',\r\n})"],"modifiers":["export"],"name":"KitOverlayService","members":[{"kind":150,"name":"_onHostStable","jsDoc":[],"isInternal":false,"modifiers":["private"],"initializer":"new Subject<void>()","text":"private _onHostStable = new Subject<void>();","signature":"private _onHostStable = new Subject<void>()"},{"kind":150,"name":"hostWrapperRef","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"ComponentRef<KitOverlayHostWrapperComponent>","text":"private hostWrapperRef: ComponentRef<KitOverlayHostWrapperComponent>;","signature":"private hostWrapperRef: ComponentRef<KitOverlayHostWrapperComponent>"},{"kind":150,"name":"hostRef","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"ComponentRef<KitOverlayHostComponent>","text":"private hostRef: ComponentRef<KitOverlayHostComponent>;","signature":"private hostRef: ComponentRef<KitOverlayHostComponent>"},{"kind":150,"name":"host","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"KitOverlayHostComponent","text":"private host: KitOverlayHostComponent;","signature":"private host: KitOverlayHostComponent"},{"kind":150,"name":"container","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"Element","text":"private container: Element;","signature":"private container: Element"},{"kind":150,"name":"isRoot","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"boolean","text":"private isRoot: boolean;","signature":"private isRoot: boolean"},{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["@Inject(DOCUMENT) private document: any","private cfr: ComponentFactoryResolver","private injector: Injector","@Optional() @Inject(forwardRef(() => KitOverlayService)) @SkipSelf() private parent: KitOverlayService","private platform: KitPlatformService"],"text":"constructor(\r\n    @Inject(DOCUMENT) private document: any,\r\n    private cfr: ComponentFactoryResolver,\r\n    private injector: Injector,\r\n    @Optional() @Inject(forwardRef(() => KitOverlayService)) @SkipSelf() private parent: KitOverlayService,\r\n    private platform: KitPlatformService,\r\n  ) {\r\n    this.isRoot = !this.parent;\r\n    if (this.isRoot) {\r\n      this.mountHost();\r\n    }\r\n  }","signature":"constructor(@Inject(DOCUMENT) private document: any, private cfr: ComponentFactoryResolver, private injector: Injector, @Optional() @Inject(forwardRef(() => KitOverlayService)) @SkipSelf() private parent: KitOverlayService, private platform: KitPlatformService)"},{"kind":154,"name":"onHostStable","jsDoc":[],"isInternal":false,"parameters":[],"type":"Observable<void>","text":"get onHostStable(): Observable<void> {\r\n    return this.isRoot\r\n      ? this._onHostStable.asObservable()\r\n      : this.parent.onHostStable;\r\n  }","signature":"get onHostStable(): Observable<void>"},{"kind":152,"name":"hostComponent","jsDoc":[{"comment":"Render component in the overlay.","tags":[]}],"isInternal":false,"parameters":["{component, providers = [], componentFactoryResolver, viewContainerRef}: {\r\n      component: Type<T>;\r\n      providers?: StaticProvider[];\r\n      componentFactoryResolver?: ComponentFactoryResolver;\r\n      viewContainerRef?: ViewContainerRef;\r\n    }"],"type":"KitOverlayComponentRef<T>","text":"hostComponent<T>(\r\n    {component, providers = [], componentFactoryResolver, viewContainerRef}: {\r\n      component: Type<T>;\r\n      providers?: StaticProvider[];\r\n      componentFactoryResolver?: ComponentFactoryResolver;\r\n      viewContainerRef?: ViewContainerRef;\r\n    },\r\n  ): KitOverlayComponentRef<T> {\r\n    if (this.isRoot) {\r\n      // Pick passed vcr or from host\r\n      const hostVcr = viewContainerRef || this.host.vcr;\r\n      // Provide passed providers and parent injector\r\n      const injector = Injector.create({\r\n        providers,\r\n        parent: hostVcr.injector,\r\n      });\r\n      // Create component\r\n      const componentFactory = componentFactoryResolver\r\n        ? componentFactoryResolver.resolveComponentFactory(component)\r\n        : this.cfr.resolveComponentFactory(component);\r\n      const ref = new KitOverlayComponentRef<T>();\r\n      ref.componentRef = hostVcr.createComponent<T>(componentFactory, hostVcr.length, injector);\r\n      // Move component to the host\r\n      this.host.elRef.nativeElement.appendChild(this.getComponentRootNode(ref.componentRef));\r\n      // Force change detection\r\n      ref.componentRef.changeDetectorRef.detectChanges();\r\n      // Proxy CD to the hosted component from host\r\n      const cdSub: Subscription = hostVcr.injector.get<NgZone>(NgZone).onStable\r\n        .subscribe(() => {\r\n          ref.componentRef.changeDetectorRef.detectChanges();\r\n        });\r\n      ref.componentRef.onDestroy(() => {\r\n        cdSub.unsubscribe();\r\n      });\r\n      // Return the ref\r\n      return ref;\r\n    } else {\r\n      // Proxy to root\r\n      return this.parent.hostComponent({component, providers, componentFactoryResolver, viewContainerRef});\r\n    }\r\n  }","signature":"hostComponent({component, providers = [], componentFactoryResolver, viewContainerRef}: {\r\n      component: Type<T>;\r\n      providers?: StaticProvider[];\r\n      componentFactoryResolver?: ComponentFactoryResolver;\r\n      viewContainerRef?: ViewContainerRef;\r\n    }): KitOverlayComponentRef<T>"},{"kind":152,"name":"hostTemplate","jsDoc":[{"comment":"Render template (passed by TemplateRef) on the overlay.","tags":[]}],"isInternal":false,"parameters":["{templateRef, context = {}, viewContainerRef}: {\r\n      templateRef: TemplateRef<any>,\r\n      context?: any;\r\n      viewContainerRef?: ViewContainerRef;\r\n    }"],"type":"ViewRef","text":"hostTemplate(\r\n    {templateRef, context = {}, viewContainerRef}: {\r\n      templateRef: TemplateRef<any>,\r\n      context?: any;\r\n      viewContainerRef?: ViewContainerRef;\r\n    },\r\n  ): ViewRef {\r\n    if (this.isRoot) {\r\n      const hostVcr = viewContainerRef || this.host.vcr;\r\n      const ref = hostVcr.createEmbeddedView(templateRef, context);\r\n      this.host.elRef.nativeElement.appendChild(this.getTemplateRootNode(ref));\r\n      return ref;\r\n    } else {\r\n      return this.parent.hostTemplate({templateRef, context, viewContainerRef});\r\n    }\r\n  }","signature":"hostTemplate({templateRef, context = {}, viewContainerRef}: {\r\n      templateRef: TemplateRef<any>,\r\n      context?: any;\r\n      viewContainerRef?: ViewContainerRef;\r\n    }): ViewRef"},{"kind":152,"name":"moveUnder","jsDoc":[{"comment":"Move passed ViewRef under target ViewRef.\r\nUsed for multi-modals backdrop handling.","tags":[]}],"isInternal":false,"parameters":["ref: ViewRef","target: ViewRef"],"text":"moveUnder(ref: ViewRef, target: ViewRef) {\r\n    if (this.isRoot) {\r\n      this.getTemplateRootNode(this.hostRef.hostView)\r\n        .insertBefore(this.getTemplateRootNode(ref), this.getTemplateRootNode(target));\r\n    } else {\r\n      this.parent.moveUnder(ref, target);\r\n    }\r\n  }","signature":"moveUnder(ref: ViewRef, target: ViewRef)"},{"kind":152,"name":"getComponentRootNode","jsDoc":[{"comment":"Gets the root HTMLElement for an instantiated component. ","tags":[]}],"isInternal":false,"modifiers":["private"],"parameters":["componentRef: ComponentRef<any>"],"type":"HTMLElement","text":"private getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\r\n    return this.getTemplateRootNode(componentRef.hostView);\r\n  }","signature":"private getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement"},{"kind":152,"name":"getTemplateRootNode","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":["viewRef: EmbeddedViewRef<any> | ViewRef"],"type":"HTMLElement","text":"private getTemplateRootNode(viewRef: EmbeddedViewRef<any> | ViewRef): HTMLElement {\r\n    return (viewRef as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\r\n  }","signature":"private getTemplateRootNode(viewRef: EmbeddedViewRef<any> | ViewRef): HTMLElement"},{"kind":152,"name":"mountHost","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":[],"text":"private mountHost() {\r\n    if (!this.isRoot) {\r\n      throw new Error(`Run .mountHost() only for root service`);\r\n    }\r\n    // Init container\r\n    this.container = this.document.createElement('div');\r\n    // Append container, only in browser\r\n    if (this.platform.isBrowser()) {\r\n      this.container.classList.add('kit-overlay-container');\r\n      this.document.body.appendChild(this.container);\r\n    }\r\n    // Create host-wrapper\r\n    const hostWrapperFactory = this.cfr.resolveComponentFactory(KitOverlayHostWrapperComponent);\r\n    this.hostWrapperRef = hostWrapperFactory.create(this.injector);\r\n    this.container.appendChild(this.getComponentRootNode(this.hostWrapperRef));\r\n    // Create host\r\n    const hostFactory = this.cfr.resolveComponentFactory(KitOverlayHostComponent);\r\n    const wrapperVcr = this.hostWrapperRef.instance.vcr;\r\n    this.hostRef = wrapperVcr.createComponent(hostFactory, wrapperVcr.length, this.injector);\r\n    this.host = this.hostRef.instance;\r\n    this.container.appendChild(this.getComponentRootNode(this.hostRef));\r\n    // Track CD\r\n    this.host.zone.onStable.subscribe(() => {\r\n      this._onHostStable.next();\r\n    });\r\n  }","signature":"private mountHost()"}],"ngMeta":{"type":"Injectable","decorator":{"providedIn":"'root'"}}}]},{"fileName":"src/kit-overlay/kit-overlay.ts","type":"ts","text":"export * from './kit-overlay.module';\nexport * from './kit-overlay/kit-overlay.directive';\nexport * from './kit-overlay.service';\nexport * from './kit-overlay-component-ref';\nexport * from './kit-overlay-toggle/kit-overlay-toggle.directive';\nexport * from './meta';\n","declars":[]},{"fileName":"src/kit-overlay/kit-overlay/kit-overlay.directive.ts","type":"ts","text":"import {\r\n  ChangeDetectorRef,\r\n  Directive,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  SimpleChanges,\r\n  TemplateRef,\r\n  ViewContainerRef,\r\n  ViewRef,\r\n} from '@angular/core';\r\nimport { BehaviorSubject, Subscription, Observable } from 'rxjs';\r\nimport { KitOverlayService } from '../kit-overlay.service';\r\n\r\n@Directive({\r\n  selector: '[kitOverlay]',\r\n})\r\nexport class KitOverlayDirective implements OnChanges, OnDestroy {\r\n  @Input() kitOverlay: boolean;\r\n\r\n  private doCheckSub: Subscription;\r\n\r\n  private _viewRef: ViewRef | null;\r\n\r\n  private _displayed = new BehaviorSubject<boolean>(false);\r\n\r\n  constructor(\r\n    private templateRef: TemplateRef<any>,\r\n    private service: KitOverlayService,\r\n    private cdr: ChangeDetectorRef,\r\n    private vcr: ViewContainerRef,\r\n  ) {\r\n  }\r\n\r\n  get displayed(): Observable<boolean> {\r\n    return this._displayed.asObservable();\r\n  }\r\n\r\n  get viewRef(): ViewRef | null {\r\n    return this._viewRef;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes['kitOverlay']) {\r\n      this.updateHost();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroyView();\r\n  }\r\n\r\n  updateHost() {\r\n    if (this.kitOverlay && !this._viewRef) {\r\n      this._viewRef = this.service.hostTemplate({\r\n        templateRef: this.templateRef,\r\n        viewContainerRef: this.vcr,\r\n      });\r\n      this._viewRef.detectChanges();\r\n      this.doCheckSub = this.service.onHostStable.subscribe(() => {\r\n        if (!this.cdr['destroyed']) {\r\n          this.cdr.detectChanges();\r\n        }\r\n      });\r\n      this._displayed.next(true);\r\n    } else if (!this.kitOverlay) {\r\n      this.destroyView();\r\n      this._displayed.next(false);\r\n    }\r\n  }\r\n\r\n  private destroyView() {\r\n    if (this._viewRef) {\r\n      this._viewRef.destroy();\r\n      this._viewRef = null;\r\n    }\r\n    if (this.doCheckSub) {\r\n      this.doCheckSub.unsubscribe();\r\n    }\r\n  }\r\n}\r\n","declars":[{"kind":230,"kindString":"class","jsDoc":[],"isInternal":false,"isDemo":false,"decorators":["@Directive({\r\n  selector: '[kitOverlay]',\r\n})"],"modifiers":["export"],"name":"KitOverlayDirective","members":[{"kind":150,"name":"kitOverlay","jsDoc":[],"isInternal":false,"decorators":["@Input()"],"type":"boolean","text":"@Input() kitOverlay: boolean;","signature":"@Input() kitOverlay: boolean"},{"kind":150,"name":"doCheckSub","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"Subscription","text":"private doCheckSub: Subscription;","signature":"private doCheckSub: Subscription"},{"kind":150,"name":"_viewRef","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"ViewRef | null","text":"private _viewRef: ViewRef | null;","signature":"private _viewRef: ViewRef | null"},{"kind":150,"name":"_displayed","jsDoc":[],"isInternal":false,"modifiers":["private"],"initializer":"new BehaviorSubject<boolean>(false)","text":"private _displayed = new BehaviorSubject<boolean>(false);","signature":"private _displayed = new BehaviorSubject<boolean>(false)"},{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["private templateRef: TemplateRef<any>","private service: KitOverlayService","private cdr: ChangeDetectorRef","private vcr: ViewContainerRef"],"text":"constructor(\r\n    private templateRef: TemplateRef<any>,\r\n    private service: KitOverlayService,\r\n    private cdr: ChangeDetectorRef,\r\n    private vcr: ViewContainerRef,\r\n  ) {\r\n  }","signature":"constructor(private templateRef: TemplateRef<any>, private service: KitOverlayService, private cdr: ChangeDetectorRef, private vcr: ViewContainerRef)"},{"kind":154,"name":"displayed","jsDoc":[],"isInternal":false,"parameters":[],"type":"Observable<boolean>","text":"get displayed(): Observable<boolean> {\r\n    return this._displayed.asObservable();\r\n  }","signature":"get displayed(): Observable<boolean>"},{"kind":154,"name":"viewRef","jsDoc":[],"isInternal":false,"parameters":[],"type":"ViewRef | null","text":"get viewRef(): ViewRef | null {\r\n    return this._viewRef;\r\n  }","signature":"get viewRef(): ViewRef | null"},{"kind":152,"name":"ngOnChanges","jsDoc":[],"isInternal":false,"parameters":["changes: SimpleChanges"],"text":"ngOnChanges(changes: SimpleChanges) {\r\n    if (changes['kitOverlay']) {\r\n      this.updateHost();\r\n    }\r\n  }","signature":"ngOnChanges(changes: SimpleChanges)"},{"kind":152,"name":"ngOnDestroy","jsDoc":[],"isInternal":false,"parameters":[],"text":"ngOnDestroy() {\r\n    this.destroyView();\r\n  }","signature":"ngOnDestroy()"},{"kind":152,"name":"updateHost","jsDoc":[],"isInternal":false,"parameters":[],"text":"updateHost() {\r\n    if (this.kitOverlay && !this._viewRef) {\r\n      this._viewRef = this.service.hostTemplate({\r\n        templateRef: this.templateRef,\r\n        viewContainerRef: this.vcr,\r\n      });\r\n      this._viewRef.detectChanges();\r\n      this.doCheckSub = this.service.onHostStable.subscribe(() => {\r\n        if (!this.cdr['destroyed']) {\r\n          this.cdr.detectChanges();\r\n        }\r\n      });\r\n      this._displayed.next(true);\r\n    } else if (!this.kitOverlay) {\r\n      this.destroyView();\r\n      this._displayed.next(false);\r\n    }\r\n  }","signature":"updateHost()"},{"kind":152,"name":"destroyView","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":[],"text":"private destroyView() {\r\n    if (this._viewRef) {\r\n      this._viewRef.destroy();\r\n      this._viewRef = null;\r\n    }\r\n    if (this.doCheckSub) {\r\n      this.doCheckSub.unsubscribe();\r\n    }\r\n  }","signature":"private destroyView()"}],"ngMeta":{"type":"Directive","decorator":{"selector":"'[kitOverlay]'"}}}]},{"fileName":"src/kit-overlay/meta.ts","type":"ts","text":"import { KitAnchor } from '../kit-anchor/meta';\r\n\r\nexport type KitOverlayPosition = 'top' | 'right' | 'bottom' | 'left'\r\n  | 'top-left' | 'top-right'\r\n  | 'bottom-left' | 'bottom-right'\r\n  | 'left-top' | 'left-bottom'\r\n  | 'right-top' | 'right-bottom';\r\nexport type KitOverlayType = 'dropdown' | 'side';\r\nexport type KitOverlayAutofix = 'none' | 'switch-position';\r\nexport const positionPairs = {\r\n  top: 'bottom',\r\n  bottom: 'top',\r\n  left: 'right',\r\n  right: 'left',\r\n};\r\n\r\nexport interface KitOverlayPositionDirectiveParams {\r\n  anchor: KitAnchor | HTMLElement;\r\n  autofix: KitOverlayAutofix;\r\n  position: KitOverlayPosition;\r\n  type: KitOverlayType;\r\n}\r\n\r\nexport interface StrategyEl {\r\n  bottom: number;\r\n  height: number;\r\n  left: number;\r\n  right: number;\r\n  top: number;\r\n  width: number;\r\n}\r\n\r\nexport interface StrategyField {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport type KitOverlayInput<T> = {\r\n  [key in keyof T]?: T[key];\r\n};\r\n\r\nexport type KitOverlayToggleTrigger = 'click' | 'hover';\r\n","declars":[{"kind":232,"kindString":"typeAlias","jsDoc":[],"isInternal":false,"name":"KitOverlayPosition","type":"'top' | 'right' | 'bottom' | 'left'\r\n  | 'top-left' | 'top-right'\r\n  | 'bottom-left' | 'bottom-right'\r\n  | 'left-top' | 'left-bottom'\r\n  | 'right-top' | 'right-bottom'","text":"export type KitOverlayPosition = 'top' | 'right' | 'bottom' | 'left'\r\n  | 'top-left' | 'top-right'\r\n  | 'bottom-left' | 'bottom-right'\r\n  | 'left-top' | 'left-bottom'\r\n  | 'right-top' | 'right-bottom';"},{"kind":232,"kindString":"typeAlias","jsDoc":[],"isInternal":false,"name":"KitOverlayType","type":"'dropdown' | 'side'","text":"export type KitOverlayType = 'dropdown' | 'side';"},{"kind":232,"kindString":"typeAlias","jsDoc":[],"isInternal":false,"name":"KitOverlayAutofix","type":"'none' | 'switch-position'","text":"export type KitOverlayAutofix = 'none' | 'switch-position';"},{"kind":231,"kindString":"interface","jsDoc":[],"isInternal":false,"name":"KitOverlayPositionDirectiveParams","members":[{"kind":149,"jsDoc":[],"isInternal":false,"name":"anchor","type":"KitAnchor | HTMLElement","text":"anchor: KitAnchor | HTMLElement;","signature":"anchor(): KitAnchor | HTMLElement"},{"kind":149,"jsDoc":[],"isInternal":false,"name":"autofix","type":"KitOverlayAutofix","text":"autofix: KitOverlayAutofix;","signature":"autofix(): KitOverlayAutofix"},{"kind":149,"jsDoc":[],"isInternal":false,"name":"position","type":"KitOverlayPosition","text":"position: KitOverlayPosition;","signature":"position(): KitOverlayPosition"},{"kind":149,"jsDoc":[],"isInternal":false,"name":"type","type":"KitOverlayType","text":"type: KitOverlayType;","signature":"type(): KitOverlayType"}]},{"kind":231,"kindString":"interface","jsDoc":[],"isInternal":false,"name":"StrategyEl","members":[{"kind":149,"jsDoc":[],"isInternal":false,"name":"bottom","type":"number","text":"bottom: number;","signature":"bottom(): number"},{"kind":149,"jsDoc":[],"isInternal":false,"name":"height","type":"number","text":"height: number;","signature":"height(): number"},{"kind":149,"jsDoc":[],"isInternal":false,"name":"left","type":"number","text":"left: number;","signature":"left(): number"},{"kind":149,"jsDoc":[],"isInternal":false,"name":"right","type":"number","text":"right: number;","signature":"right(): number"},{"kind":149,"jsDoc":[],"isInternal":false,"name":"top","type":"number","text":"top: number;","signature":"top(): number"},{"kind":149,"jsDoc":[],"isInternal":false,"name":"width","type":"number","text":"width: number;","signature":"width(): number"}]},{"kind":231,"kindString":"interface","jsDoc":[],"isInternal":false,"name":"StrategyField","members":[{"kind":149,"jsDoc":[],"isInternal":false,"name":"width","type":"number","text":"width: number;","signature":"width(): number"},{"kind":149,"jsDoc":[],"isInternal":false,"name":"height","type":"number","text":"height: number;","signature":"height(): number"}]},{"kind":232,"kindString":"typeAlias","jsDoc":[],"isInternal":false,"name":"KitOverlayInput","typeParameters":["T"],"type":"{\r\n  [key in keyof T]?: T[key];\r\n}","text":"export type KitOverlayInput<T> = {\r\n  [key in keyof T]?: T[key];\r\n};"},{"kind":232,"kindString":"typeAlias","jsDoc":[],"isInternal":false,"name":"KitOverlayToggleTrigger","type":"'click' | 'hover'","text":"export type KitOverlayToggleTrigger = 'click' | 'hover';"}]},{"fileName":"src/kit-platform/kit-platform.service.ts","type":"ts","text":"import { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\n\n/**\n * Platform specific helpers.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class KitPlatformService {\n  constructor(@Inject(PLATFORM_ID) private platformId: Object) {\n  }\n\n  /**\n   * Shortcut to `isPlatformBrowser` method.\n   */\n  isBrowser() {\n    return isPlatformBrowser(this.platformId);\n  }\n\n  /**\n   * Shortcut to `isPlatformServer` method.\n   */\n  isServer() {\n    return isPlatformServer(this.platformId);\n  }\n\n  /**\n   * Calc native scroll width.\n   */\n  getScrollbarWidth(): number {\n    if (this.isBrowser()) {\n      if (typeof document === 'undefined') {\n        return 0;\n      }\n      const body = document.body;\n      const box = document.createElement('div');\n      const boxStyle = box.style;\n      let width;\n      // Init test div\n      boxStyle.position = 'absolute';\n      boxStyle.position = boxStyle.position = '-9999px';\n      boxStyle.height = boxStyle.width = '100px';\n      boxStyle.overflow = 'scroll';\n      body.appendChild(box);\n      // Calc\n      width = box.offsetWidth - box.clientWidth;\n      // Cleanup\n      body.removeChild(box);\n      return width;\n    } else {\n      return 0;\n    }\n  }\n}\n","declars":[{"kind":230,"kindString":"class","jsDoc":[{"comment":"Platform specific helpers.","tags":[]}],"isInternal":false,"isDemo":false,"decorators":["@Injectable({\n  providedIn: 'root',\n})"],"modifiers":["export"],"name":"KitPlatformService","members":[{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["@Inject(PLATFORM_ID) private platformId: Object"],"text":"constructor(@Inject(PLATFORM_ID) private platformId: Object) {\n  }","signature":"constructor(@Inject(PLATFORM_ID) private platformId: Object)"},{"kind":152,"name":"isBrowser","jsDoc":[{"comment":"Shortcut to `isPlatformBrowser` method.","tags":[]}],"isInternal":false,"parameters":[],"text":"isBrowser() {\n    return isPlatformBrowser(this.platformId);\n  }","signature":"isBrowser()"},{"kind":152,"name":"isServer","jsDoc":[{"comment":"Shortcut to `isPlatformServer` method.","tags":[]}],"isInternal":false,"parameters":[],"text":"isServer() {\n    return isPlatformServer(this.platformId);\n  }","signature":"isServer()"},{"kind":152,"name":"getScrollbarWidth","jsDoc":[{"comment":"Calc native scroll width.","tags":[]}],"isInternal":false,"parameters":[],"type":"number","text":"getScrollbarWidth(): number {\n    if (this.isBrowser()) {\n      if (typeof document === 'undefined') {\n        return 0;\n      }\n      const body = document.body;\n      const box = document.createElement('div');\n      const boxStyle = box.style;\n      let width;\n      // Init test div\n      boxStyle.position = 'absolute';\n      boxStyle.position = boxStyle.position = '-9999px';\n      boxStyle.height = boxStyle.width = '100px';\n      boxStyle.overflow = 'scroll';\n      body.appendChild(box);\n      // Calc\n      width = box.offsetWidth - box.clientWidth;\n      // Cleanup\n      body.removeChild(box);\n      return width;\n    } else {\n      return 0;\n    }\n  }","signature":"getScrollbarWidth(): number"}],"ngMeta":{"type":"Injectable","decorator":{"providedIn":"'root'"}}}]},{"fileName":"src/kit-platform/kit-platform.ts","type":"ts","text":"export * from './kit-platform.service';\r\n","declars":[]},{"fileName":"src/kit-position/kit-pin-position/kit-pin-position.directive.ts","type":"ts","text":"import { Directive, ElementRef, Input, NgZone, OnChanges } from '@angular/core';\nimport { take } from 'rxjs/operators';\nimport { KitAnchor } from '../../kit-anchor/meta';\nimport { KitEventManagerService } from '../../kit-event-manager/kit-event-manager.service';\nimport { StrategyEl } from '../../kit-overlay/meta';\nimport { KitPlatformService } from '../../kit-platform/kit-platform.service';\nimport { KitStyleService } from '../../kit-style/kit-style.service';\nimport { KitStyles } from '../../kit-style/meta';\nimport { KitPinPosition, KitPositionField, KitPositionRect } from '../meta';\n\n/**\n * Pin positioning directive.\n *\n * Resizes & repositions hosted element around anchor. Uses css flex for proper centring, but container could overlap\n * outside elements.\n *\n *\n * ### Usage\n *\n * ```html\n * <button kitAnchor #anchor=\"anchor\"></button>\n * <div kitPinPosition\n *      [anchor]=\"anchor\">\n * ```\n */\n@Directive({\n  selector: '[kitPinPosition]',\n  providers: [\n    KitStyleService,\n  ],\n})\nexport class KitPinPositionDirective implements OnChanges {\n  @Input() kitPinPosition: void;\n\n  /**\n   * Relative element to positioning.\n   */\n  @Input() anchor: KitAnchor | HTMLElement;\n\n  /**\n   * Position of elements inside container.\n   */\n  @Input() position: KitPinPosition;\n\n  private unsubs: any[] = [];\n\n  constructor(\n    private elementRef: ElementRef,\n    private zone: NgZone,\n    private style: KitStyleService,\n    private platform: KitPlatformService,\n    private em: KitEventManagerService,\n  ) {\n    this.style.style = {\n      left: '0',\n      position: 'fixed',\n      top: '0',\n    };\n    if (this.platform.isBrowser()) {\n      this.zone.onStable\n        .pipe(take(1))\n        .subscribe(() => {\n          this.zone.runOutsideAngular(() => {\n            this.unsubs = [\n              ...this.unsubs,\n              this.em.listenGlobal('scroll', this.reposition.bind(this), true),\n              this.em.listenGlobal('resize', this.reposition.bind(this), true),\n            ];\n          });\n        });\n    }\n  }\n\n  ngOnChanges() {\n    this.reposition();\n  }\n\n  private reposition() {\n    const field = this.getField();\n    const anchor = this.getRect(this.anchor);\n    this.style.style = this.calc(this.position, field, anchor);\n  }\n\n  private calc(\n    position: string,\n    field: KitPositionField,\n    anchor: KitPositionRect,\n  ): KitStyles {\n    const common = {\n      display: 'flex',\n      position: 'fixed',\n    };\n    const vSideLeft = field.width / 2 > anchor.left + anchor.width / 2;\n    const vSideTop = field.height / 2 > anchor.top + anchor.height / 2;\n    switch (this.position) {\n      case 'top':\n        return {\n          ...common,\n          alignItems: 'flex-end',\n          top: '0',\n          flexDirection: 'row',\n          height: this.px(anchor.top),\n          left: this.px(anchor.left),\n          width: this.px(anchor.width),\n        };\n      case 'top-center':\n        return {\n          ...common,\n          alignItems: 'flex-end',\n          top: '0',\n          flexDirection: 'row',\n          justifyContent: 'center',\n          height: this.px(anchor.top),\n          left: vSideLeft ? '0' : this.px(anchor.left - (field.width - anchor.right)),\n          width: vSideLeft ? this.px(anchor.left + anchor.right) : this.px(anchor.width + (field.width - anchor.right) * 2),\n        };\n      case 'top-right':\n        return {\n          ...common,\n          alignItems: 'flex-end',\n          top: '0',\n          flexDirection: 'row',\n          justifyContent: 'flex-end',\n          height: this.px(anchor.top),\n          left: '0',\n          width: this.px(anchor.right),\n        };\n      case 'top-left':\n        return {\n          ...common,\n          alignItems: 'flex-end',\n          top: '0',\n          flexDirection: 'row',\n          justifyContent: 'flex-start',\n          height: this.px(anchor.top),\n          left: this.px(anchor.left),\n          width: this.px(field.width - anchor.left),\n        };\n      case 'right':\n        return {\n          ...common,\n          flexDirection: 'column',\n          height: this.px(anchor.height),\n          left: this.px(anchor.right),\n          top: this.px(anchor.top),\n        };\n      case 'right-center':\n        return {\n          ...common,\n          flexDirection: 'column',\n          justifyContent: 'center',\n          height: vSideTop ? this.px(anchor.top + anchor.bottom) : this.px(anchor.height + (field.height - anchor.bottom) * 2),\n          left: this.px(anchor.right),\n          top: vSideTop ? '0' : this.px(anchor.top - (field.height - anchor.bottom)),\n        };\n      case 'right-top':\n        return {\n          ...common,\n          flexDirection: 'column',\n          height: this.px(field.height - anchor.top),\n          justifyContent: 'flex-start',\n          left: this.px(anchor.right),\n          top: this.px(anchor.top),\n        };\n      case 'right-bottom':\n        return {\n          ...common,\n          flexDirection: 'column',\n          height: this.px(anchor.bottom),\n          justifyContent: 'flex-end',\n          left: this.px(anchor.right),\n          top: '0',\n        };\n      case 'bottom':\n        return {\n          ...common,\n          alignItems: 'flex-start',\n          flexDirection: 'row',\n          height: this.px(field.height - anchor.bottom),\n          left: this.px(anchor.left),\n          top: this.px(anchor.bottom),\n          width: this.px(anchor.width),\n        };\n      case 'bottom-center':\n        return {\n          ...common,\n          alignItems: 'flex-start',\n          flexDirection: 'row',\n          justifyContent: 'center',\n          height: this.px(field.height - anchor.bottom),\n          left: vSideLeft ? '0' : this.px(anchor.left - (field.width - anchor.right)),\n          top: this.px(anchor.bottom),\n          width: vSideLeft ? this.px(anchor.left + anchor.right) : this.px(anchor.width + (field.width - anchor.right) * 2),\n        };\n      case 'bottom-right':\n        return {\n          ...common,\n          alignItems: 'flex-start',\n          flexDirection: 'row',\n          justifyContent: 'flex-end',\n          height: this.px(field.height - anchor.bottom),\n          left: '0',\n          width: this.px(anchor.right),\n          top: this.px(anchor.bottom),\n        };\n      case 'bottom-left':\n        return {\n          ...common,\n          alignItems: 'flex-start',\n          flexDirection: 'row',\n          justifyContent: 'flex-start',\n          height: this.px(field.height - anchor.bottom),\n          left: this.px(anchor.left),\n          top: this.px(anchor.bottom),\n          width: this.px(field.width - anchor.left),\n        };\n      case 'left':\n        return {\n          ...common,\n          alignItems: 'flex-end',\n          left: '0',\n          flexDirection: 'column',\n          height: this.px(anchor.height),\n          top: this.px(anchor.top),\n          width: this.px(anchor.left),\n        };\n      case 'left-center':\n        return {\n          ...common,\n          alignItems: 'flex-end',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          height: vSideTop ? this.px(anchor.top + anchor.bottom) : this.px(anchor.height + (field.height - anchor.bottom) * 2),\n          left: '0',\n          top: vSideTop ? '0' : this.px(anchor.top - (field.height - anchor.bottom)),\n          width: this.px(anchor.left),\n        };\n      case 'left-top':\n        return {\n          ...common,\n          alignItems: 'flex-end',\n          flexDirection: 'column',\n          justifyContent: 'flex-start',\n          height: this.px(field.height - anchor.top),\n          left: '0',\n          right: this.px(field.width - anchor.left),\n          top: this.px(anchor.top),\n          width: this.px(anchor.left),\n        };\n      case 'left-bottom':\n        return {\n          ...common,\n          alignItems: 'flex-end',\n          flexDirection: 'column',\n          justifyContent: 'flex-end',\n          height: this.px(anchor.bottom),\n          left: '0',\n          top: '0',\n          width: this.px(anchor.left),\n        };\n      default:\n        throw new Error(`Position ${position} in not correct!`);\n    }\n  }\n\n  private getRect(el: KitAnchor | HTMLElement): StrategyEl {\n    return this.getEl(el).getBoundingClientRect();\n  }\n\n  private getEl(el: KitAnchor | HTMLElement): HTMLElement {\n    return el['nativeEl'] ? el['nativeEl'] : el;\n  }\n\n  private getField(): KitPositionField {\n    return {\n      height: window.innerHeight,\n      width: window.innerWidth,\n    };\n  }\n\n  private px(value: number): string {\n    return `${Math.round(value)}px`;\n  }\n}\n","declars":[{"kind":230,"kindString":"class","jsDoc":[{"comment":"Pin positioning directive.\n\nResizes & repositions hosted element around anchor. Uses css flex for proper centring, but container could overlap\noutside elements.\n\n\n### Usage\n\n```html\n<button kitAnchor #anchor=\"anchor\"></button>\n<div kitPinPosition\n      [anchor]=\"anchor\">\n```","tags":[]}],"isInternal":false,"isDemo":false,"decorators":["@Directive({\n  selector: '[kitPinPosition]',\n  providers: [\n    KitStyleService,\n  ],\n})"],"modifiers":["export"],"name":"KitPinPositionDirective","members":[{"kind":150,"name":"kitPinPosition","jsDoc":[],"isInternal":false,"decorators":["@Input()"],"type":"void","text":"@Input() kitPinPosition: void;","signature":"@Input() kitPinPosition: void"},{"kind":150,"name":"anchor","jsDoc":[{"comment":"Relative element to positioning.","tags":[]}],"isInternal":false,"decorators":["@Input()"],"type":"KitAnchor | HTMLElement","text":"@Input() anchor: KitAnchor | HTMLElement;","signature":"@Input() anchor: KitAnchor | HTMLElement"},{"kind":150,"name":"position","jsDoc":[{"comment":"Position of elements inside container.","tags":[]}],"isInternal":false,"decorators":["@Input()"],"type":"KitPinPosition","text":"@Input() position: KitPinPosition;","signature":"@Input() position: KitPinPosition"},{"kind":150,"name":"unsubs","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"any[]","initializer":"[]","text":"private unsubs: any[] = [];","signature":"private unsubs: any[] = []"},{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["private elementRef: ElementRef","private zone: NgZone","private style: KitStyleService","private platform: KitPlatformService","private em: KitEventManagerService"],"text":"constructor(\n    private elementRef: ElementRef,\n    private zone: NgZone,\n    private style: KitStyleService,\n    private platform: KitPlatformService,\n    private em: KitEventManagerService,\n  ) {\n    this.style.style = {\n      left: '0',\n      position: 'fixed',\n      top: '0',\n    };\n    if (this.platform.isBrowser()) {\n      this.zone.onStable\n        .pipe(take(1))\n        .subscribe(() => {\n          this.zone.runOutsideAngular(() => {\n            this.unsubs = [\n              ...this.unsubs,\n              this.em.listenGlobal('scroll', this.reposition.bind(this), true),\n              this.em.listenGlobal('resize', this.reposition.bind(this), true),\n            ];\n          });\n        });\n    }\n  }","signature":"constructor(private elementRef: ElementRef, private zone: NgZone, private style: KitStyleService, private platform: KitPlatformService, private em: KitEventManagerService)"},{"kind":152,"name":"ngOnChanges","jsDoc":[],"isInternal":false,"parameters":[],"text":"ngOnChanges() {\n    this.reposition();\n  }","signature":"ngOnChanges()"},{"kind":152,"name":"reposition","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":[],"text":"private reposition() {\n    const field = this.getField();\n    const anchor = this.getRect(this.anchor);\n    this.style.style = this.calc(this.position, field, anchor);\n  }","signature":"private reposition()"},{"kind":152,"name":"calc","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":["position: string","field: KitPositionField","anchor: KitPositionRect"],"type":"KitStyles","text":"private calc(\n    position: string,\n    field: KitPositionField,\n    anchor: KitPositionRect,\n  ): KitStyles {\n    const common = {\n      display: 'flex',\n      position: 'fixed',\n    };\n    const vSideLeft = field.width / 2 > anchor.left + anchor.width / 2;\n    const vSideTop = field.height / 2 > anchor.top + anchor.height / 2;\n    switch (this.position) {\n      case 'top':\n        return {\n          ...common,\n          alignItems: 'flex-end',\n          top: '0',\n          flexDirection: 'row',\n          height: this.px(anchor.top),\n          left: this.px(anchor.left),\n          width: this.px(anchor.width),\n        };\n      case 'top-center':\n        return {\n          ...common,\n          alignItems: 'flex-end',\n          top: '0',\n          flexDirection: 'row',\n          justifyContent: 'center',\n          height: this.px(anchor.top),\n          left: vSideLeft ? '0' : this.px(anchor.left - (field.width - anchor.right)),\n          width: vSideLeft ? this.px(anchor.left + anchor.right) : this.px(anchor.width + (field.width - anchor.right) * 2),\n        };\n      case 'top-right':\n        return {\n          ...common,\n          alignItems: 'flex-end',\n          top: '0',\n          flexDirection: 'row',\n          justifyContent: 'flex-end',\n          height: this.px(anchor.top),\n          left: '0',\n          width: this.px(anchor.right),\n        };\n      case 'top-left':\n        return {\n          ...common,\n          alignItems: 'flex-end',\n          top: '0',\n          flexDirection: 'row',\n          justifyContent: 'flex-start',\n          height: this.px(anchor.top),\n          left: this.px(anchor.left),\n          width: this.px(field.width - anchor.left),\n        };\n      case 'right':\n        return {\n          ...common,\n          flexDirection: 'column',\n          height: this.px(anchor.height),\n          left: this.px(anchor.right),\n          top: this.px(anchor.top),\n        };\n      case 'right-center':\n        return {\n          ...common,\n          flexDirection: 'column',\n          justifyContent: 'center',\n          height: vSideTop ? this.px(anchor.top + anchor.bottom) : this.px(anchor.height + (field.height - anchor.bottom) * 2),\n          left: this.px(anchor.right),\n          top: vSideTop ? '0' : this.px(anchor.top - (field.height - anchor.bottom)),\n        };\n      case 'right-top':\n        return {\n          ...common,\n          flexDirection: 'column',\n          height: this.px(field.height - anchor.top),\n          justifyContent: 'flex-start',\n          left: this.px(anchor.right),\n          top: this.px(anchor.top),\n        };\n      case 'right-bottom':\n        return {\n          ...common,\n          flexDirection: 'column',\n          height: this.px(anchor.bottom),\n          justifyContent: 'flex-end',\n          left: this.px(anchor.right),\n          top: '0',\n        };\n      case 'bottom':\n        return {\n          ...common,\n          alignItems: 'flex-start',\n          flexDirection: 'row',\n          height: this.px(field.height - anchor.bottom),\n          left: this.px(anchor.left),\n          top: this.px(anchor.bottom),\n          width: this.px(anchor.width),\n        };\n      case 'bottom-center':\n        return {\n          ...common,\n          alignItems: 'flex-start',\n          flexDirection: 'row',\n          justifyContent: 'center',\n          height: this.px(field.height - anchor.bottom),\n          left: vSideLeft ? '0' : this.px(anchor.left - (field.width - anchor.right)),\n          top: this.px(anchor.bottom),\n          width: vSideLeft ? this.px(anchor.left + anchor.right) : this.px(anchor.width + (field.width - anchor.right) * 2),\n        };\n      case 'bottom-right':\n        return {\n          ...common,\n          alignItems: 'flex-start',\n          flexDirection: 'row',\n          justifyContent: 'flex-end',\n          height: this.px(field.height - anchor.bottom),\n          left: '0',\n          width: this.px(anchor.right),\n          top: this.px(anchor.bottom),\n        };\n      case 'bottom-left':\n        return {\n          ...common,\n          alignItems: 'flex-start',\n          flexDirection: 'row',\n          justifyContent: 'flex-start',\n          height: this.px(field.height - anchor.bottom),\n          left: this.px(anchor.left),\n          top: this.px(anchor.bottom),\n          width: this.px(field.width - anchor.left),\n        };\n      case 'left':\n        return {\n          ...common,\n          alignItems: 'flex-end',\n          left: '0',\n          flexDirection: 'column',\n          height: this.px(anchor.height),\n          top: this.px(anchor.top),\n          width: this.px(anchor.left),\n        };\n      case 'left-center':\n        return {\n          ...common,\n          alignItems: 'flex-end',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          height: vSideTop ? this.px(anchor.top + anchor.bottom) : this.px(anchor.height + (field.height - anchor.bottom) * 2),\n          left: '0',\n          top: vSideTop ? '0' : this.px(anchor.top - (field.height - anchor.bottom)),\n          width: this.px(anchor.left),\n        };\n      case 'left-top':\n        return {\n          ...common,\n          alignItems: 'flex-end',\n          flexDirection: 'column',\n          justifyContent: 'flex-start',\n          height: this.px(field.height - anchor.top),\n          left: '0',\n          right: this.px(field.width - anchor.left),\n          top: this.px(anchor.top),\n          width: this.px(anchor.left),\n        };\n      case 'left-bottom':\n        return {\n          ...common,\n          alignItems: 'flex-end',\n          flexDirection: 'column',\n          justifyContent: 'flex-end',\n          height: this.px(anchor.bottom),\n          left: '0',\n          top: '0',\n          width: this.px(anchor.left),\n        };\n      default:\n        throw new Error(`Position ${position} in not correct!`);\n    }\n  }","signature":"private calc(position: string, field: KitPositionField, anchor: KitPositionRect): KitStyles"},{"kind":152,"name":"getRect","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":["el: KitAnchor | HTMLElement"],"type":"StrategyEl","text":"private getRect(el: KitAnchor | HTMLElement): StrategyEl {\n    return this.getEl(el).getBoundingClientRect();\n  }","signature":"private getRect(el: KitAnchor | HTMLElement): StrategyEl"},{"kind":152,"name":"getEl","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":["el: KitAnchor | HTMLElement"],"type":"HTMLElement","text":"private getEl(el: KitAnchor | HTMLElement): HTMLElement {\n    return el['nativeEl'] ? el['nativeEl'] : el;\n  }","signature":"private getEl(el: KitAnchor | HTMLElement): HTMLElement"},{"kind":152,"name":"getField","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":[],"type":"KitPositionField","text":"private getField(): KitPositionField {\n    return {\n      height: window.innerHeight,\n      width: window.innerWidth,\n    };\n  }","signature":"private getField(): KitPositionField"},{"kind":152,"name":"px","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":["value: number"],"type":"string","text":"private px(value: number): string {\n    return `${Math.round(value)}px`;\n  }","signature":"private px(value: number): string"}],"ngMeta":{"type":"Directive","decorator":{"selector":"'[kitPinPosition]'"}}}]},{"fileName":"src/kit-position/kit-position.module.ts","type":"ts","text":"import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { KitPinPositionDirective } from './kit-pin-position/kit-pin-position.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  declarations: [\r\n    KitPinPositionDirective,\r\n  ],\r\n  exports: [\r\n    KitPinPositionDirective,\r\n  ],\r\n})\r\nexport class KitPositionModule {\r\n}\r\n","declars":[{"kind":230,"kindString":"class","jsDoc":[],"isInternal":false,"isDemo":false,"decorators":["@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  declarations: [\r\n    KitPinPositionDirective,\r\n  ],\r\n  exports: [\r\n    KitPinPositionDirective,\r\n  ],\r\n})"],"modifiers":["export"],"name":"KitPositionModule","members":[],"ngMeta":{"type":"NgModule","decorator":{"exports":"[\r\n    KitPinPositionDirective,\r\n  ]"}}}]},{"fileName":"src/kit-position/kit-position.ts","type":"ts","text":"export * from './kit-position.module';\r\nexport * from './meta';\r\nexport * from './kit-pin-position/kit-pin-position.directive';\r\n","declars":[]},{"fileName":"src/kit-position/meta.ts","type":"ts","text":"export interface KitPositionRect {\r\n  bottom: number;\r\n  height: number;\r\n  left: number;\r\n  right: number;\r\n  top: number;\r\n  width: number;\r\n}\r\n\r\nexport interface KitPositionField {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport type KitPinPosition = 'top' | 'top-center' | 'top-right' | 'top-left'\r\n  | 'right' | 'right-center' | 'right-top' | 'right-bottom'\r\n  | 'bottom' | 'bottom-center' | 'bottom-right' | 'bottom-left'\r\n  | 'left' | 'left-center' | 'left-top' | 'left-bottom';\r\n","declars":[{"kind":231,"kindString":"interface","jsDoc":[],"isInternal":false,"name":"KitPositionRect","members":[{"kind":149,"jsDoc":[],"isInternal":false,"name":"bottom","type":"number","text":"bottom: number;","signature":"bottom(): number"},{"kind":149,"jsDoc":[],"isInternal":false,"name":"height","type":"number","text":"height: number;","signature":"height(): number"},{"kind":149,"jsDoc":[],"isInternal":false,"name":"left","type":"number","text":"left: number;","signature":"left(): number"},{"kind":149,"jsDoc":[],"isInternal":false,"name":"right","type":"number","text":"right: number;","signature":"right(): number"},{"kind":149,"jsDoc":[],"isInternal":false,"name":"top","type":"number","text":"top: number;","signature":"top(): number"},{"kind":149,"jsDoc":[],"isInternal":false,"name":"width","type":"number","text":"width: number;","signature":"width(): number"}]},{"kind":231,"kindString":"interface","jsDoc":[],"isInternal":false,"name":"KitPositionField","members":[{"kind":149,"jsDoc":[],"isInternal":false,"name":"width","type":"number","text":"width: number;","signature":"width(): number"},{"kind":149,"jsDoc":[],"isInternal":false,"name":"height","type":"number","text":"height: number;","signature":"height(): number"}]},{"kind":232,"kindString":"typeAlias","jsDoc":[],"isInternal":false,"name":"KitPinPosition","type":"'top' | 'top-center' | 'top-right' | 'top-left'\r\n  | 'right' | 'right-center' | 'right-top' | 'right-bottom'\r\n  | 'bottom' | 'bottom-center' | 'bottom-right' | 'bottom-left'\r\n  | 'left' | 'left-center' | 'left-top' | 'left-bottom'","text":"export type KitPinPosition = 'top' | 'top-center' | 'top-right' | 'top-left'\r\n  | 'right' | 'right-center' | 'right-top' | 'right-bottom'\r\n  | 'bottom' | 'bottom-center' | 'bottom-right' | 'bottom-left'\r\n  | 'left' | 'left-center' | 'left-top' | 'left-bottom';"}]},{"fileName":"src/kit-ref/kit-ref.directive.ts","type":"ts","text":"import { Directive, Input, TemplateRef } from '@angular/core';\n\n/**\n * Structural directive for template projecting.\n *\n *\n * ##№ Usage\n *\n * Pass templates through content:\n *\n * ```html\n * <app-my-component>\n *   <span *kitRef>1</span>\n *   <span *kitRef>2</span>\n *   <span *kitRef>3</span>\n * </app-my-component>\n * ```\n *\n * Select refs in `app-my-component`:\n *\n * ```\n * \\@ContentChildren(KitRefDirective) refs: QueryList<KitRefDirective>;\n * ```\n *\n * Output by `*ngTemplateOutlet`:\n *\n * ```html\n * <ng-container *ngFor=\"ref of refs\">\n *   <ng-container *ngTemplateOutlet=\"ref.template\">\n * </ng-container>\n * ```\n *\n * #### Parametrize\n *\n * You can define any parameter to `kitRef` and then use it before rendering.\n *\n * ```html\n * <app-my-component>\n *   <span *kitRef=\"'main'\">1</span>\n *   <span *kitRef=\"'main'\">2</span>\n *   <span *kitRef=\"'secondary'\">3</span>\n *   <span *kitRef=\"'secondary'\">4</span>\n * </app-my-component>\n * ```\n *\n * Filter refs by param:\n *\n * ```typescript\n * \\@ContentChildren(KitRefDirective) refs: QueryList<KitRefDirective>;\n *\n * get main(): KitRefDirective[] {\n *   return this.refs.filter(i => i.param === 'main');\n * }\n * ```\n *\n * Render filtered refs:\n *\n * ```html\n * <ng-container *ngFor=\"ref of main\">\n *   <ng-container *ngTemplateOutlet=\"ref.template\">\n * </ng-container>\n * ```\n *\n *\n * ##№ Example\n *\n * * collection:breadcrumbs -\n *     [sources](https://github.com/ngx-kit/ngx-kit/tree/master/packages/collection/lib/ui-breadcrumbs),\n *     [demo](http://ngx-kit.com/collection/module/ui-breadcrumbs)\n */\n@Directive({\n  selector: '[kitRef]',\n  exportAs: 'ref',\n})\nexport class KitRefDirective<T = any> {\n  @Input() kitRef: T;\n\n  constructor(\n    private _template: TemplateRef<any>,\n  ) {\n  }\n\n  get template(): TemplateRef<any> {\n    return this._template;\n  }\n\n  get param(): T {\n    return this.kitRef;\n  }\n}\n","declars":[{"kind":230,"kindString":"class","jsDoc":[{"comment":"Structural directive for template projecting.\n\n\n##№ Usage\n\nPass templates through content:\n\n```html\n<app-my-component>\n   <span *kitRef>1</span>\n   <span *kitRef>2</span>\n   <span *kitRef>3</span>\n</app-my-component>\n```\n\nSelect refs in `app-my-component`:\n\n```\n\\@ContentChildren(KitRefDirective) refs: QueryList<KitRefDirective>;\n```\n\nOutput by `*ngTemplateOutlet`:\n\n```html\n<ng-container *ngFor=\"ref of refs\">\n   <ng-container *ngTemplateOutlet=\"ref.template\">\n</ng-container>\n```\n\n#### Parametrize\n\nYou can define any parameter to `kitRef` and then use it before rendering.\n\n```html\n<app-my-component>\n   <span *kitRef=\"'main'\">1</span>\n   <span *kitRef=\"'main'\">2</span>\n   <span *kitRef=\"'secondary'\">3</span>\n   <span *kitRef=\"'secondary'\">4</span>\n</app-my-component>\n```\n\nFilter refs by param:\n\n```typescript\n\\@ContentChildren(KitRefDirective) refs: QueryList<KitRefDirective>;\n\nget main(): KitRefDirective[] {\n   return this.refs.filter(i => i.param === 'main');\n}\n```\n\nRender filtered refs:\n\n```html\n<ng-container *ngFor=\"ref of main\">\n   <ng-container *ngTemplateOutlet=\"ref.template\">\n</ng-container>\n```\n\n\n##№ Example\n\n* collection:breadcrumbs -\n     [sources](https://github.com/ngx-kit/ngx-kit/tree/master/packages/collection/lib/ui-breadcrumbs),\n     [demo](http://ngx-kit.com/collection/module/ui-breadcrumbs)","tags":[]}],"isInternal":false,"isDemo":false,"decorators":["@Directive({\n  selector: '[kitRef]',\n  exportAs: 'ref',\n})"],"modifiers":["export"],"name":"KitRefDirective","members":[{"kind":150,"name":"kitRef","jsDoc":[],"isInternal":false,"decorators":["@Input()"],"type":"T","text":"@Input() kitRef: T;","signature":"@Input() kitRef: T"},{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["private _template: TemplateRef<any>"],"text":"constructor(\n    private _template: TemplateRef<any>,\n  ) {\n  }","signature":"constructor(private _template: TemplateRef<any>)"},{"kind":154,"name":"template","jsDoc":[],"isInternal":false,"parameters":[],"type":"TemplateRef<any>","text":"get template(): TemplateRef<any> {\n    return this._template;\n  }","signature":"get template(): TemplateRef<any>"},{"kind":154,"name":"param","jsDoc":[],"isInternal":false,"parameters":[],"type":"T","text":"get param(): T {\n    return this.kitRef;\n  }","signature":"get param(): T"}],"ngMeta":{"type":"Directive","decorator":{"selector":"'[kitRef]'","exportAs":"'ref'"}}}]},{"fileName":"src/kit-ref/kit-ref.module.ts","type":"ts","text":"import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { KitRefDirective } from './kit-ref.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  declarations: [\r\n    KitRefDirective,\r\n  ],\r\n  exports: [\r\n    KitRefDirective,\r\n  ],\r\n})\r\nexport class KitRefModule {\r\n}\r\n","declars":[{"kind":230,"kindString":"class","jsDoc":[],"isInternal":false,"isDemo":false,"decorators":["@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  declarations: [\r\n    KitRefDirective,\r\n  ],\r\n  exports: [\r\n    KitRefDirective,\r\n  ],\r\n})"],"modifiers":["export"],"name":"KitRefModule","members":[],"ngMeta":{"type":"NgModule","decorator":{"exports":"[\r\n    KitRefDirective,\r\n  ]"}}}]},{"fileName":"src/kit-ref/kit-ref.ts","type":"ts","text":"export * from './kit-ref.directive';\r\nexport * from './kit-ref.module';\r\n","declars":[]},{"fileName":"src/kit-repeat/kit-repeat.directive.ts","type":"ts","text":"import { ComponentRef, Directive, Input, OnChanges, TemplateRef, ViewContainerRef } from '@angular/core';\n\n/**\n * Structural directive for template repeating.\n *\n *\n * ### Usage\n *\n * ```html\n * <ng-container *kitRepeat=\"number; let index = index\">\n *   Content\n * </ng-container>\n * ```\n *\n *\n * ##№ Example\n *\n * * collection:rating - [sources](https://github.com/ngx-kit/ngx-kit/tree/master/packages/collection/lib/ui-rating),\n * [demo](http://ngx-kit.com/collection/module/ui-rating)\n *\n *\n * @todo do not recreate all views on changes.\n */\n@Directive({\n  selector: '[kitRepeat]',\n})\nexport class KitRepeatDirective implements OnChanges {\n  /**\n   * Number of repeats.\n   */\n  @Input() kitRepeat: number;\n\n  private componentRef: ComponentRef<any>;\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private template: TemplateRef<any>,\n  ) {\n  }\n\n  ngOnChanges() {\n    if (this.kitRepeat) {\n      this.vcr.clear();\n      for (let index = 0; index < this.kitRepeat; index++) {\n        this.vcr.createEmbeddedView(this.template, {index});\n      }\n    }\n  }\n}\n","declars":[{"kind":230,"kindString":"class","jsDoc":[{"comment":"Structural directive for template repeating.\n\n\n### Usage\n\n```html\n<ng-container *kitRepeat=\"number; let index = index\">\n   Content\n</ng-container>\n```\n\n\n##№ Example\n\n* collection:rating - [sources](https://github.com/ngx-kit/ngx-kit/tree/master/packages/collection/lib/ui-rating),\n[demo](http://ngx-kit.com/collection/module/ui-rating)","tags":[{"name":"todo","value":"do not recreate all views on changes."}]}],"isInternal":false,"isDemo":false,"decorators":["@Directive({\n  selector: '[kitRepeat]',\n})"],"modifiers":["export"],"name":"KitRepeatDirective","members":[{"kind":150,"name":"kitRepeat","jsDoc":[{"comment":"Number of repeats.","tags":[]}],"isInternal":false,"decorators":["@Input()"],"type":"number","text":"@Input() kitRepeat: number;","signature":"@Input() kitRepeat: number"},{"kind":150,"name":"componentRef","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"ComponentRef<any>","text":"private componentRef: ComponentRef<any>;","signature":"private componentRef: ComponentRef<any>"},{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["private vcr: ViewContainerRef","private template: TemplateRef<any>"],"text":"constructor(\n    private vcr: ViewContainerRef,\n    private template: TemplateRef<any>,\n  ) {\n  }","signature":"constructor(private vcr: ViewContainerRef, private template: TemplateRef<any>)"},{"kind":152,"name":"ngOnChanges","jsDoc":[],"isInternal":false,"parameters":[],"text":"ngOnChanges() {\n    if (this.kitRepeat) {\n      this.vcr.clear();\n      for (let index = 0; index < this.kitRepeat; index++) {\n        this.vcr.createEmbeddedView(this.template, {index});\n      }\n    }\n  }","signature":"ngOnChanges()"}],"ngMeta":{"type":"Directive","decorator":{"selector":"'[kitRepeat]'"}}}]},{"fileName":"src/kit-repeat/kit-repeat.module.ts","type":"ts","text":"import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { KitRepeatDirective } from './kit-repeat.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  declarations: [\r\n    KitRepeatDirective,\r\n  ],\r\n  exports: [\r\n    KitRepeatDirective,\r\n  ],\r\n})\r\nexport class KitRepeatModule {\r\n}\r\n","declars":[{"kind":230,"kindString":"class","jsDoc":[],"isInternal":false,"isDemo":false,"decorators":["@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  declarations: [\r\n    KitRepeatDirective,\r\n  ],\r\n  exports: [\r\n    KitRepeatDirective,\r\n  ],\r\n})"],"modifiers":["export"],"name":"KitRepeatModule","members":[],"ngMeta":{"type":"NgModule","decorator":{"exports":"[\r\n    KitRepeatDirective,\r\n  ]"}}}]},{"fileName":"src/kit-repeat/kit-repeat.ts","type":"ts","text":"export * from './kit-repeat.directive';\r\nexport * from './kit-repeat.module';\r\n","declars":[]},{"fileName":"src/kit-scroll/kit-scroll.service.ts","type":"ts","text":"import { ElementRef, Injectable, OnDestroy } from '@angular/core';\r\nimport { HammerGestureConfig } from '@angular/platform-browser';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { KitHammerProvider } from '../kit-hammer/kit-hammer-provider';\r\nimport { KitHammerTypes } from '../kit-hammer/meta';\r\nimport { KitPlatformService } from '../kit-platform/kit-platform.service';\r\nimport { KitScrollRefs, KitScrollState } from './meta';\r\n\r\n/**\r\n * Scroll area helpers.\r\n * Should be provided on component.\r\n */\r\n@Injectable()\r\nexport class KitScrollService implements OnDestroy {\r\n  refs: KitScrollRefs;\r\n\r\n  private _state = new BehaviorSubject<KitScrollState>({\r\n    nativeScrollbarWidth: 0,\r\n    dragging: false,\r\n    vBar: {\r\n      active: false,\r\n      size: 0,\r\n      position: 0,\r\n    },\r\n    hBar: {\r\n      active: false,\r\n      size: 0,\r\n      position: 0,\r\n    },\r\n  });\r\n\r\n  private mutationObserver: MutationObserver;\r\n\r\n  constructor(\r\n    private platform: KitPlatformService,\r\n    private elRef: ElementRef,\r\n    private hammerProvider: KitHammerProvider<any>,\r\n  ) {\r\n    if (!this.hammerProvider.hammer) {\r\n      throw new Error('KitScrollService requires Hammer.JS');\r\n    }\r\n    this._state.next({\r\n      ...this.state,\r\n      nativeScrollbarWidth: this.platform.getScrollbarWidth(),\r\n    });\r\n  }\r\n\r\n  get state(): KitScrollState {\r\n    return this._state.value;\r\n  }\r\n\r\n  get stateChanges(): Observable<KitScrollState> {\r\n    return this._state.asObservable();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.mutationObserver.disconnect();\r\n  }\r\n\r\n  registerRefs(refs: KitScrollRefs) {\r\n    this.refs = refs;\r\n    this.initVListeners();\r\n    this.initHListeners();\r\n    this.initMutationObserver();\r\n  }\r\n\r\n  update() {\r\n    this.updateVBar();\r\n    this.updateHBar();\r\n  }\r\n\r\n  updateVBar() {\r\n    const state = this.calcBar(\r\n      this.refs.vWrapper.scrollHeight - this.state.nativeScrollbarWidth,\r\n      this.elRef.nativeElement.offsetHeight,\r\n      this.refs.vBarWrapper.offsetHeight,\r\n      this.refs.vWrapper.scrollTop,\r\n    );\r\n    this._state.next({\r\n      ...this.state,\r\n      vBar: state,\r\n    });\r\n  }\r\n\r\n  updateHBar() {\r\n    const state = this.calcBar(\r\n      this.refs.hWrapper.scrollWidth,\r\n      this.elRef.nativeElement.offsetWidth,\r\n      this.refs.hBarWrapper.offsetWidth,\r\n      this.refs.hWrapper.scrollLeft,\r\n    );\r\n    this._state.next({\r\n      ...this.state,\r\n      hBar: state,\r\n    });\r\n  }\r\n\r\n  private calcBar(contentSize: number, hostSize: number, barWrapperSize: number, scrollPosition: number) {\r\n    if (contentSize > hostSize) {\r\n      const size = Math.round(Math.max((hostSize / contentSize) * barWrapperSize, 30));\r\n      return {\r\n        active: true,\r\n        size,\r\n        position: Math.round((barWrapperSize - size) * (scrollPosition / (contentSize - hostSize))),\r\n      };\r\n    } else {\r\n      return {\r\n        active: false,\r\n        size: 0,\r\n        position: 0,\r\n      };\r\n    }\r\n  }\r\n\r\n  private initVListeners() {\r\n    const vBarHammerConfig = new HammerGestureConfig();\r\n    vBarHammerConfig.overrides = {\r\n      pan: {\r\n        direction: KitHammerTypes.DIRECTION_VERTICAL,\r\n        threshold: 1,\r\n      },\r\n    };\r\n    const vBarHammer = vBarHammerConfig.buildHammer(this.refs.vBar);\r\n    let scrollStart: number | null = null;\r\n    // Pan\r\n    vBarHammer.on('pan', (event: any) => {\r\n      // Start\r\n      if (scrollStart === null) {\r\n        scrollStart = this.refs.vWrapper.scrollTop;\r\n        this._state.next({\r\n          ...this.state,\r\n          dragging: true,\r\n        });\r\n      }\r\n      // Calc\r\n      const contentHeight = this.refs.hWrapper.scrollHeight;\r\n      const hostHeight = this.elRef.nativeElement.offsetHeight;\r\n      const coef = contentHeight / hostHeight;\r\n      if (scrollStart !== null) {\r\n        this.refs.vWrapper.scrollTop = Math.round(scrollStart + event.deltaY * coef);\r\n      }\r\n      // Final\r\n      if (event.isFinal) {\r\n        scrollStart = null;\r\n        this._state.next({\r\n          ...this.state,\r\n          dragging: false,\r\n        });\r\n      }\r\n    });\r\n    // Tap\r\n    const vBarWrapperHammer = vBarHammerConfig.buildHammer(this.refs.vBarWrapper);\r\n    vBarWrapperHammer.on('tap', (event: any) => {\r\n      if (event.target === this.refs.vBarWrapper) {\r\n        const pos = this.hammerProvider.calcRelatedPosition(this.refs.vBarWrapper, event.center);\r\n        // Calc\r\n        this.refs.vWrapper.scrollTop += pos.y > this.state.vBar.position ? 200 : -200;\r\n      }\r\n    });\r\n  }\r\n\r\n  private initHListeners() {\r\n    const hBarHammerConfig = new HammerGestureConfig();\r\n    hBarHammerConfig.overrides = {\r\n      pan: {\r\n        direction: KitHammerTypes.DIRECTION_HORIZONTAL,\r\n        threshold: 1,\r\n      },\r\n    };\r\n    const hBarHammer = hBarHammerConfig.buildHammer(this.refs.hBar);\r\n    let scrollStart: number | null = null;\r\n    // Pan\r\n    hBarHammer.on('pan', (event: any) => {\r\n      // Start\r\n      if (scrollStart === null) {\r\n        scrollStart = this.refs.hWrapper.scrollLeft;\r\n        this._state.next({\r\n          ...this.state,\r\n          dragging: true,\r\n        });\r\n      }\r\n      // Calc\r\n      const contentWidth = this.refs.hWrapper.scrollWidth;\r\n      const hostWidth = this.elRef.nativeElement.offsetWidth;\r\n      const coef = contentWidth / hostWidth;\r\n      if (scrollStart !== null) {\r\n        this.refs.hWrapper.scrollLeft = Math.round(scrollStart + event.deltaX * coef);\r\n      }\r\n      // Final\r\n      if (event.isFinal) {\r\n        scrollStart = null;\r\n        this._state.next({\r\n          ...this.state,\r\n          dragging: false,\r\n        });\r\n      }\r\n    });\r\n    // Tap\r\n    const hBarWrapperHammer = hBarHammerConfig.buildHammer(this.refs.hBarWrapper);\r\n    hBarWrapperHammer.on('tap', (event: any) => {\r\n      if (event.target === this.refs.hBarWrapper) {\r\n        const pos = this.hammerProvider.calcRelatedPosition(this.refs.hBarWrapper, event.center);\r\n        // Calc\r\n        this.refs.hWrapper.scrollLeft += pos.x > this.state.hBar.position ? 200 : -200;\r\n      }\r\n    });\r\n  }\r\n\r\n  private initMutationObserver() {\r\n    this.mutationObserver = new MutationObserver(mutations => {\r\n      if (mutations.length > 0) {\r\n        this.update();\r\n      }\r\n    });\r\n    this.mutationObserver.observe(this.refs.hWrapper, {\r\n      attributes: true,\r\n      childList: true,\r\n      characterData: true,\r\n      subtree: true,\r\n    });\r\n  }\r\n}\r\n","declars":[{"kind":230,"kindString":"class","jsDoc":[{"comment":"Scroll area helpers.\r\nShould be provided on component.","tags":[]}],"isInternal":false,"isDemo":false,"decorators":["@Injectable()"],"modifiers":["export"],"name":"KitScrollService","members":[{"kind":150,"name":"refs","jsDoc":[],"isInternal":false,"type":"KitScrollRefs","text":"refs: KitScrollRefs;","signature":"refs: KitScrollRefs"},{"kind":150,"name":"_state","jsDoc":[],"isInternal":false,"modifiers":["private"],"initializer":"new BehaviorSubject<KitScrollState>({\r\n    nativeScrollbarWidth: 0,\r\n    dragging: false,\r\n    vBar: {\r\n      active: false,\r\n      size: 0,\r\n      position: 0,\r\n    },\r\n    hBar: {\r\n      active: false,\r\n      size: 0,\r\n      position: 0,\r\n    },\r\n  })","text":"private _state = new BehaviorSubject<KitScrollState>({\r\n    nativeScrollbarWidth: 0,\r\n    dragging: false,\r\n    vBar: {\r\n      active: false,\r\n      size: 0,\r\n      position: 0,\r\n    },\r\n    hBar: {\r\n      active: false,\r\n      size: 0,\r\n      position: 0,\r\n    },\r\n  });","signature":"private _state = new BehaviorSubject<KitScrollState>({\r\n    nativeScrollbarWidth: 0,\r\n    dragging: false,\r\n    vBar: {\r\n      active: false,\r\n      size: 0,\r\n      position: 0,\r\n    },\r\n    hBar: {\r\n      active: false,\r\n      size: 0,\r\n      position: 0,\r\n    },\r\n  })"},{"kind":150,"name":"mutationObserver","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"MutationObserver","text":"private mutationObserver: MutationObserver;","signature":"private mutationObserver: MutationObserver"},{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["private platform: KitPlatformService","private elRef: ElementRef","private hammerProvider: KitHammerProvider<any>"],"text":"constructor(\r\n    private platform: KitPlatformService,\r\n    private elRef: ElementRef,\r\n    private hammerProvider: KitHammerProvider<any>,\r\n  ) {\r\n    if (!this.hammerProvider.hammer) {\r\n      throw new Error('KitScrollService requires Hammer.JS');\r\n    }\r\n    this._state.next({\r\n      ...this.state,\r\n      nativeScrollbarWidth: this.platform.getScrollbarWidth(),\r\n    });\r\n  }","signature":"constructor(private platform: KitPlatformService, private elRef: ElementRef, private hammerProvider: KitHammerProvider<any>)"},{"kind":154,"name":"state","jsDoc":[],"isInternal":false,"parameters":[],"type":"KitScrollState","text":"get state(): KitScrollState {\r\n    return this._state.value;\r\n  }","signature":"get state(): KitScrollState"},{"kind":154,"name":"stateChanges","jsDoc":[],"isInternal":false,"parameters":[],"type":"Observable<KitScrollState>","text":"get stateChanges(): Observable<KitScrollState> {\r\n    return this._state.asObservable();\r\n  }","signature":"get stateChanges(): Observable<KitScrollState>"},{"kind":152,"name":"ngOnDestroy","jsDoc":[],"isInternal":false,"parameters":[],"text":"ngOnDestroy() {\r\n    this.mutationObserver.disconnect();\r\n  }","signature":"ngOnDestroy()"},{"kind":152,"name":"registerRefs","jsDoc":[],"isInternal":false,"parameters":["refs: KitScrollRefs"],"text":"registerRefs(refs: KitScrollRefs) {\r\n    this.refs = refs;\r\n    this.initVListeners();\r\n    this.initHListeners();\r\n    this.initMutationObserver();\r\n  }","signature":"registerRefs(refs: KitScrollRefs)"},{"kind":152,"name":"update","jsDoc":[],"isInternal":false,"parameters":[],"text":"update() {\r\n    this.updateVBar();\r\n    this.updateHBar();\r\n  }","signature":"update()"},{"kind":152,"name":"updateVBar","jsDoc":[],"isInternal":false,"parameters":[],"text":"updateVBar() {\r\n    const state = this.calcBar(\r\n      this.refs.vWrapper.scrollHeight - this.state.nativeScrollbarWidth,\r\n      this.elRef.nativeElement.offsetHeight,\r\n      this.refs.vBarWrapper.offsetHeight,\r\n      this.refs.vWrapper.scrollTop,\r\n    );\r\n    this._state.next({\r\n      ...this.state,\r\n      vBar: state,\r\n    });\r\n  }","signature":"updateVBar()"},{"kind":152,"name":"updateHBar","jsDoc":[],"isInternal":false,"parameters":[],"text":"updateHBar() {\r\n    const state = this.calcBar(\r\n      this.refs.hWrapper.scrollWidth,\r\n      this.elRef.nativeElement.offsetWidth,\r\n      this.refs.hBarWrapper.offsetWidth,\r\n      this.refs.hWrapper.scrollLeft,\r\n    );\r\n    this._state.next({\r\n      ...this.state,\r\n      hBar: state,\r\n    });\r\n  }","signature":"updateHBar()"},{"kind":152,"name":"calcBar","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":["contentSize: number","hostSize: number","barWrapperSize: number","scrollPosition: number"],"text":"private calcBar(contentSize: number, hostSize: number, barWrapperSize: number, scrollPosition: number) {\r\n    if (contentSize > hostSize) {\r\n      const size = Math.round(Math.max((hostSize / contentSize) * barWrapperSize, 30));\r\n      return {\r\n        active: true,\r\n        size,\r\n        position: Math.round((barWrapperSize - size) * (scrollPosition / (contentSize - hostSize))),\r\n      };\r\n    } else {\r\n      return {\r\n        active: false,\r\n        size: 0,\r\n        position: 0,\r\n      };\r\n    }\r\n  }","signature":"private calcBar(contentSize: number, hostSize: number, barWrapperSize: number, scrollPosition: number)"},{"kind":152,"name":"initVListeners","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":[],"text":"private initVListeners() {\r\n    const vBarHammerConfig = new HammerGestureConfig();\r\n    vBarHammerConfig.overrides = {\r\n      pan: {\r\n        direction: KitHammerTypes.DIRECTION_VERTICAL,\r\n        threshold: 1,\r\n      },\r\n    };\r\n    const vBarHammer = vBarHammerConfig.buildHammer(this.refs.vBar);\r\n    let scrollStart: number | null = null;\r\n    // Pan\r\n    vBarHammer.on('pan', (event: any) => {\r\n      // Start\r\n      if (scrollStart === null) {\r\n        scrollStart = this.refs.vWrapper.scrollTop;\r\n        this._state.next({\r\n          ...this.state,\r\n          dragging: true,\r\n        });\r\n      }\r\n      // Calc\r\n      const contentHeight = this.refs.hWrapper.scrollHeight;\r\n      const hostHeight = this.elRef.nativeElement.offsetHeight;\r\n      const coef = contentHeight / hostHeight;\r\n      if (scrollStart !== null) {\r\n        this.refs.vWrapper.scrollTop = Math.round(scrollStart + event.deltaY * coef);\r\n      }\r\n      // Final\r\n      if (event.isFinal) {\r\n        scrollStart = null;\r\n        this._state.next({\r\n          ...this.state,\r\n          dragging: false,\r\n        });\r\n      }\r\n    });\r\n    // Tap\r\n    const vBarWrapperHammer = vBarHammerConfig.buildHammer(this.refs.vBarWrapper);\r\n    vBarWrapperHammer.on('tap', (event: any) => {\r\n      if (event.target === this.refs.vBarWrapper) {\r\n        const pos = this.hammerProvider.calcRelatedPosition(this.refs.vBarWrapper, event.center);\r\n        // Calc\r\n        this.refs.vWrapper.scrollTop += pos.y > this.state.vBar.position ? 200 : -200;\r\n      }\r\n    });\r\n  }","signature":"private initVListeners()"},{"kind":152,"name":"initHListeners","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":[],"text":"private initHListeners() {\r\n    const hBarHammerConfig = new HammerGestureConfig();\r\n    hBarHammerConfig.overrides = {\r\n      pan: {\r\n        direction: KitHammerTypes.DIRECTION_HORIZONTAL,\r\n        threshold: 1,\r\n      },\r\n    };\r\n    const hBarHammer = hBarHammerConfig.buildHammer(this.refs.hBar);\r\n    let scrollStart: number | null = null;\r\n    // Pan\r\n    hBarHammer.on('pan', (event: any) => {\r\n      // Start\r\n      if (scrollStart === null) {\r\n        scrollStart = this.refs.hWrapper.scrollLeft;\r\n        this._state.next({\r\n          ...this.state,\r\n          dragging: true,\r\n        });\r\n      }\r\n      // Calc\r\n      const contentWidth = this.refs.hWrapper.scrollWidth;\r\n      const hostWidth = this.elRef.nativeElement.offsetWidth;\r\n      const coef = contentWidth / hostWidth;\r\n      if (scrollStart !== null) {\r\n        this.refs.hWrapper.scrollLeft = Math.round(scrollStart + event.deltaX * coef);\r\n      }\r\n      // Final\r\n      if (event.isFinal) {\r\n        scrollStart = null;\r\n        this._state.next({\r\n          ...this.state,\r\n          dragging: false,\r\n        });\r\n      }\r\n    });\r\n    // Tap\r\n    const hBarWrapperHammer = hBarHammerConfig.buildHammer(this.refs.hBarWrapper);\r\n    hBarWrapperHammer.on('tap', (event: any) => {\r\n      if (event.target === this.refs.hBarWrapper) {\r\n        const pos = this.hammerProvider.calcRelatedPosition(this.refs.hBarWrapper, event.center);\r\n        // Calc\r\n        this.refs.hWrapper.scrollLeft += pos.x > this.state.hBar.position ? 200 : -200;\r\n      }\r\n    });\r\n  }","signature":"private initHListeners()"},{"kind":152,"name":"initMutationObserver","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":[],"text":"private initMutationObserver() {\r\n    this.mutationObserver = new MutationObserver(mutations => {\r\n      if (mutations.length > 0) {\r\n        this.update();\r\n      }\r\n    });\r\n    this.mutationObserver.observe(this.refs.hWrapper, {\r\n      attributes: true,\r\n      childList: true,\r\n      characterData: true,\r\n      subtree: true,\r\n    });\r\n  }","signature":"private initMutationObserver()"}],"ngMeta":{"type":"Injectable","decorator":{}}}]},{"fileName":"src/kit-scroll/kit-scroll.ts","type":"ts","text":"export * from './kit-scroll.service';\r\nexport * from './meta';\r\n","declars":[]},{"fileName":"src/kit-scroll/meta.ts","type":"ts","text":"export interface KitScrollRefs {\r\n  vBar: HTMLElement;\r\n  vBarWrapper: HTMLElement;\r\n  vWrapper: HTMLElement;\r\n  hBar: HTMLElement;\r\n  hBarWrapper: HTMLElement;\r\n  hWrapper: HTMLElement;\r\n}\r\n\r\nexport interface KitScrollState {\r\n  nativeScrollbarWidth: number;\r\n  dragging: boolean;\r\n  vBar: {\r\n    active: boolean;\r\n    size: number;\r\n    position: number;\r\n  };\r\n  hBar: {\r\n    active: boolean;\r\n    size: number;\r\n    position: number;\r\n  };\r\n}\r\n","declars":[{"kind":231,"kindString":"interface","jsDoc":[],"isInternal":false,"name":"KitScrollRefs","members":[{"kind":149,"jsDoc":[],"isInternal":false,"name":"vBar","type":"HTMLElement","text":"vBar: HTMLElement;","signature":"vBar(): HTMLElement"},{"kind":149,"jsDoc":[],"isInternal":false,"name":"vBarWrapper","type":"HTMLElement","text":"vBarWrapper: HTMLElement;","signature":"vBarWrapper(): HTMLElement"},{"kind":149,"jsDoc":[],"isInternal":false,"name":"vWrapper","type":"HTMLElement","text":"vWrapper: HTMLElement;","signature":"vWrapper(): HTMLElement"},{"kind":149,"jsDoc":[],"isInternal":false,"name":"hBar","type":"HTMLElement","text":"hBar: HTMLElement;","signature":"hBar(): HTMLElement"},{"kind":149,"jsDoc":[],"isInternal":false,"name":"hBarWrapper","type":"HTMLElement","text":"hBarWrapper: HTMLElement;","signature":"hBarWrapper(): HTMLElement"},{"kind":149,"jsDoc":[],"isInternal":false,"name":"hWrapper","type":"HTMLElement","text":"hWrapper: HTMLElement;","signature":"hWrapper(): HTMLElement"}]},{"kind":231,"kindString":"interface","jsDoc":[],"isInternal":false,"name":"KitScrollState","members":[{"kind":149,"jsDoc":[],"isInternal":false,"name":"nativeScrollbarWidth","type":"number","text":"nativeScrollbarWidth: number;","signature":"nativeScrollbarWidth(): number"},{"kind":149,"jsDoc":[],"isInternal":false,"name":"dragging","type":"boolean","text":"dragging: boolean;","signature":"dragging(): boolean"},{"kind":149,"jsDoc":[],"isInternal":false,"name":"vBar","type":"{\r\n    active: boolean;\r\n    size: number;\r\n    position: number;\r\n  }","text":"vBar: {\r\n    active: boolean;\r\n    size: number;\r\n    position: number;\r\n  };","signature":"vBar(): {\r\n    active: boolean;\r\n    size: number;\r\n    position: number;\r\n  }"},{"kind":149,"jsDoc":[],"isInternal":false,"name":"hBar","type":"{\r\n    active: boolean;\r\n    size: number;\r\n    position: number;\r\n  }","text":"hBar: {\r\n    active: boolean;\r\n    size: number;\r\n    position: number;\r\n  };","signature":"hBar(): {\r\n    active: boolean;\r\n    size: number;\r\n    position: number;\r\n  }"}]}]},{"fileName":"src/kit-slide/kit-slide-host.service.ts","type":"ts","text":"import { Injectable, NgZone } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { KitSlideDirection, KitSlideId } from './meta';\n\n/**\n * ### Usage\n *\n * Provide `KitSlideHostService` on a component and add `*kitSlide` to slides.\n *\n * ```html\n * <div (click)=\"rotate()\">\n *   <div *kitSlide>Slide 1</div>\n *   <div *kitSlide>Slide 2</div>\n *   <div *kitSlide>Slide 3</div>\n * </div>\n * ```\n *\n * Use `KitSlideHostService` for state changing.\n *\n * ```typescript\n * providers[KitSlideHostService],\n * ...\n * constructor(private slideHost: KitSlideHostService) {\n * }\n * ...\n * rotate() {\n *   this.slideHost.rotate();\n * }\n * ```\n *\n *\n * ### Example\n *\n * * collection:carousel -\n * [sources](https://github.com/ngx-kit/ngx-kit/tree/master/packages/collection/lib/ui-carousel),\n * [demo](http://ngx-kit.com/collection/module/ui-carousel)\n * * collection:tabs - [sources](https://github.com/ngx-kit/ngx-kit/tree/master/packages/collection/lib/ui-tabs),\n * [demo](http://ngx-kit.com/collection/module/ui-tabs)\n */\n@Injectable()\nexport class KitSlideHostService {\n  /**\n   * Activate first slide on init.\n   */\n  activateFirst = true;\n\n  private _active = new BehaviorSubject<KitSlideId>(null);\n\n  private _direction = new BehaviorSubject<KitSlideDirection>('next');\n\n  private firstRegistration = false;\n\n  private ids = new Set<KitSlideId>();\n\n  private lastId = 0;\n\n  constructor(\n    private zone: NgZone,\n  ) {\n  }\n\n  /**\n   * Get active slide id.\n   */\n  get active(): KitSlideId {\n    return this._active.value;\n  }\n\n  /**\n   * Set active side by id.\n   */\n  set active(id: KitSlideId) {\n    this._direction.next(this._active.value === null\n      ? 'initial' // no animation for init render\n      : id !== null && this.getIndex(id) > this.getIndex(this._active.value)\n        ? 'next'\n        : 'prev');\n    // run after stabilization for correct animation trigger setup\n    this.zone.onStable.pipe(take(1)).subscribe(() => {\n      this._active.next(id);\n    });\n  }\n\n  /**\n   * Set active and emit only 'initial' direction.\n   */\n  set activeInitial(id: KitSlideId) {\n    this._direction.next('initial');\n    // run after stabilization for correct animation trigger setup\n    this.zone.onStable.pipe(take(1)).subscribe(() => {\n      this._active.next(id);\n    });\n  }\n\n  /**\n   * Get `Observable` with active slide id.\n   */\n  get activeChanges(): Observable<KitSlideId> {\n    return this._active.asObservable();\n  }\n\n  /**\n   * Get `Observable` with direction of slide changing (next, prev).\n   */\n  get directionChanges(): Observable<KitSlideDirection> {\n    return this._direction.asObservable();\n  }\n\n  /**\n   * Register slide.\n   */\n  addId(id: KitSlideId) {\n    if (!this.firstRegistration) {\n      this.firstRegistration = true;\n      if (this.activateFirst) {\n        this.active = id;\n      }\n    }\n    this.ids.add(id);\n  }\n\n  /**\n   * Delete slide.\n   */\n  deleteId(id: KitSlideId) {\n    this.ids.delete(id);\n  }\n\n  /**\n   * Generate slide id.\n   */\n  genId(): number {\n    this.lastId++;\n    return this.lastId;\n  }\n\n  /**\n   * Activate next slide.\n   */\n  next(cycle = false) {\n    const ids = Array.from(this.ids);\n    const currentIndex = this.getCurrentIndex();\n    if (currentIndex < ids.length - 1) {\n      this.active = ids[currentIndex + 1];\n    } else if (cycle) {\n      this.active = ids[0];\n    }\n  }\n\n  /**\n   * Activate prev slide.\n   */\n  prev(cycle = false) {\n    const ids = Array.from(this.ids);\n    const currentIndex = this.getCurrentIndex();\n    if (currentIndex > 0) {\n      this.active = ids[currentIndex - 1];\n    } else if (cycle) {\n      this.active = ids[ids.length - 1];\n    }\n  }\n\n  private getCurrentIndex() {\n    return this.getIndex(this._active.value);\n  }\n\n  private getIndex(value: any) {\n    const ids = Array.from(this.ids);\n    return ids.findIndex(i => i === value);\n  }\n}\n","declars":[{"kind":230,"kindString":"class","jsDoc":[{"comment":"### Usage\n\nProvide `KitSlideHostService` on a component and add `*kitSlide` to slides.\n\n```html\n<div (click)=\"rotate()\">\n   <div *kitSlide>Slide 1</div>\n   <div *kitSlide>Slide 2</div>\n   <div *kitSlide>Slide 3</div>\n</div>\n```\n\nUse `KitSlideHostService` for state changing.\n\n```typescript\nproviders[KitSlideHostService],\n...\nconstructor(private slideHost: KitSlideHostService) {\n}\n...\nrotate() {\n   this.slideHost.rotate();\n}\n```\n\n\n### Example\n\n* collection:carousel -\n[sources](https://github.com/ngx-kit/ngx-kit/tree/master/packages/collection/lib/ui-carousel),\n[demo](http://ngx-kit.com/collection/module/ui-carousel)\n* collection:tabs - [sources](https://github.com/ngx-kit/ngx-kit/tree/master/packages/collection/lib/ui-tabs),\n[demo](http://ngx-kit.com/collection/module/ui-tabs)","tags":[]}],"isInternal":false,"isDemo":false,"decorators":["@Injectable()"],"modifiers":["export"],"name":"KitSlideHostService","members":[{"kind":150,"name":"activateFirst","jsDoc":[{"comment":"Activate first slide on init.","tags":[]}],"isInternal":false,"initializer":"true","text":"activateFirst = true;","signature":"activateFirst = true"},{"kind":150,"name":"_active","jsDoc":[],"isInternal":false,"modifiers":["private"],"initializer":"new BehaviorSubject<KitSlideId>(null)","text":"private _active = new BehaviorSubject<KitSlideId>(null);","signature":"private _active = new BehaviorSubject<KitSlideId>(null)"},{"kind":150,"name":"_direction","jsDoc":[],"isInternal":false,"modifiers":["private"],"initializer":"new BehaviorSubject<KitSlideDirection>('next')","text":"private _direction = new BehaviorSubject<KitSlideDirection>('next');","signature":"private _direction = new BehaviorSubject<KitSlideDirection>('next')"},{"kind":150,"name":"firstRegistration","jsDoc":[],"isInternal":false,"modifiers":["private"],"initializer":"false","text":"private firstRegistration = false;","signature":"private firstRegistration = false"},{"kind":150,"name":"ids","jsDoc":[],"isInternal":false,"modifiers":["private"],"initializer":"new Set<KitSlideId>()","text":"private ids = new Set<KitSlideId>();","signature":"private ids = new Set<KitSlideId>()"},{"kind":150,"name":"lastId","jsDoc":[],"isInternal":false,"modifiers":["private"],"initializer":"0","text":"private lastId = 0;","signature":"private lastId = 0"},{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["private zone: NgZone"],"text":"constructor(\n    private zone: NgZone,\n  ) {\n  }","signature":"constructor(private zone: NgZone)"},{"kind":154,"name":"active","jsDoc":[{"comment":"Get active slide id.","tags":[]}],"isInternal":false,"parameters":[],"type":"KitSlideId","text":"get active(): KitSlideId {\n    return this._active.value;\n  }","signature":"get active(): KitSlideId"},{"kind":155,"name":"active","jsDoc":[{"comment":"Set active side by id.","tags":[]}],"isInternal":false,"parameters":["id: KitSlideId"],"text":"set active(id: KitSlideId) {\n    this._direction.next(this._active.value === null\n      ? 'initial' // no animation for init render\n      : id !== null && this.getIndex(id) > this.getIndex(this._active.value)\n        ? 'next'\n        : 'prev');\n    // run after stabilization for correct animation trigger setup\n    this.zone.onStable.pipe(take(1)).subscribe(() => {\n      this._active.next(id);\n    });\n  }","signature":"set active(id: KitSlideId)"},{"kind":155,"name":"activeInitial","jsDoc":[{"comment":"Set active and emit only 'initial' direction.","tags":[]}],"isInternal":false,"parameters":["id: KitSlideId"],"text":"set activeInitial(id: KitSlideId) {\n    this._direction.next('initial');\n    // run after stabilization for correct animation trigger setup\n    this.zone.onStable.pipe(take(1)).subscribe(() => {\n      this._active.next(id);\n    });\n  }","signature":"set activeInitial(id: KitSlideId)"},{"kind":154,"name":"activeChanges","jsDoc":[{"comment":"Get `Observable` with active slide id.","tags":[]}],"isInternal":false,"parameters":[],"type":"Observable<KitSlideId>","text":"get activeChanges(): Observable<KitSlideId> {\n    return this._active.asObservable();\n  }","signature":"get activeChanges(): Observable<KitSlideId>"},{"kind":154,"name":"directionChanges","jsDoc":[{"comment":"Get `Observable` with direction of slide changing (next, prev).","tags":[]}],"isInternal":false,"parameters":[],"type":"Observable<KitSlideDirection>","text":"get directionChanges(): Observable<KitSlideDirection> {\n    return this._direction.asObservable();\n  }","signature":"get directionChanges(): Observable<KitSlideDirection>"},{"kind":152,"name":"addId","jsDoc":[{"comment":"Register slide.","tags":[]}],"isInternal":false,"parameters":["id: KitSlideId"],"text":"addId(id: KitSlideId) {\n    if (!this.firstRegistration) {\n      this.firstRegistration = true;\n      if (this.activateFirst) {\n        this.active = id;\n      }\n    }\n    this.ids.add(id);\n  }","signature":"addId(id: KitSlideId)"},{"kind":152,"name":"deleteId","jsDoc":[{"comment":"Delete slide.","tags":[]}],"isInternal":false,"parameters":["id: KitSlideId"],"text":"deleteId(id: KitSlideId) {\n    this.ids.delete(id);\n  }","signature":"deleteId(id: KitSlideId)"},{"kind":152,"name":"genId","jsDoc":[{"comment":"Generate slide id.","tags":[]}],"isInternal":false,"parameters":[],"type":"number","text":"genId(): number {\n    this.lastId++;\n    return this.lastId;\n  }","signature":"genId(): number"},{"kind":152,"name":"next","jsDoc":[{"comment":"Activate next slide.","tags":[]}],"isInternal":false,"parameters":["cycle = false"],"text":"next(cycle = false) {\n    const ids = Array.from(this.ids);\n    const currentIndex = this.getCurrentIndex();\n    if (currentIndex < ids.length - 1) {\n      this.active = ids[currentIndex + 1];\n    } else if (cycle) {\n      this.active = ids[0];\n    }\n  }","signature":"next(cycle = false)"},{"kind":152,"name":"prev","jsDoc":[{"comment":"Activate prev slide.","tags":[]}],"isInternal":false,"parameters":["cycle = false"],"text":"prev(cycle = false) {\n    const ids = Array.from(this.ids);\n    const currentIndex = this.getCurrentIndex();\n    if (currentIndex > 0) {\n      this.active = ids[currentIndex - 1];\n    } else if (cycle) {\n      this.active = ids[ids.length - 1];\n    }\n  }","signature":"prev(cycle = false)"},{"kind":152,"name":"getCurrentIndex","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":[],"text":"private getCurrentIndex() {\n    return this.getIndex(this._active.value);\n  }","signature":"private getCurrentIndex()"},{"kind":152,"name":"getIndex","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":["value: any"],"text":"private getIndex(value: any) {\n    const ids = Array.from(this.ids);\n    return ids.findIndex(i => i === value);\n  }","signature":"private getIndex(value: any)"}],"ngMeta":{"type":"Injectable","decorator":{}}}]},{"fileName":"src/kit-slide/kit-slide.module.ts","type":"ts","text":"import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { KitSlideDirective } from './kit-slide/kit-slide.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  exports: [\r\n    KitSlideDirective,\r\n  ],\r\n  declarations: [\r\n    KitSlideDirective,\r\n  ],\r\n})\r\nexport class KitSlideModule {\r\n}\r\n","declars":[{"kind":230,"kindString":"class","jsDoc":[],"isInternal":false,"isDemo":false,"decorators":["@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  exports: [\r\n    KitSlideDirective,\r\n  ],\r\n  declarations: [\r\n    KitSlideDirective,\r\n  ],\r\n})"],"modifiers":["export"],"name":"KitSlideModule","members":[],"ngMeta":{"type":"NgModule","decorator":{"exports":"[\r\n    KitSlideDirective,\r\n  ]"}}}]},{"fileName":"src/kit-slide/kit-slide.ts","type":"ts","text":"export * from './kit-slide/kit-slide.directive';\r\nexport * from './kit-slide.module';\r\nexport * from './kit-slide-host.service';\r\nexport * from './meta';\r\n","declars":[]},{"fileName":"src/kit-slide/kit-slide/kit-slide.directive.ts","type":"ts","text":"import {\r\n  ChangeDetectorRef,\r\n  Directive,\r\n  Input,\r\n  NgZone,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  SimpleChanges,\r\n  TemplateRef,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { KitSlideHostService } from '../kit-slide-host.service';\r\nimport { KitSlideId } from '../meta';\r\n\r\n/**\r\n * Structure directive that display slides.\r\n */\r\n@Directive({\r\n  selector: '[kitSlide]',\r\n})\r\nexport class KitSlideDirective implements OnInit, OnDestroy, OnChanges {\r\n  /**\r\n   * Slide id.\r\n   *\r\n   * If not set will be generated automatically.\r\n   */\r\n  @Input() kitSlide: KitSlideId = null;\r\n\r\n  private destroy = new Subject<void>();\r\n\r\n  private displayed = false;\r\n\r\n  constructor(\r\n    private vcr: ViewContainerRef,\r\n    private template: TemplateRef<any>,\r\n    private host: KitSlideHostService,\r\n    private cdr: ChangeDetectorRef,\r\n    private zone: NgZone,\r\n  ) {\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes['kitSlide'] && changes['kitSlide'].currentValue !== null) {\r\n      this.host.deleteId(changes['kitSlide'].previousValue);\r\n      this.host.addId(changes['kitSlide'].currentValue);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.host.deleteId(this.kitSlide);\r\n    this.destroy.next();\r\n  }\r\n\r\n  ngOnInit() {\r\n    // gen slideId if not set\r\n    if (this.kitSlide === null) {\r\n      this.kitSlide = this.host.genId();\r\n      this.host.addId(this.kitSlide);\r\n    }\r\n    // handle displaying\r\n    this.host.activeChanges\r\n      .pipe(takeUntil(this.destroy))\r\n      .subscribe((id: string) => {\r\n        if (id === this.kitSlide) {\r\n          if (!this.displayed) {\r\n            this.zone.run(() => {\r\n              this.vcr.createEmbeddedView(this.template);\r\n              this.displayed = true;\r\n              this.cdr.detectChanges();\r\n            });\r\n          }\r\n        } else {\r\n          if (this.displayed) {\r\n            this.zone.run(() => {\r\n              this.vcr.clear();\r\n              this.displayed = false;\r\n              this.cdr.detectChanges();\r\n            });\r\n          }\r\n        }\r\n      });\r\n  }\r\n}\r\n","declars":[{"kind":230,"kindString":"class","jsDoc":[{"comment":"Structure directive that display slides.","tags":[]}],"isInternal":false,"isDemo":false,"decorators":["@Directive({\r\n  selector: '[kitSlide]',\r\n})"],"modifiers":["export"],"name":"KitSlideDirective","members":[{"kind":150,"name":"kitSlide","jsDoc":[{"comment":"Slide id.\r\n\r\nIf not set will be generated automatically.","tags":[]}],"isInternal":false,"decorators":["@Input()"],"type":"KitSlideId","initializer":"null","text":"@Input() kitSlide: KitSlideId = null;","signature":"@Input() kitSlide: KitSlideId = null"},{"kind":150,"name":"destroy","jsDoc":[],"isInternal":false,"modifiers":["private"],"initializer":"new Subject<void>()","text":"private destroy = new Subject<void>();","signature":"private destroy = new Subject<void>()"},{"kind":150,"name":"displayed","jsDoc":[],"isInternal":false,"modifiers":["private"],"initializer":"false","text":"private displayed = false;","signature":"private displayed = false"},{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["private vcr: ViewContainerRef","private template: TemplateRef<any>","private host: KitSlideHostService","private cdr: ChangeDetectorRef","private zone: NgZone"],"text":"constructor(\r\n    private vcr: ViewContainerRef,\r\n    private template: TemplateRef<any>,\r\n    private host: KitSlideHostService,\r\n    private cdr: ChangeDetectorRef,\r\n    private zone: NgZone,\r\n  ) {\r\n  }","signature":"constructor(private vcr: ViewContainerRef, private template: TemplateRef<any>, private host: KitSlideHostService, private cdr: ChangeDetectorRef, private zone: NgZone)"},{"kind":152,"name":"ngOnChanges","jsDoc":[],"isInternal":false,"parameters":["changes: SimpleChanges"],"text":"ngOnChanges(changes: SimpleChanges) {\r\n    if (changes['kitSlide'] && changes['kitSlide'].currentValue !== null) {\r\n      this.host.deleteId(changes['kitSlide'].previousValue);\r\n      this.host.addId(changes['kitSlide'].currentValue);\r\n    }\r\n  }","signature":"ngOnChanges(changes: SimpleChanges)"},{"kind":152,"name":"ngOnDestroy","jsDoc":[],"isInternal":false,"parameters":[],"text":"ngOnDestroy() {\r\n    this.host.deleteId(this.kitSlide);\r\n    this.destroy.next();\r\n  }","signature":"ngOnDestroy()"},{"kind":152,"name":"ngOnInit","jsDoc":[],"isInternal":false,"parameters":[],"text":"ngOnInit() {\r\n    // gen slideId if not set\r\n    if (this.kitSlide === null) {\r\n      this.kitSlide = this.host.genId();\r\n      this.host.addId(this.kitSlide);\r\n    }\r\n    // handle displaying\r\n    this.host.activeChanges\r\n      .pipe(takeUntil(this.destroy))\r\n      .subscribe((id: string) => {\r\n        if (id === this.kitSlide) {\r\n          if (!this.displayed) {\r\n            this.zone.run(() => {\r\n              this.vcr.createEmbeddedView(this.template);\r\n              this.displayed = true;\r\n              this.cdr.detectChanges();\r\n            });\r\n          }\r\n        } else {\r\n          if (this.displayed) {\r\n            this.zone.run(() => {\r\n              this.vcr.clear();\r\n              this.displayed = false;\r\n              this.cdr.detectChanges();\r\n            });\r\n          }\r\n        }\r\n      });\r\n  }","signature":"ngOnInit()"}],"ngMeta":{"type":"Directive","decorator":{"selector":"'[kitSlide]'"}}}]},{"fileName":"src/kit-slide/meta.ts","type":"ts","text":"export type KitSlideDirection = 'initial' | 'prev' | 'next';\r\nexport type KitSlideId = string | number | null;\r\n","declars":[{"kind":232,"kindString":"typeAlias","jsDoc":[],"isInternal":false,"name":"KitSlideDirection","type":"'initial' | 'prev' | 'next'","text":"export type KitSlideDirection = 'initial' | 'prev' | 'next';"},{"kind":232,"kindString":"typeAlias","jsDoc":[],"isInternal":false,"name":"KitSlideId","type":"string | number | null","text":"export type KitSlideId = string | number | null;"}]},{"fileName":"src/kit-style/kit-style.module.ts","type":"ts","text":"import { NgModule } from '@angular/core';\r\n\r\n@NgModule({})\r\nexport class KitStyleModule {\r\n}\r\n","declars":[{"kind":230,"kindString":"class","jsDoc":[],"isInternal":false,"isDemo":false,"decorators":["@NgModule({})"],"modifiers":["export"],"name":"KitStyleModule","members":[],"ngMeta":{"type":"NgModule","decorator":{}}}]},{"fileName":"src/kit-style/kit-style.service.ts","type":"ts","text":"import { ElementRef, Injectable, KeyValueChanges, KeyValueDiffer, KeyValueDiffers, Renderer2 } from '@angular/core';\nimport { KitStyles } from './meta';\n\n/**\n * Service that works exactly like `ngStyle`, but can be provided on a component or directive.\n *\n *\n * ### Usage\n *\n * Provide and inject `KitStyleService` in a component, then apply styles:\n *\n * ```typescript\n * providers: [KitStyleService],\n * ...\n * constructor(private style: KitStyleService) {\n * }\n * ...\n * this.style.style = {\n *  background: 'red',\n *  color: '#fff',\n * };\n * ```\n */\n@Injectable()\nexport class KitStyleService {\n  private _differ: KeyValueDiffer<string, string | number>;\n\n  private _style: {[key: string]: string};\n\n  constructor(\n    private el: ElementRef,\n    private differs: KeyValueDiffers,\n    private renderer: Renderer2,\n  ) {\n  }\n\n  set style(v: KitStyles) {\n    this._style = v;\n    if (!this._differ && v) {\n      this._differ = this.differs.find(v).create();\n    }\n    const changes = this._differ.diff(this._style);\n    if (changes) {\n      this.applyChanges(changes);\n    }\n  }\n\n  private applyChanges(changes: KeyValueChanges<string, string | number>): void {\n    changes.forEachRemovedItem((record) => this.setStyle(record.key, null));\n    changes.forEachAddedItem((record) => this.setStyle(record.key, record.currentValue));\n    changes.forEachChangedItem((record) => this.setStyle(record.key, record.currentValue));\n  }\n\n  private setStyle(nameAndUnit: string, value: string | number | null | undefined): void {\n    const [name, unit] = nameAndUnit.split('.');\n    value = value != null && unit ? `${value}${unit}` : value;\n    this.renderer.setStyle(this.el.nativeElement, name, value as string);\n  }\n}\n","declars":[{"kind":230,"kindString":"class","jsDoc":[{"comment":"Service that works exactly like `ngStyle`, but can be provided on a component or directive.\n\n\n### Usage\n\nProvide and inject `KitStyleService` in a component, then apply styles:\n\n```typescript\nproviders: [KitStyleService],\n...\nconstructor(private style: KitStyleService) {\n}\n...\nthis.style.style = {\n  background: 'red',\n  color: '#fff',\n};\n```","tags":[]}],"isInternal":false,"isDemo":false,"decorators":["@Injectable()"],"modifiers":["export"],"name":"KitStyleService","members":[{"kind":150,"name":"_differ","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"KeyValueDiffer<string, string | number>","text":"private _differ: KeyValueDiffer<string, string | number>;","signature":"private _differ: KeyValueDiffer<string, string | number>"},{"kind":150,"name":"_style","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"{[key: string]: string}","text":"private _style: {[key: string]: string};","signature":"private _style: {[key: string]: string}"},{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["private el: ElementRef","private differs: KeyValueDiffers","private renderer: Renderer2"],"text":"constructor(\n    private el: ElementRef,\n    private differs: KeyValueDiffers,\n    private renderer: Renderer2,\n  ) {\n  }","signature":"constructor(private el: ElementRef, private differs: KeyValueDiffers, private renderer: Renderer2)"},{"kind":155,"name":"style","jsDoc":[],"isInternal":false,"parameters":["v: KitStyles"],"text":"set style(v: KitStyles) {\n    this._style = v;\n    if (!this._differ && v) {\n      this._differ = this.differs.find(v).create();\n    }\n    const changes = this._differ.diff(this._style);\n    if (changes) {\n      this.applyChanges(changes);\n    }\n  }","signature":"set style(v: KitStyles)"},{"kind":152,"name":"applyChanges","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":["changes: KeyValueChanges<string, string | number>"],"type":"void","text":"private applyChanges(changes: KeyValueChanges<string, string | number>): void {\n    changes.forEachRemovedItem((record) => this.setStyle(record.key, null));\n    changes.forEachAddedItem((record) => this.setStyle(record.key, record.currentValue));\n    changes.forEachChangedItem((record) => this.setStyle(record.key, record.currentValue));\n  }","signature":"private applyChanges(changes: KeyValueChanges<string, string | number>): void"},{"kind":152,"name":"setStyle","jsDoc":[],"isInternal":false,"modifiers":["private"],"parameters":["nameAndUnit: string","value: string | number | null | undefined"],"type":"void","text":"private setStyle(nameAndUnit: string, value: string | number | null | undefined): void {\n    const [name, unit] = nameAndUnit.split('.');\n    value = value != null && unit ? `${value}${unit}` : value;\n    this.renderer.setStyle(this.el.nativeElement, name, value as string);\n  }","signature":"private setStyle(nameAndUnit: string, value: string | number | null | undefined): void"}],"ngMeta":{"type":"Injectable","decorator":{}}}]},{"fileName":"src/kit-style/kit-style.ts","type":"ts","text":"export * from './kit-style.service';\r\nexport * from './kit-style.module';\r\nexport * from './meta';\r\n","declars":[]},{"fileName":"src/kit-style/meta.ts","type":"ts","text":"export interface KitStyles {\r\n  [key: string]: string;\r\n}\r\n","declars":[{"kind":231,"kindString":"interface","jsDoc":[],"isInternal":false,"name":"KitStyles","members":[{"kind":158,"jsDoc":[],"isInternal":false,"parameters":["key: string"],"type":"string","text":"[key: string]: string;","signature":"[key: string]: string"}]}]},{"fileName":"src/kit-value-accessor/kit-default-model-interceptor.ts","type":"ts","text":"import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { KitModelInterceptor } from './kit-model-interceptor';\r\n\r\n@Injectable()\r\nexport class KitDefaultModelInterceptor implements KitModelInterceptor {\r\n  readonly viewStateChanges = new Subject<string>();\r\n\r\n  readonly modelStateChanges = new Subject<any>();\r\n\r\n  input(value: string, event: any) {\r\n    this.modelStateChanges.next(value);\r\n  }\r\n\r\n  keyDown(event: any) {\r\n  }\r\n\r\n  writeValue(value: any) {\r\n    this.viewStateChanges.next(value);\r\n  }\r\n}\r\n","declars":[{"kind":230,"kindString":"class","jsDoc":[],"isInternal":false,"isDemo":false,"decorators":["@Injectable()"],"modifiers":["export"],"name":"KitDefaultModelInterceptor","members":[{"kind":150,"name":"viewStateChanges","jsDoc":[],"isInternal":false,"modifiers":["readonly"],"initializer":"new Subject<string>()","text":"readonly viewStateChanges = new Subject<string>();","signature":"readonly viewStateChanges = new Subject<string>()"},{"kind":150,"name":"modelStateChanges","jsDoc":[],"isInternal":false,"modifiers":["readonly"],"initializer":"new Subject<any>()","text":"readonly modelStateChanges = new Subject<any>();","signature":"readonly modelStateChanges = new Subject<any>()"},{"kind":152,"name":"input","jsDoc":[],"isInternal":false,"parameters":["value: string","event: any"],"text":"input(value: string, event: any) {\r\n    this.modelStateChanges.next(value);\r\n  }","signature":"input(value: string, event: any)"},{"kind":152,"name":"keyDown","jsDoc":[],"isInternal":false,"parameters":["event: any"],"text":"keyDown(event: any) {\r\n  }","signature":"keyDown(event: any)"},{"kind":152,"name":"writeValue","jsDoc":[],"isInternal":false,"parameters":["value: any"],"text":"writeValue(value: any) {\r\n    this.viewStateChanges.next(value);\r\n  }","signature":"writeValue(value: any)"}],"ngMeta":{"type":"Injectable","decorator":{}}}]},{"fileName":"src/kit-value-accessor/kit-model-interceptor.ts","type":"ts","text":"import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\n@Injectable()\r\nexport abstract class KitModelInterceptor {\r\n  viewStateChanges: Subject<string>;\r\n\r\n  modelStateChanges: Subject<any>;\r\n\r\n  abstract input(value: string, event: any): void;\r\n\r\n  abstract keyDown(event: any): void;\r\n\r\n  abstract writeValue(value: any): void;\r\n}\r\n","declars":[{"kind":230,"kindString":"class","jsDoc":[],"isInternal":false,"isDemo":false,"decorators":["@Injectable()"],"modifiers":["export","abstract"],"name":"KitModelInterceptor","members":[{"kind":150,"name":"viewStateChanges","jsDoc":[],"isInternal":false,"type":"Subject<string>","text":"viewStateChanges: Subject<string>;","signature":"viewStateChanges: Subject<string>"},{"kind":150,"name":"modelStateChanges","jsDoc":[],"isInternal":false,"type":"Subject<any>","text":"modelStateChanges: Subject<any>;","signature":"modelStateChanges: Subject<any>"},{"kind":152,"name":"input","jsDoc":[],"isInternal":false,"modifiers":["abstract"],"parameters":["value: string","event: any"],"type":"void","text":"abstract input(value: string, event: any): void;","signature":"abstract input(value: string, event: any): void"},{"kind":152,"name":"keyDown","jsDoc":[],"isInternal":false,"modifiers":["abstract"],"parameters":["event: any"],"type":"void","text":"abstract keyDown(event: any): void;","signature":"abstract keyDown(event: any): void"},{"kind":152,"name":"writeValue","jsDoc":[],"isInternal":false,"modifiers":["abstract"],"parameters":["value: any"],"type":"void","text":"abstract writeValue(value: any): void;","signature":"abstract writeValue(value: any): void"}],"ngMeta":{"type":"Injectable","decorator":{}}}]},{"fileName":"src/kit-value-accessor/kit-value-accessor.directive.ts","type":"ts","text":"import { Directive, ElementRef, forwardRef, HostListener, Inject, Optional, Renderer2 } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { KitDefaultModelInterceptor } from './kit-default-model-interceptor';\nimport { KitModelInterceptor } from './kit-model-interceptor';\n\n/**\n * Service directive, injects middleware.\n *\n * Allows to intercept in communication between html `input` and `ngModel`.\n *\n *\n * ### Examples\n *\n * * collection:autocomplete -\n * [sources](https://github.com/ngx-kit/ngx-kit/tree/master/packages/collection/lib/ui-autocomplete),\n * [demo](http://ngx-kit.com/collection/module/ui-autocomplete)\n */\n@Directive({\n  // tslint:disable-next-line\n  selector: `\n    input:not([type=checkbox]):not([type=radio])[formControlName],\n    textarea[formControlName],\n    input:not([type=checkbox]):not([type=radio])[formControl],\n    textarea[formControl],\n    input:not([type=checkbox]):not([type=radio])[ngModel],\n    textarea[ngModel],\n    [ngDefaultControl]\n  `,\n  providers: [\n    KitDefaultModelInterceptor,\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => KitValueAccessorDirective),\n      multi: true,\n    },\n  ],\n})\n// tslint:disable-next-line\nexport class KitValueAccessorDirective implements ControlValueAccessor {\n  private changes$ = new Subject<string>();\n\n  private touches$ = new Subject<void>();\n\n  private interceptor: KitModelInterceptor;\n\n  constructor(\n    private renderer: Renderer2,\n    private el: ElementRef,\n    @Inject(KitModelInterceptor) @Optional() private injInterceptor: KitModelInterceptor,\n    private defaultInterceptor: KitDefaultModelInterceptor,\n  ) {\n    this.interceptor = this.injInterceptor || this.defaultInterceptor;\n    this.interceptor.modelStateChanges.subscribe(this.changes$);\n    this.interceptor.viewStateChanges.subscribe((value: any) => {\n      this.renderer.setProperty(this.el.nativeElement, 'value', value || '');\n    });\n  }\n\n  @HostListener('input', ['$event'])\n  inputHandler(event: any) {\n    this.interceptor.input(event.target.value, event);\n  }\n\n  @HostListener('keydown', ['$event'])\n  keydownHandler(event: any) {\n    this.interceptor.keyDown(event);\n  }\n\n  @HostListener('blur', ['$event'])\n  blurHandler(event: any) {\n    this.touches$.next();\n  }\n\n  registerOnChange(fn: any) {\n    this.changes$.subscribe(fn);\n  }\n\n  registerOnTouched(fn: any) {\n    this.touches$.subscribe(fn);\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.renderer.setProperty(this.el.nativeElement, 'disabled', isDisabled);\n  }\n\n  writeValue(rawValue: any): void {\n    this.interceptor.writeValue(rawValue);\n  }\n}\n","declars":[{"kind":230,"kindString":"class","jsDoc":[{"comment":"Service directive, injects middleware.\n\nAllows to intercept in communication between html `input` and `ngModel`.\n\n\n### Examples\n\n* collection:autocomplete -\n[sources](https://github.com/ngx-kit/ngx-kit/tree/master/packages/collection/lib/ui-autocomplete),\n[demo](http://ngx-kit.com/collection/module/ui-autocomplete)","tags":[]}],"isInternal":false,"isDemo":false,"decorators":["@Directive({\n  // tslint:disable-next-line\n  selector: `\n    input:not([type=checkbox]):not([type=radio])[formControlName],\n    textarea[formControlName],\n    input:not([type=checkbox]):not([type=radio])[formControl],\n    textarea[formControl],\n    input:not([type=checkbox]):not([type=radio])[ngModel],\n    textarea[ngModel],\n    [ngDefaultControl]\n  `,\n  providers: [\n    KitDefaultModelInterceptor,\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => KitValueAccessorDirective),\n      multi: true,\n    },\n  ],\n})"],"modifiers":["export"],"name":"KitValueAccessorDirective","members":[{"kind":150,"name":"changes$","jsDoc":[],"isInternal":false,"modifiers":["private"],"initializer":"new Subject<string>()","text":"private changes$ = new Subject<string>();","signature":"private changes$ = new Subject<string>()"},{"kind":150,"name":"touches$","jsDoc":[],"isInternal":false,"modifiers":["private"],"initializer":"new Subject<void>()","text":"private touches$ = new Subject<void>();","signature":"private touches$ = new Subject<void>()"},{"kind":150,"name":"interceptor","jsDoc":[],"isInternal":false,"modifiers":["private"],"type":"KitModelInterceptor","text":"private interceptor: KitModelInterceptor;","signature":"private interceptor: KitModelInterceptor"},{"kind":153,"name":"constructor","jsDoc":[],"isInternal":false,"parameters":["private renderer: Renderer2","private el: ElementRef","@Inject(KitModelInterceptor) @Optional() private injInterceptor: KitModelInterceptor","private defaultInterceptor: KitDefaultModelInterceptor"],"text":"constructor(\n    private renderer: Renderer2,\n    private el: ElementRef,\n    @Inject(KitModelInterceptor) @Optional() private injInterceptor: KitModelInterceptor,\n    private defaultInterceptor: KitDefaultModelInterceptor,\n  ) {\n    this.interceptor = this.injInterceptor || this.defaultInterceptor;\n    this.interceptor.modelStateChanges.subscribe(this.changes$);\n    this.interceptor.viewStateChanges.subscribe((value: any) => {\n      this.renderer.setProperty(this.el.nativeElement, 'value', value || '');\n    });\n  }","signature":"constructor(private renderer: Renderer2, private el: ElementRef, @Inject(KitModelInterceptor) @Optional() private injInterceptor: KitModelInterceptor, private defaultInterceptor: KitDefaultModelInterceptor)"},{"kind":152,"name":"inputHandler","jsDoc":[],"isInternal":false,"decorators":["@HostListener('input', ['$event'])"],"parameters":["event: any"],"text":"@HostListener('input', ['$event'])\n  inputHandler(event: any) {\n    this.interceptor.input(event.target.value, event);\n  }","signature":"@HostListener('input', ['$event']) inputHandler(event: any)"},{"kind":152,"name":"keydownHandler","jsDoc":[],"isInternal":false,"decorators":["@HostListener('keydown', ['$event'])"],"parameters":["event: any"],"text":"@HostListener('keydown', ['$event'])\n  keydownHandler(event: any) {\n    this.interceptor.keyDown(event);\n  }","signature":"@HostListener('keydown', ['$event']) keydownHandler(event: any)"},{"kind":152,"name":"blurHandler","jsDoc":[],"isInternal":false,"decorators":["@HostListener('blur', ['$event'])"],"parameters":["event: any"],"text":"@HostListener('blur', ['$event'])\n  blurHandler(event: any) {\n    this.touches$.next();\n  }","signature":"@HostListener('blur', ['$event']) blurHandler(event: any)"},{"kind":152,"name":"registerOnChange","jsDoc":[],"isInternal":false,"parameters":["fn: any"],"text":"registerOnChange(fn: any) {\n    this.changes$.subscribe(fn);\n  }","signature":"registerOnChange(fn: any)"},{"kind":152,"name":"registerOnTouched","jsDoc":[],"isInternal":false,"parameters":["fn: any"],"text":"registerOnTouched(fn: any) {\n    this.touches$.subscribe(fn);\n  }","signature":"registerOnTouched(fn: any)"},{"kind":152,"name":"setDisabledState","jsDoc":[],"isInternal":false,"parameters":["isDisabled: boolean"],"type":"void","text":"setDisabledState(isDisabled: boolean): void {\n    this.renderer.setProperty(this.el.nativeElement, 'disabled', isDisabled);\n  }","signature":"setDisabledState(isDisabled: boolean): void"},{"kind":152,"name":"writeValue","jsDoc":[],"isInternal":false,"parameters":["rawValue: any"],"type":"void","text":"writeValue(rawValue: any): void {\n    this.interceptor.writeValue(rawValue);\n  }","signature":"writeValue(rawValue: any): void"}],"ngMeta":{"type":"Directive","decorator":{"selector":"`\n    input:not([type=checkbox]):not([type=radio])[formControlName],\n    textarea[formControlName],\n    input:not([type=checkbox]):not([type=radio])[formControl],\n    textarea[formControl],\n    input:not([type=checkbox]):not([type=radio])[ngModel],\n    textarea[ngModel],\n    [ngDefaultControl]\n  `"}}}]},{"fileName":"src/kit-value-accessor/kit-value-accessor.module.ts","type":"ts","text":"import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { KitValueAccessorDirective } from './kit-value-accessor.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  declarations: [\r\n    KitValueAccessorDirective,\r\n  ],\r\n  exports: [\r\n    KitValueAccessorDirective,\r\n  ],\r\n})\r\nexport class KitValueAccessorModule {\r\n}\r\n","declars":[{"kind":230,"kindString":"class","jsDoc":[],"isInternal":false,"isDemo":false,"decorators":["@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  declarations: [\r\n    KitValueAccessorDirective,\r\n  ],\r\n  exports: [\r\n    KitValueAccessorDirective,\r\n  ],\r\n})"],"modifiers":["export"],"name":"KitValueAccessorModule","members":[],"ngMeta":{"type":"NgModule","decorator":{"exports":"[\r\n    KitValueAccessorDirective,\r\n  ]"}}}]},{"fileName":"src/kit-value-accessor/kit-value-accessor.ts","type":"ts","text":"export * from './kit-value-accessor.directive';\r\nexport * from './kit-value-accessor.module';\r\nexport * from './kit-model-interceptor';\r\n","declars":[]},{"fileName":"src/util/is-array.ts","type":"ts","text":"export function isArray(object: any): object is any[] {\n  const checker = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n  return checker(object);\n}\n","declars":[{"kind":229,"kindString":"function","jsDoc":[],"isInternal":false,"modifiers":["export"],"name":"isArray","parameters":["object: any"],"type":"object is any[]","signature":"isArray(object: any): object is any[]"}]},{"fileName":"src/util/is-defined.ts","type":"ts","text":"export function isDefined(val: any): boolean {\n  return val !== null && val !== undefined;\n}\n","declars":[{"kind":229,"kindString":"function","jsDoc":[],"isInternal":false,"modifiers":["export"],"name":"isDefined","parameters":["val: any"],"type":"boolean","signature":"isDefined(val: any): boolean"}]},{"fileName":"src/util/is-function.ts","type":"ts","text":"export function isFunction(x: any): x is Function {\r\n  return x !== null && typeof x === 'function';\r\n}\r\n","declars":[{"kind":229,"kindString":"function","jsDoc":[],"isInternal":false,"modifiers":["export"],"name":"isFunction","parameters":["x: any"],"type":"x is Function","signature":"isFunction(x: any): x is Function"}]},{"fileName":"src/util/is-mergable.ts","type":"ts","text":"export function isMergeableObject(value: any): boolean {\r\n  return isNonNullObject(value) && isNotSpecial(value);\r\n}\r\n\r\nexport function isNonNullObject(value: any): boolean {\r\n  return !!value && typeof value === 'object';\r\n}\r\n\r\nexport function isNotSpecial(value: any): boolean {\r\n  const stringValue = Object.prototype.toString.call(value);\r\n  return stringValue !== '[object RegExp]'\r\n    && stringValue !== '[object Date]';\r\n}\r\n","declars":[{"kind":229,"kindString":"function","jsDoc":[],"isInternal":false,"modifiers":["export"],"name":"isMergeableObject","parameters":["value: any"],"type":"boolean","signature":"isMergeableObject(value: any): boolean"},{"kind":229,"kindString":"function","jsDoc":[],"isInternal":false,"modifiers":["export"],"name":"isNonNullObject","parameters":["value: any"],"type":"boolean","signature":"isNonNullObject(value: any): boolean"},{"kind":229,"kindString":"function","jsDoc":[],"isInternal":false,"modifiers":["export"],"name":"isNotSpecial","parameters":["value: any"],"type":"boolean","signature":"isNotSpecial(value: any): boolean"}]},{"fileName":"src/util/is-object.ts","type":"ts","text":"export function isObject(x: any): x is Object {\r\n  return x != null && typeof x === 'object';\r\n}\r\n","declars":[{"kind":229,"kindString":"function","jsDoc":[],"isInternal":false,"modifiers":["export"],"name":"isObject","parameters":["x: any"],"type":"x is Object","signature":"isObject(x: any): x is Object"}]},{"fileName":"src/util/is-string.ts","type":"ts","text":"export function isString(x: any): x is string {\r\n  return typeof x === 'string';\r\n}\r\n","declars":[{"kind":229,"kindString":"function","jsDoc":[],"isInternal":false,"modifiers":["export"],"name":"isString","parameters":["x: any"],"type":"x is string","signature":"isString(x: any): x is string"}]},{"fileName":"src/util/is-undefined.ts","type":"ts","text":"export function isUndefined(x: any): x is undefined {\r\n  return x === undefined || x === null;\r\n}\r\n","declars":[{"kind":229,"kindString":"function","jsDoc":[],"isInternal":false,"modifiers":["export"],"name":"isUndefined","parameters":["x: any"],"type":"x is undefined","signature":"isUndefined(x: any): x is undefined"}]},{"fileName":"src/util/merge-deep.ts","type":"ts","text":"import { isMergeableObject } from './is-mergable';\r\n\r\n// @todo add types\r\nfunction emptyTarget(val: any) {\r\n  return Array.isArray(val) ? [] : {};\r\n}\r\n\r\nfunction cloneIfNecessary(value: any, optionsArgument?: any): any {\r\n  const clone = optionsArgument && optionsArgument.clone === true;\r\n  return (clone && isMergeableObject(value)) ? mergeDeep(emptyTarget(value), value, optionsArgument) : value;\r\n}\r\n\r\nfunction defaultArrayMerge(target: any, source: any, optionsArgument: any) {\r\n  const destination = target.slice();\r\n  source.forEach(function (e: any, i: any) {\r\n    if (typeof destination[i] === 'undefined') {\r\n      destination[i] = cloneIfNecessary(e, optionsArgument);\r\n    } else if (isMergeableObject(e)) {\r\n      destination[i] = mergeDeep(target[i], e, optionsArgument);\r\n    } else if (target.indexOf(e) === -1) {\r\n      destination.push(cloneIfNecessary(e, optionsArgument));\r\n    }\r\n  });\r\n  return destination;\r\n}\r\n\r\nfunction mergeObject(target: any, source: any, optionsArgument?: any) {\r\n  const destination = {};\r\n  if (isMergeableObject(target)) {\r\n    Object.keys(target).forEach(function (key) {\r\n      destination[key] = cloneIfNecessary(target[key], optionsArgument);\r\n    });\r\n  }\r\n  Object.keys(source).forEach(function (key) {\r\n    if (!isMergeableObject(source[key]) || !target[key]) {\r\n      destination[key] = cloneIfNecessary(source[key], optionsArgument);\r\n    } else {\r\n      destination[key] = mergeDeep(target[key], source[key], optionsArgument);\r\n    }\r\n  });\r\n  return destination;\r\n}\r\n\r\nexport function mergeDeep(target: any, source: any, optionsArgument?: any) {\r\n  const sourceIsArray = Array.isArray(source);\r\n  const targetIsArray = Array.isArray(target);\r\n  const options = optionsArgument || {arrayMerge: defaultArrayMerge};\r\n  const sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\r\n  if (!sourceAndTargetTypesMatch) {\r\n    return cloneIfNecessary(source, optionsArgument);\r\n  } else if (sourceIsArray) {\r\n    const arrayMerge = options.arrayMerge || defaultArrayMerge;\r\n    return arrayMerge(target, source, optionsArgument);\r\n  } else {\r\n    return mergeObject(target, source, optionsArgument);\r\n  }\r\n}\r\n\r\nexport function mergeDeepAll(array: any[], optionsArgument?: any) {\r\n  if (!Array.isArray(array) || array.length < 2) {\r\n    throw new Error('first argument should be an array with at least two elements');\r\n  }\r\n  // we are sure there are at least 2 values, so it is safe to have no initial value\r\n  return array.reduce(function (prev, next) {\r\n    return mergeDeep(prev, next, optionsArgument);\r\n  });\r\n}\r\n","declars":[{"kind":229,"kindString":"function","jsDoc":[],"isInternal":false,"name":"emptyTarget","parameters":["val: any"],"signature":"emptyTarget(val: any)"},{"kind":229,"kindString":"function","jsDoc":[],"isInternal":false,"name":"cloneIfNecessary","parameters":["value: any","optionsArgument?: any"],"type":"any","signature":"cloneIfNecessary(value: any, optionsArgument?: any): any"},{"kind":229,"kindString":"function","jsDoc":[],"isInternal":false,"name":"defaultArrayMerge","parameters":["target: any","source: any","optionsArgument: any"],"signature":"defaultArrayMerge(target: any, source: any, optionsArgument: any)"},{"kind":229,"kindString":"function","jsDoc":[],"isInternal":false,"name":"mergeObject","parameters":["target: any","source: any","optionsArgument?: any"],"signature":"mergeObject(target: any, source: any, optionsArgument?: any)"},{"kind":229,"kindString":"function","jsDoc":[],"isInternal":false,"modifiers":["export"],"name":"mergeDeep","parameters":["target: any","source: any","optionsArgument?: any"],"signature":"mergeDeep(target: any, source: any, optionsArgument?: any)"},{"kind":229,"kindString":"function","jsDoc":[],"isInternal":false,"modifiers":["export"],"name":"mergeDeepAll","parameters":["array: any[]","optionsArgument?: any"],"signature":"mergeDeepAll(array: any[], optionsArgument?: any)"}]},{"fileName":"src/util/partial.ts","type":"ts","text":"export type Partial<T> = {[P in keyof T]?: T[P]};\r\nexport type DeepPartial<T> = {[P in keyof T]?: DeepPartial<T[P]>};\r\n","declars":[{"kind":232,"kindString":"typeAlias","jsDoc":[],"isInternal":false,"name":"Partial","typeParameters":["T"],"type":"{[P in keyof T]?: T[P]}","text":"export type Partial<T> = {[P in keyof T]?: T[P]};"},{"kind":232,"kindString":"typeAlias","jsDoc":[],"isInternal":false,"name":"DeepPartial","typeParameters":["T"],"type":"{[P in keyof T]?: DeepPartial<T[P]>}","text":"export type DeepPartial<T> = {[P in keyof T]?: DeepPartial<T[P]>};"}]},{"fileName":"src/util/util.ts","type":"ts","text":"export * from './is-array';\r\nexport * from './is-defined';\r\nexport * from './is-mergable';\r\nexport * from './is-object';\r\nexport * from './is-string';\r\nexport * from './is-undefined';\r\nexport * from './merge-deep';\r\nexport * from './partial';\r\nexport * from './uuid';\r\n","declars":[]},{"fileName":"src/util/uuid.ts","type":"ts","text":"/**\n * Random id generator.\n *\n * Generates GUID-like string, does not follow RFC4122.\n */\nexport function uuid(): string {\n  function s4() {\n    return Math.floor((1 + Math.random()) * 0x10000)\n      .toString(16)\n      .substring(1);\n  }\n\n  return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\n    s4() + '-' + s4() + s4() + s4();\n}\n","declars":[{"kind":229,"kindString":"function","jsDoc":[{"comment":"Random id generator.\n\nGenerates GUID-like string, does not follow RFC4122.","tags":[]}],"isInternal":false,"modifiers":["export"],"name":"uuid","parameters":[],"type":"string","signature":"uuid(): string"}]},{"fileName":"test.ts","type":"ts","text":"// This file is required by karma.conf.js and loads recursively all the .spec and framework files\r\n\r\nimport 'core-js/es7/reflect';\r\nimport 'zone.js/dist/zone';\r\nimport 'zone.js/dist/zone-testing';\r\nimport { getTestBed } from '@angular/core/testing';\r\nimport {\r\n  BrowserDynamicTestingModule,\r\n  platformBrowserDynamicTesting\r\n} from '@angular/platform-browser-dynamic/testing';\r\n\r\n// Unfortunately there's no typing for the `__karma__` variable. Just declare it as any.\r\ndeclare const __karma__: any;\r\ndeclare const require: any;\r\n\r\n// Prevent Karma from running prematurely.\r\n__karma__.loaded = function () {};\r\n\r\n// First, initialize the Angular testing environment.\r\ngetTestBed().initTestEnvironment(\r\n  BrowserDynamicTestingModule,\r\n  platformBrowserDynamicTesting()\r\n);\r\n// Then we find all the tests.\r\nconst context = require.context('./', true, /\\.spec\\.ts$/);\r\n// And load the modules.\r\ncontext.keys().map(context);\r\n// Finally, start Karma to run the tests.\r\n__karma__.start();\r\n","declars":[]},{"fileName":"test/utils/dispatch-events.ts","type":"ts","text":"/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { createFakeEvent, createKeyboardEvent, createMouseEvent, createTouchEvent } from './event-objects';\r\n\r\n/** Utility to dispatch any event on a Node. */\r\nexport function dispatchEvent(node: Node | Window, event: Event): Event {\r\n  node.dispatchEvent(event);\r\n  return event;\r\n}\r\n\r\n/** Shorthand to dispatch a fake event on a specified node. */\r\nexport function dispatchFakeEvent(node: Node | Window, type: string, canBubble?: boolean): Event {\r\n  return dispatchEvent(node, createFakeEvent(type, canBubble));\r\n}\r\n\r\n/** Shorthand to dispatch a keyboard event with a specified key code. */\r\nexport function dispatchKeyboardEvent(\r\n  node: Node | Window,\r\n  type: string,\r\n  keyCode: number,\r\n  extra: {\r\n    target?: Element,\r\n    ctrl?: boolean,\r\n    alt?: boolean,\r\n    shift?: boolean\r\n  } = {},\r\n): KeyboardEvent {\r\n  return dispatchEvent(node, createKeyboardEvent(type, keyCode, extra)) as KeyboardEvent;\r\n}\r\n\r\n/** Shorthand to dispatch a mouse event on the specified coordinates. */\r\nexport function dispatchMouseEvent(node: Node | Window, type: string, x = 0, y = 0,\r\n                                   event = createMouseEvent(type, x, y),\r\n): MouseEvent {\r\n  return dispatchEvent(node, event) as MouseEvent;\r\n}\r\n\r\n/** Shorthand to dispatch a touch event on the specified coordinates. */\r\nexport function dispatchTouchEvent(node: Node, type: string, x = 0, y = 0) {\r\n  return dispatchEvent(node, createTouchEvent(type, x, y));\r\n}\r\n","declars":[{"kind":229,"kindString":"function","jsDoc":[{"comment":"Utility to dispatch any event on a Node. ","tags":[]}],"isInternal":false,"modifiers":["export"],"name":"dispatchEvent","parameters":["node: Node | Window","event: Event"],"type":"Event","signature":"dispatchEvent(node: Node | Window, event: Event): Event"},{"kind":229,"kindString":"function","jsDoc":[{"comment":"Shorthand to dispatch a fake event on a specified node. ","tags":[]}],"isInternal":false,"modifiers":["export"],"name":"dispatchFakeEvent","parameters":["node: Node | Window","type: string","canBubble?: boolean"],"type":"Event","signature":"dispatchFakeEvent(node: Node | Window, type: string, canBubble?: boolean): Event"},{"kind":229,"kindString":"function","jsDoc":[{"comment":"Shorthand to dispatch a keyboard event with a specified key code. ","tags":[]}],"isInternal":false,"modifiers":["export"],"name":"dispatchKeyboardEvent","parameters":["node: Node | Window","type: string","keyCode: number","extra: {\r\n    target?: Element,\r\n    ctrl?: boolean,\r\n    alt?: boolean,\r\n    shift?: boolean\r\n  } = {}"],"type":"KeyboardEvent","signature":"dispatchKeyboardEvent(node: Node | Window, type: string, keyCode: number, extra: {\r\n    target?: Element,\r\n    ctrl?: boolean,\r\n    alt?: boolean,\r\n    shift?: boolean\r\n  } = {}): KeyboardEvent"},{"kind":229,"kindString":"function","jsDoc":[{"comment":"Shorthand to dispatch a mouse event on the specified coordinates. ","tags":[]}],"isInternal":false,"modifiers":["export"],"name":"dispatchMouseEvent","parameters":["node: Node | Window","type: string","x = 0","y = 0","event = createMouseEvent(type, x, y)"],"type":"MouseEvent","signature":"dispatchMouseEvent(node: Node | Window, type: string, x = 0, y = 0, event = createMouseEvent(type, x, y)): MouseEvent"},{"kind":229,"kindString":"function","jsDoc":[{"comment":"Shorthand to dispatch a touch event on the specified coordinates. ","tags":[]}],"isInternal":false,"modifiers":["export"],"name":"dispatchTouchEvent","parameters":["node: Node","type: string","x = 0","y = 0"],"signature":"dispatchTouchEvent(node: Node, type: string, x = 0, y = 0)"}]},{"fileName":"test/utils/event-objects.ts","type":"ts","text":"/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Creates a browser MouseEvent with the specified options. */\r\nexport function createMouseEvent(type: string, x = 0, y = 0) {\r\n  const event = document.createEvent('MouseEvent');\r\n  event.initMouseEvent(type,\r\n    false, /* canBubble */\r\n    false, /* cancelable */\r\n    window, /* view */\r\n    0, /* detail */\r\n    x, /* screenX */\r\n    y, /* screenY */\r\n    x, /* clientX */\r\n    y, /* clientY */\r\n    false, /* ctrlKey */\r\n    false, /* altKey */\r\n    false, /* shiftKey */\r\n    false, /* metaKey */\r\n    0, /* button */\r\n    null /* relatedTarget */);\r\n  return event;\r\n}\r\n\r\n/** Creates a browser TouchEvent with the specified pointer coordinates. */\r\nexport function createTouchEvent(type: string, pageX = 0, pageY = 0) {\r\n  // In favor of creating events that work for most of the browsers, the event is created\r\n  // as a basic UI Event. The necessary details for the event will be set manually.\r\n  const event = document.createEvent('UIEvent');\r\n  const touchDetails = {pageX, pageY};\r\n  event.initUIEvent(type, true, true, window, 0);\r\n  // Most of the browsers don't have a \"initTouchEvent\" method that can be used to define\r\n  // the touch details.\r\n  Object.defineProperties(event, {\r\n    touches: {value: [touchDetails]},\r\n  });\r\n  return event;\r\n}\r\n\r\n/** Dispatches a keydown event from an element. */\r\nexport function createKeyboardEvent(\r\n  type: string,\r\n  keyCode: number,\r\n  extra: {\r\n    target?: Element,\r\n    key?: string,\r\n    ctrl?: boolean,\r\n    alt?: boolean,\r\n    shift?: boolean\r\n  } = {},\r\n) {\r\n  const event = document.createEvent('KeyboardEvent') as any;\r\n  // Firefox does not support `initKeyboardEvent`, but supports `initKeyEvent`.\r\n  const initEventFn = (event.initKeyEvent || event.initKeyboardEvent).bind(event);\r\n  const originalPreventDefault = event.preventDefault;\r\n  initEventFn(type, true, true, window, 0, 0, 0, 0, 0, keyCode);\r\n  // Webkit Browsers don't set the keyCode when calling the init function.\r\n  // See related bug https://bugs.webkit.org/show_bug.cgi?id=16735\r\n  Object.defineProperties(event, {\r\n    keyCode: {get: () => keyCode},\r\n    key: {get: () => extra.key},\r\n    target: {get: () => extra.target},\r\n    ctrlKey: {get: () => extra.ctrl},\r\n    altKey: {get: () => extra.alt},\r\n    shiftKey: {get: () => extra.shift},\r\n  });\r\n  // IE won't set `defaultPrevented` on synthetic events so we need to do it manually.\r\n  event.preventDefault = function () {\r\n    Object.defineProperty(event, 'defaultPrevented', {get: () => true});\r\n    return originalPreventDefault.apply(this, arguments);\r\n  };\r\n  return event;\r\n}\r\n\r\n/** Creates a fake event object with any desired event type. */\r\nexport function createFakeEvent(type: string, canBubble = true, cancelable = true) {\r\n  const event = document.createEvent('Event');\r\n  event.initEvent(type, canBubble, cancelable);\r\n  return event;\r\n}\r\n","declars":[{"kind":229,"kindString":"function","jsDoc":[{"tags":[{"name":"license","value":"Copyright Google LLC All Rights Reserved.\r\rUse of this source code is governed by an MIT-style license that can be\rfound in the LICENSE file at https://angular.io/license"}]},{"comment":"Creates a browser MouseEvent with the specified options. ","tags":[]}],"isInternal":false,"modifiers":["export"],"name":"createMouseEvent","parameters":["type: string","x = 0","y = 0"],"signature":"createMouseEvent(type: string, x = 0, y = 0)"},{"kind":229,"kindString":"function","jsDoc":[{"comment":"Creates a browser TouchEvent with the specified pointer coordinates. ","tags":[]}],"isInternal":false,"modifiers":["export"],"name":"createTouchEvent","parameters":["type: string","pageX = 0","pageY = 0"],"signature":"createTouchEvent(type: string, pageX = 0, pageY = 0)"},{"kind":229,"kindString":"function","jsDoc":[{"comment":"Dispatches a keydown event from an element. ","tags":[]}],"isInternal":false,"modifiers":["export"],"name":"createKeyboardEvent","parameters":["type: string","keyCode: number","extra: {\r\n    target?: Element,\r\n    key?: string,\r\n    ctrl?: boolean,\r\n    alt?: boolean,\r\n    shift?: boolean\r\n  } = {}"],"signature":"createKeyboardEvent(type: string, keyCode: number, extra: {\r\n    target?: Element,\r\n    key?: string,\r\n    ctrl?: boolean,\r\n    alt?: boolean,\r\n    shift?: boolean\r\n  } = {})"},{"kind":229,"kindString":"function","jsDoc":[{"comment":"Creates a fake event object with any desired event type. ","tags":[]}],"isInternal":false,"modifiers":["export"],"name":"createFakeEvent","parameters":["type: string","canBubble = true","cancelable = true"],"signature":"createFakeEvent(type: string, canBubble = true, cancelable = true)"}]},{"fileName":"docs/CONTRIBUTING.md","type":"md","text":"---\ntitle: Contributing\n---\n\n# Contributing to ngx-kit\n\nInformation for ngx-kit developers.\n\n\n\n## Docs\n\n* Create README.md for any module.\n* Write jsDoc for services, components and directives.\n  * Mark component/directive methods with `@internal` in jsDoc, if you want to not display method in website documentation.\n  * Add service public methods and props will be displayed in website documentation.\n  * Use `@apiOrder` in jsDoc for sort services/components/directives in website documentation.  \n\n\n\n## Best Practices\n\nCommon component delivered to a project by npm as a package. It means that you can't modify it's code directly.\n  \nRemember in most cases ngx-kit common components used for creating ui kits that will be used by end user. \n\n### Do not hide any elements or components inside \n\nYou should give direct access to all components or html elements. It is important for easy modification, event binding, ARIA customizing. \n\n### Service better then directive or component\n\nIf you could place some logic inside service - do it. User should provide service by local component's providers.\n\nFor example `kit-overlay-position.service`. It could be some wrapper-component with same functionality, but result code would be redundant. \n\n\n\n## Commit Message Guidelines\n\n### Commit Message Format\n\nEach commit message consists of a header, a body and a footer. The header has a special format that includes a type, a scope and a subject:\n\n```\n<type>(<scope>): <subject>\n<BLANK LINE>\n<body>\n<BLANK LINE>\n<footer>\n```\n\nThe header is mandatory and the scope of the header is optional.\n\nFooter should contain a closing reference to an issue if any.\n\n### Type\n\nMust be one of the following:\n\n* **build**: Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)\n* **ci**: Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)\n* **docs**: Documentation or demo changes\n* **feat**: A new feature\n* **fix**: A bug fix\n* **perf**: A code change that improves performance\n* **refactor**: A code change that neither fixes a bug nor adds a feature\n* **style**: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)\n* **test**: Adding missing tests or correcting existing tests\n* **chore**\n\n### Scope\n\nThe scope should be the name of the package (and module if exists) affected (**core/common**, **collection/date-picker**, **website** etc).\n\n### Subject\n\nThe subject contains succinct description of the change:\n\n* use the imperative, present tense: \"change\" not \"changed\" nor \"changes\"\n* don't capitalize first letter\n* no dot (.) at the end\n\n### Body\n\nJust as in the subject, use the imperative, present tense: \"change\" not \"changed\" nor \"changes\". The body should include the motivation for the change and contrast this with previous behavior.\n\n### Footer\n\nThe footer should contain any information about Breaking Changes and is also the place to reference GitHub issues that this commit Closes.\n\n* \"Closes #ID\"\n* \"PR Close #ID\"\n\nBreaking Changes should start with the word BREAKING CHANGE: with a space or two newlines. The rest of the commit message is then used for this.\n","name":"CONTRIBUTING","content":"\n# Contributing to ngx-kit\n\nInformation for ngx-kit developers.\n\n\n\n## Docs\n\n* Create README.md for any module.\n* Write jsDoc for services, components and directives.\n  * Mark component/directive methods with `@internal` in jsDoc, if you want to not display method in website documentation.\n  * Add service public methods and props will be displayed in website documentation.\n  * Use `@apiOrder` in jsDoc for sort services/components/directives in website documentation.  \n\n\n\n## Best Practices\n\nCommon component delivered to a project by npm as a package. It means that you can't modify it's code directly.\n  \nRemember in most cases ngx-kit common components used for creating ui kits that will be used by end user. \n\n### Do not hide any elements or components inside \n\nYou should give direct access to all components or html elements. It is important for easy modification, event binding, ARIA customizing. \n\n### Service better then directive or component\n\nIf you could place some logic inside service - do it. User should provide service by local component's providers.\n\nFor example `kit-overlay-position.service`. It could be some wrapper-component with same functionality, but result code would be redundant. \n\n\n\n## Commit Message Guidelines\n\n### Commit Message Format\n\nEach commit message consists of a header, a body and a footer. The header has a special format that includes a type, a scope and a subject:\n\n```\n<type>(<scope>): <subject>\n<BLANK LINE>\n<body>\n<BLANK LINE>\n<footer>\n```\n\nThe header is mandatory and the scope of the header is optional.\n\nFooter should contain a closing reference to an issue if any.\n\n### Type\n\nMust be one of the following:\n\n* **build**: Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)\n* **ci**: Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)\n* **docs**: Documentation or demo changes\n* **feat**: A new feature\n* **fix**: A bug fix\n* **perf**: A code change that improves performance\n* **refactor**: A code change that neither fixes a bug nor adds a feature\n* **style**: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)\n* **test**: Adding missing tests or correcting existing tests\n* **chore**\n\n### Scope\n\nThe scope should be the name of the package (and module if exists) affected (**core/common**, **collection/date-picker**, **website** etc).\n\n### Subject\n\nThe subject contains succinct description of the change:\n\n* use the imperative, present tense: \"change\" not \"changed\" nor \"changes\"\n* don't capitalize first letter\n* no dot (.) at the end\n\n### Body\n\nJust as in the subject, use the imperative, present tense: \"change\" not \"changed\" nor \"changes\". The body should include the motivation for the change and contrast this with previous behavior.\n\n### Footer\n\nThe footer should contain any information about Breaking Changes and is also the place to reference GitHub issues that this commit Closes.\n\n* \"Closes #ID\"\n* \"PR Close #ID\"\n\nBreaking Changes should start with the word BREAKING CHANGE: with a space or two newlines. The rest of the commit message is then used for this.\n","meta":{"title":"Contributing"}},{"fileName":"docs/DEV.md","type":"md","text":"---\ntitle: Dev\n---\n\n# Dev\n\nInformation for ngx-kit developers.\n\n\n## Generate CHANGELOG\n\n```\nconventional-changelog -p angular -i CHANGELOG.md -s -r 0\n```\n","name":"DEV","content":"\n# Dev\n\nInformation for ngx-kit developers.\n\n\n## Generate CHANGELOG\n\n```\nconventional-changelog -p angular -i CHANGELOG.md -s -r 0\n```\n","meta":{"title":"Dev"}},{"fileName":"README.md","type":"md","text":"---\ntitle: Introduction\napiPriority: 1\n---\n\n# Ngx-kit Core\n\nLow level components and services for creating Angular applications.\n\nUsed in [@ngx-kit/collection](https://ngx-kit.com/collection) components.\n\n\n## Features\n\n* Angular 6+ support\n* AOT support\n* Server-rendering support\n* Free and open-source\n* Setup via NPM\n\n\n## Installation\n\n```\nnpm install @ngx-kit/core --save\n```\n\nOr add full ngx-kit setup:\n\n```\nng add @ngx-kit/core\n```\n\n\n## Links\n\n* [github](https://github.com/ngx-kit/ngx-kit)\n* [website](https://ngx-kit.com)\n* [twitter](https://twitter.com/ngxkit)\n","name":"README","content":"\n# Ngx-kit Core\n\nLow level components and services for creating Angular applications.\n\nUsed in [@ngx-kit/collection](https://ngx-kit.com/collection) components.\n\n\n## Features\n\n* Angular 6+ support\n* AOT support\n* Server-rendering support\n* Free and open-source\n* Setup via NPM\n\n\n## Installation\n\n```\nnpm install @ngx-kit/core --save\n```\n\nOr add full ngx-kit setup:\n\n```\nng add @ngx-kit/core\n```\n\n\n## Links\n\n* [github](https://github.com/ngx-kit/ngx-kit)\n* [website](https://ngx-kit.com)\n* [twitter](https://twitter.com/ngxkit)\n","meta":{"title":"Introduction","apiPriority":1}},{"fileName":"src/kit-check/README.md","type":"md","text":"### Scope\n\n* Button groups\n* Toolbars\n","name":"README","content":"### Scope\n\n* Button groups\n* Toolbars\n","meta":{}},{"fileName":"src/kit-class/README.md","type":"md","text":"Apply classes to an element.\n\n### Why\n\n1. Default Angular bindings (`[class.x]` and `[ngClass]`) do not allow to bind dynamic class-names based on `boolean`/`string` values.\n\n2. `@HostBinding` can not provide `ngClass` functionality, if we want to bind classes from component.\n","name":"README","content":"Apply classes to an element.\n\n### Why\n\n1. Default Angular bindings (`[class.x]` and `[ngClass]`) do not allow to bind dynamic class-names based on `boolean`/`string` values.\n\n2. `@HostBinding` can not provide `ngClass` functionality, if we want to bind classes from component.\n","meta":{}},{"fileName":"src/kit-collapse/README.md","type":"md","text":"### Scope\n \n* Accordions\n* Collapsible menus\n\n\n### Usage\n\nImport `KitCollapseModule`.\n\nFor example you have `ui-menu`, `ui-section` component and want to collapse some div inside section.\n\nProvide `KitCollapseHostService` inside `ui-menu` and `KitCollapseItemService` inside `ui-section`. \n\n```html\n<ui-menu>\n  <ui-section>\n    <div title>Section 1 title</div>\n    <div>Section 1 body</div>\n  </ui-section>\n  <ui-section>\n    <div title>Section 2 title</div>\n    <div>Section 2 body</div>\n  </ui-section>\n</ui-menu>\n```\n\n##### ui-section.component.html\n\n```html\n<div (click)=\"toggle()\">\n  <ng-content select=\"[title]\"></ng-content>\n</div>\n<div *kitCollapse>\n  <ng-content></ng-content>\n</div>\n```\n\nUse `KitCollapseItemService` for set state of collapse.\n\n##### ui-section.component.ts\n\n```typescript\nproviders: [KitCollapseItemService]\n...\nconstructor(private itemService: KitCollapseItemService) {\n}\n...\ntoggle() {\n  this.itemService.toggle();\n}\n```\n\n\n### Example\n\n* collection:accordion - [sources](https://github.com/ngx-kit/ngx-kit/tree/master/packages/collection/lib/ui-accordion), [demo](http://ngx-kit.com/collection/module/ui-accordion) \n* collection:vertical-menu - [sources](https://github.com/ngx-kit/ngx-kit/tree/master/packages/collection/lib/ui-vertical-menu), [demo](http://ngx-kit.com/collection/module/ui-vertical-menu) \n","name":"README","content":"### Scope\n \n* Accordions\n* Collapsible menus\n\n\n### Usage\n\nImport `KitCollapseModule`.\n\nFor example you have `ui-menu`, `ui-section` component and want to collapse some div inside section.\n\nProvide `KitCollapseHostService` inside `ui-menu` and `KitCollapseItemService` inside `ui-section`. \n\n```html\n<ui-menu>\n  <ui-section>\n    <div title>Section 1 title</div>\n    <div>Section 1 body</div>\n  </ui-section>\n  <ui-section>\n    <div title>Section 2 title</div>\n    <div>Section 2 body</div>\n  </ui-section>\n</ui-menu>\n```\n\n##### ui-section.component.html\n\n```html\n<div (click)=\"toggle()\">\n  <ng-content select=\"[title]\"></ng-content>\n</div>\n<div *kitCollapse>\n  <ng-content></ng-content>\n</div>\n```\n\nUse `KitCollapseItemService` for set state of collapse.\n\n##### ui-section.component.ts\n\n```typescript\nproviders: [KitCollapseItemService]\n...\nconstructor(private itemService: KitCollapseItemService) {\n}\n...\ntoggle() {\n  this.itemService.toggle();\n}\n```\n\n\n### Example\n\n* collection:accordion - [sources](https://github.com/ngx-kit/ngx-kit/tree/master/packages/collection/lib/ui-accordion), [demo](http://ngx-kit.com/collection/module/ui-accordion) \n* collection:vertical-menu - [sources](https://github.com/ngx-kit/ngx-kit/tree/master/packages/collection/lib/ui-vertical-menu), [demo](http://ngx-kit.com/collection/module/ui-vertical-menu) \n","meta":{}},{"fileName":"src/kit-date-picker/README.md","type":"md","text":"Handle complex logic of date-picker.\n\n### Why\n\nDate-picker UI-component should be simple.\n","name":"README","content":"Handle complex logic of date-picker.\n\n### Why\n\nDate-picker UI-component should be simple.\n","meta":{}},{"fileName":"src/kit-focus-manager/README.md","type":"md","text":"Control focus like a boss.\n\n### Scope\n \n* dialogs/popups/modals\n* complex forms and components\n","name":"README","content":"Control focus like a boss.\n\n### Scope\n \n* dialogs/popups/modals\n* complex forms and components\n","meta":{}},{"fileName":"src/kit-form-field/README.md","type":"md","text":"### Scope\n\n* Forms styling and errors handling\n","name":"README","content":"### Scope\n\n* Forms styling and errors handling\n","meta":{}},{"fileName":"src/kit-icons/README.md","type":"md","text":"# Icons\n\nIcons registry and component for svg icons. \n\n\n### Usage\n\nAdd icons to the registry:\n\n```typescript\n// add one icon (define url)\nthis.iconsRegistry.add({name: 'star', url: '/assets/icons/star.svg'});\n// or define xml\nthis.iconsRegistry.add({name: 'cloud', xml: '<svg xmlns=\"http://www.w3.org/2000/svg\" ...'});\n\n// or a set of icons\nthis.iconsRegistry.add([\n  {name: 'star', url: '/assets/icons/star.svg'},\n  {name: 'cloud', xml: '<svg xmlns=\"http://www.w3.org/2000/svg\" ...'},\n]);\n```\n\nAnd then insert an icon:\n```html\n<kit-icon name=\"star\"></kit-icon>\n```\n\n#### Size\n\nBy default icons have `1em` height and proper shift to looking nice in a text line.\n\nAlso you can define any size:\n\n```html\n// One value for width and height\n<kit-icon name=\"star\" size=\"40px\"></kit-icon>\n\n// Separated values for width and height\n<kit-icon name=\"cloud\" [size]=\"['80px', '40px']\"></kit-icon>\n```\n\n#### Color\n\nBy defaul fill color is `currentcolor` (use the text-color of parent element).\n\nYou can define fill color:\n\n```html\n<kit-icon name=\"star\" color=\"#ff0000\"></kit-icon>\n```\n\n#### A11y\n\nUse `title` and `desc` properties to add `<title>` and `<desc>` elements into `<svg>`. Also binds `aria-labeledby` attribute that points to the elements.\n\n\n#### Intersection load\n\nIcon can load and render only after viewport intersection, set `intersectionLoad` param to `true`.\n\n\n#### Server-rendering\n\nDo not forget to define full url-path to files:\n\n```typescript\nthis.iconsRegistry.add([\n  {name: 'search', url: `${environment.assetsUrl}/icons/search.svg`},\n  ...\n]);\n```\n","name":"README","content":"# Icons\n\nIcons registry and component for svg icons. \n\n\n### Usage\n\nAdd icons to the registry:\n\n```typescript\n// add one icon (define url)\nthis.iconsRegistry.add({name: 'star', url: '/assets/icons/star.svg'});\n// or define xml\nthis.iconsRegistry.add({name: 'cloud', xml: '<svg xmlns=\"http://www.w3.org/2000/svg\" ...'});\n\n// or a set of icons\nthis.iconsRegistry.add([\n  {name: 'star', url: '/assets/icons/star.svg'},\n  {name: 'cloud', xml: '<svg xmlns=\"http://www.w3.org/2000/svg\" ...'},\n]);\n```\n\nAnd then insert an icon:\n```html\n<kit-icon name=\"star\"></kit-icon>\n```\n\n#### Size\n\nBy default icons have `1em` height and proper shift to looking nice in a text line.\n\nAlso you can define any size:\n\n```html\n// One value for width and height\n<kit-icon name=\"star\" size=\"40px\"></kit-icon>\n\n// Separated values for width and height\n<kit-icon name=\"cloud\" [size]=\"['80px', '40px']\"></kit-icon>\n```\n\n#### Color\n\nBy defaul fill color is `currentcolor` (use the text-color of parent element).\n\nYou can define fill color:\n\n```html\n<kit-icon name=\"star\" color=\"#ff0000\"></kit-icon>\n```\n\n#### A11y\n\nUse `title` and `desc` properties to add `<title>` and `<desc>` elements into `<svg>`. Also binds `aria-labeledby` attribute that points to the elements.\n\n\n#### Intersection load\n\nIcon can load and render only after viewport intersection, set `intersectionLoad` param to `true`.\n\n\n#### Server-rendering\n\nDo not forget to define full url-path to files:\n\n```typescript\nthis.iconsRegistry.add([\n  {name: 'search', url: `${environment.assetsUrl}/icons/search.svg`},\n  ...\n]);\n```\n","meta":{}},{"fileName":"src/kit-intersection/README.md","type":"md","text":"`IntersectionObserver` module.\n\nModule uses Intersection Observer API, more info: https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\n","name":"README","content":"`IntersectionObserver` module.\n\nModule uses Intersection Observer API, more info: https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\n","meta":{}},{"fileName":"src/kit-loading/README.md","type":"md","text":"### Scope\n\n* Loading bar\n* Global loading spinner\n* Local progress indication\n","name":"README","content":"### Scope\n\n* Loading bar\n* Global loading spinner\n* Local progress indication\n","meta":{}},{"fileName":"src/kit-mq/README.md","type":"md","text":"`MediaQuery` module.\n\nModule uses `matchMedia` browser API, more info: [https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia)\n","name":"README","content":"`MediaQuery` module.\n\nModule uses `matchMedia` browser API, more info: [https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia)\n","meta":{}},{"fileName":"src/kit-outside-click/README.md","type":"md","text":"### Scope\n\n* Popups and dropdowns\n* Custom blur handlers\n","name":"README","content":"### Scope\n\n* Popups and dropdowns\n* Custom blur handlers\n","meta":{}},{"fileName":"src/kit-overlay/README.md","type":"md","text":"Service for hosting elements/components in a layer is above of the page content.\n\n### Scope\n \n* Modals\n* Tooltips\n* Dropdowns\n\n\n### Usage\n\n#### Use `*kitOverlay` directive\n\nAny element/component could be projected.\n\n```html\n<div *kitOverlay=\"display\">\n  Some content\n</div>\n```\n\n`*kitOverlay` - expects a boolean expression, like `*ngIf`.\n\n#### Toggle\n\nInstead of creating additional variable in a component and custom handler, you can handle click/hover by `kitOverlayToggle` directive.\n\n`KitOverlayToggleDirective` also implements `KitAnchor` interface.\n\n```html\n<button kitOverlayToggle #toggle=\"toggle\">Dropdown here</button>\n<ui-dropdown *kitOverlay=\"toggle.state\">\n             ...\n</ui-dropdown>\n```\n\n\n#### Use `KitOverlayService`\n\n```typescript\nconst ref = this.overlayService.hostComponent({component: DemoOverlayComponent});\n```\n\n\n#### Data-binding\n\nFor service-hosted components we have methods for communication with component instance.\n\n##### input\n\n```typescript\nexport class OverlayComponent {\n  @Input() field: string;\n}\n```\n\n```typescript\nconst ref = this.overlayService.hostComponent({component: OverlayComponent});\nref.input({field: 'value'});\n```\n\n`input` method passes value to the defined field and calls `ngOnChanges` life-cycle hook (if needed).\n\n##### output\n\n```typescript\nexport class OverlayComponent {\n  @Output() event = new EventEmitter<any>();\n}\n```\n\n```typescript\nconst ref = this.overlayService.hostComponent({component: OverlayComponent});\nref.instance.event.subscribe((value: any) => {\n});\n```\n\n\n#### Host components in Lazy Modules\n\nYou could get error `No component factory found for NameOfComponent` inside Lazy Modules. To solve the problem just provide `KitOverlayService` in this module.\n\n\n\n### Example\n\n* collection:custom-select - [sources](https://github.com/ngx-kit/ngx-kit/tree/master/packages/collection/lib/ui-custom-select), [demo](http://ngx-kit.com/collection/module/ui-custom-select) \n* collection:modal - [sources](https://github.com/ngx-kit/ngx-kit/tree/master/packages/collection/lib/ui-modal), [demo](http://ngx-kit.com/collection/module/ui-modal) \n* collection:tooltip - [sources](https://github.com/ngx-kit/ngx-kit/tree/master/packages/collection/lib/ui-tooltip), [demo](http://ngx-kit.com/collection/module/ui-tooltip) \n","name":"README","content":"Service for hosting elements/components in a layer is above of the page content.\n\n### Scope\n \n* Modals\n* Tooltips\n* Dropdowns\n\n\n### Usage\n\n#### Use `*kitOverlay` directive\n\nAny element/component could be projected.\n\n```html\n<div *kitOverlay=\"display\">\n  Some content\n</div>\n```\n\n`*kitOverlay` - expects a boolean expression, like `*ngIf`.\n\n#### Toggle\n\nInstead of creating additional variable in a component and custom handler, you can handle click/hover by `kitOverlayToggle` directive.\n\n`KitOverlayToggleDirective` also implements `KitAnchor` interface.\n\n```html\n<button kitOverlayToggle #toggle=\"toggle\">Dropdown here</button>\n<ui-dropdown *kitOverlay=\"toggle.state\">\n             ...\n</ui-dropdown>\n```\n\n\n#### Use `KitOverlayService`\n\n```typescript\nconst ref = this.overlayService.hostComponent({component: DemoOverlayComponent});\n```\n\n\n#### Data-binding\n\nFor service-hosted components we have methods for communication with component instance.\n\n##### input\n\n```typescript\nexport class OverlayComponent {\n  @Input() field: string;\n}\n```\n\n```typescript\nconst ref = this.overlayService.hostComponent({component: OverlayComponent});\nref.input({field: 'value'});\n```\n\n`input` method passes value to the defined field and calls `ngOnChanges` life-cycle hook (if needed).\n\n##### output\n\n```typescript\nexport class OverlayComponent {\n  @Output() event = new EventEmitter<any>();\n}\n```\n\n```typescript\nconst ref = this.overlayService.hostComponent({component: OverlayComponent});\nref.instance.event.subscribe((value: any) => {\n});\n```\n\n\n#### Host components in Lazy Modules\n\nYou could get error `No component factory found for NameOfComponent` inside Lazy Modules. To solve the problem just provide `KitOverlayService` in this module.\n\n\n\n### Example\n\n* collection:custom-select - [sources](https://github.com/ngx-kit/ngx-kit/tree/master/packages/collection/lib/ui-custom-select), [demo](http://ngx-kit.com/collection/module/ui-custom-select) \n* collection:modal - [sources](https://github.com/ngx-kit/ngx-kit/tree/master/packages/collection/lib/ui-modal), [demo](http://ngx-kit.com/collection/module/ui-modal) \n* collection:tooltip - [sources](https://github.com/ngx-kit/ngx-kit/tree/master/packages/collection/lib/ui-tooltip), [demo](http://ngx-kit.com/collection/module/ui-tooltip) \n","meta":{}},{"fileName":"src/kit-slide/README.md","type":"md","text":"### Scope\n \n* Carousel, image slider\n* Tabs component\n","name":"README","content":"### Scope\n \n* Carousel, image slider\n* Tabs component\n","meta":{}},{"fileName":"src/kit-style/README.md","type":"md","text":"### Why\n\nIn a cases when we need to bind from a component, but `@HostBinding` has limited functionality.\n","name":"README","content":"### Why\n\nIn a cases when we need to bind from a component, but `@HostBinding` has limited functionality.\n","meta":{}},{"fileName":"src/kit-value-accessor/README.md","type":"md","text":"### Why\n\nBy default you can't prevent `ngModel` updating, if user inputs new data.\n\n\n### Scope\n\n* Input components\n* Input filters and masks \n","name":"README","content":"### Why\n\nBy default you can't prevent `ngModel` updating, if user inputs new data.\n\n\n### Scope\n\n* Input components\n* Input filters and masks \n","meta":{}}],"filesMap":{"index.ts":"index.ts","public_api.ts":"public_api.ts","src":{"kit-anchor":{"kit-anchor.directive.ts":"src/kit-anchor/kit-anchor.directive.ts","kit-anchor.module.ts":"src/kit-anchor/kit-anchor.module.ts","kit-anchor.ts":"src/kit-anchor/kit-anchor.ts","meta.ts":"src/kit-anchor/meta.ts"},"kit-check":{"kit-check.directive.ts":"src/kit-check/kit-check.directive.ts","kit-check.module.ts":"src/kit-check/kit-check.module.ts","kit-check.ts":"src/kit-check/kit-check.ts","README.md":"src/kit-check/README.md"},"kit-class":{"kit-class.directive.ts":"src/kit-class/kit-class.directive.ts","kit-class.module.ts":"src/kit-class/kit-class.module.ts","kit-class.service.ts":"src/kit-class/kit-class.service.ts","kit-class.ts":"src/kit-class/kit-class.ts","meta.ts":"src/kit-class/meta.ts","README.md":"src/kit-class/README.md"},"kit-collapse":{"kit-collapse-host.service.ts":"src/kit-collapse/kit-collapse-host.service.ts","kit-collapse-item.service.ts":"src/kit-collapse/kit-collapse-item.service.ts","kit-collapse.module.ts":"src/kit-collapse/kit-collapse.module.ts","kit-collapse.ts":"src/kit-collapse/kit-collapse.ts","kit-collapse":{"kit-collapse.directive.ts":"src/kit-collapse/kit-collapse/kit-collapse.directive.ts"},"meta.ts":"src/kit-collapse/meta.ts","README.md":"src/kit-collapse/README.md"},"kit-date-picker":{"kit-date-picker.service.ts":"src/kit-date-picker/kit-date-picker.service.ts","kit-date-picker.ts":"src/kit-date-picker/kit-date-picker.ts","meta.ts":"src/kit-date-picker/meta.ts","README.md":"src/kit-date-picker/README.md"},"kit-event-manager":{"kit-event-manager.service.ts":"src/kit-event-manager/kit-event-manager.service.ts","kit-event-manager.ts":"src/kit-event-manager/kit-event-manager.ts","meta.ts":"src/kit-event-manager/meta.ts"},"kit-focus-listener":{"kit-focus-listener.service.ts":"src/kit-focus-listener/kit-focus-listener.service.ts","kit-focus-listener.ts":"src/kit-focus-listener/kit-focus-listener.ts"},"kit-focus-manager":{"kit-focus-manager-registry.service.ts":"src/kit-focus-manager/kit-focus-manager-registry.service.ts","kit-focus-manager.module.ts":"src/kit-focus-manager/kit-focus-manager.module.ts","kit-focus-manager.service.ts":"src/kit-focus-manager/kit-focus-manager.service.ts","kit-focus-manager.ts":"src/kit-focus-manager/kit-focus-manager.ts","kit-focus-trap":{"kit-focus-trap.directive.ts":"src/kit-focus-manager/kit-focus-trap/kit-focus-trap.directive.ts"},"kit-focus":{"kit-focus.directive.ts":"src/kit-focus-manager/kit-focus/kit-focus.directive.ts"},"README.md":"src/kit-focus-manager/README.md"},"kit-form-field":{"kit-form-error":{"kit-form-error.directive.ts":"src/kit-form-field/kit-form-error/kit-form-error.directive.ts"},"kit-form-field.module.ts":"src/kit-form-field/kit-form-field.module.ts","kit-form-field.service.ts":"src/kit-form-field/kit-form-field.service.ts","kit-form-field.ts":"src/kit-form-field/kit-form-field.ts","kit-ng-control":{"kit-ng-control.directive.ts":"src/kit-form-field/kit-ng-control/kit-ng-control.directive.ts"},"README.md":"src/kit-form-field/README.md"},"kit-form-touch":{"kit-form-touch.module.ts":"src/kit-form-touch/kit-form-touch.module.ts","kit-form-touch.ts":"src/kit-form-touch/kit-form-touch.ts","kit-form-touch":{"kit-form-touch.directive.ts":"src/kit-form-touch/kit-form-touch/kit-form-touch.directive.ts"}},"kit-hammer":{"kit-hammer-provider.ts":"src/kit-hammer/kit-hammer-provider.ts","kit-hammer.ts":"src/kit-hammer/kit-hammer.ts","meta.ts":"src/kit-hammer/meta.ts"},"kit-icons":{"kit-icon":{"kit-icon.component.ts":"src/kit-icons/kit-icon/kit-icon.component.ts"},"kit-icons-registry.service.ts":"src/kit-icons/kit-icons-registry.service.ts","kit-icons.module.ts":"src/kit-icons/kit-icons.module.ts","kit-icons.ts":"src/kit-icons/kit-icons.ts","meta.ts":"src/kit-icons/meta.ts","README.md":"src/kit-icons/README.md"},"kit-input-date":{"kit-input-date.directive.ts":"src/kit-input-date/kit-input-date.directive.ts","kit-input-date.module.ts":"src/kit-input-date/kit-input-date.module.ts","kit-input-date.ts":"src/kit-input-date/kit-input-date.ts"},"kit-intersection":{"kit-intersection.module.ts":"src/kit-intersection/kit-intersection.module.ts","kit-intersection.service.ts":"src/kit-intersection/kit-intersection.service.ts","kit-intersection.ts":"src/kit-intersection/kit-intersection.ts","kit-intersection":{"kit-intersection.directive.ts":"src/kit-intersection/kit-intersection/kit-intersection.directive.ts"},"README.md":"src/kit-intersection/README.md"},"kit-loading":{"kit-loading-progress.ts":"src/kit-loading/kit-loading-progress.ts","kit-loading.service.ts":"src/kit-loading/kit-loading.service.ts","kit-loading.ts":"src/kit-loading/kit-loading.ts","meta.ts":"src/kit-loading/meta.ts","README.md":"src/kit-loading/README.md"},"kit-modal":{"kit-modal-backdrop":{"kit-modal-backdrop.component.ts":"src/kit-modal/kit-modal-backdrop/kit-modal-backdrop.component.ts"},"kit-modal-ref.ts":"src/kit-modal/kit-modal-ref.ts","kit-modal.module.ts":"src/kit-modal/kit-modal.module.ts","kit-modal.service.ts":"src/kit-modal/kit-modal.service.ts","kit-modal.ts":"src/kit-modal/kit-modal.ts","kit-modal":{"kit-modal.component.ts":"src/kit-modal/kit-modal/kit-modal.component.ts"},"meta.ts":"src/kit-modal/meta.ts"},"kit-moment":{"kit-moment-provider.ts":"src/kit-moment/kit-moment-provider.ts","kit-moment.ts":"src/kit-moment/kit-moment.ts"},"kit-mq":{"kit-mq.module.ts":"src/kit-mq/kit-mq.module.ts","kit-mq.service.ts":"src/kit-mq/kit-mq.service.ts","kit-mq.ts":"src/kit-mq/kit-mq.ts","kit-mq":{"kit-mq.directive.ts":"src/kit-mq/kit-mq/kit-mq.directive.ts"},"meta.ts":"src/kit-mq/meta.ts","README.md":"src/kit-mq/README.md"},"kit-outside-click":{"kit-outside-click.directive.ts":"src/kit-outside-click/kit-outside-click.directive.ts","kit-outside-click.module.ts":"src/kit-outside-click/kit-outside-click.module.ts","kit-outside-click.service.ts":"src/kit-outside-click/kit-outside-click.service.ts","kit-outside-click.ts":"src/kit-outside-click/kit-outside-click.ts","README.md":"src/kit-outside-click/README.md"},"kit-overlay":{"kit-overlay-component-ref.ts":"src/kit-overlay/kit-overlay-component-ref.ts","kit-overlay-host":{"kit-overlay-host-wrapper.component.ts":"src/kit-overlay/kit-overlay-host/kit-overlay-host-wrapper.component.ts","kit-overlay-host.component.ts":"src/kit-overlay/kit-overlay-host/kit-overlay-host.component.ts"},"kit-overlay-toggle":{"kit-overlay-toggle.directive.ts":"src/kit-overlay/kit-overlay-toggle/kit-overlay-toggle.directive.ts"},"kit-overlay.module.ts":"src/kit-overlay/kit-overlay.module.ts","kit-overlay.service.ts":"src/kit-overlay/kit-overlay.service.ts","kit-overlay.ts":"src/kit-overlay/kit-overlay.ts","kit-overlay":{"kit-overlay.directive.ts":"src/kit-overlay/kit-overlay/kit-overlay.directive.ts"},"meta.ts":"src/kit-overlay/meta.ts","README.md":"src/kit-overlay/README.md"},"kit-platform":{"kit-platform.service.ts":"src/kit-platform/kit-platform.service.ts","kit-platform.ts":"src/kit-platform/kit-platform.ts"},"kit-position":{"kit-pin-position":{"kit-pin-position.directive.ts":"src/kit-position/kit-pin-position/kit-pin-position.directive.ts"},"kit-position.module.ts":"src/kit-position/kit-position.module.ts","kit-position.ts":"src/kit-position/kit-position.ts","meta.ts":"src/kit-position/meta.ts"},"kit-ref":{"kit-ref.directive.ts":"src/kit-ref/kit-ref.directive.ts","kit-ref.module.ts":"src/kit-ref/kit-ref.module.ts","kit-ref.ts":"src/kit-ref/kit-ref.ts"},"kit-repeat":{"kit-repeat.directive.ts":"src/kit-repeat/kit-repeat.directive.ts","kit-repeat.module.ts":"src/kit-repeat/kit-repeat.module.ts","kit-repeat.ts":"src/kit-repeat/kit-repeat.ts"},"kit-scroll":{"kit-scroll.service.ts":"src/kit-scroll/kit-scroll.service.ts","kit-scroll.ts":"src/kit-scroll/kit-scroll.ts","meta.ts":"src/kit-scroll/meta.ts"},"kit-slide":{"kit-slide-host.service.ts":"src/kit-slide/kit-slide-host.service.ts","kit-slide.module.ts":"src/kit-slide/kit-slide.module.ts","kit-slide.ts":"src/kit-slide/kit-slide.ts","kit-slide":{"kit-slide.directive.ts":"src/kit-slide/kit-slide/kit-slide.directive.ts"},"meta.ts":"src/kit-slide/meta.ts","README.md":"src/kit-slide/README.md"},"kit-style":{"kit-style.module.ts":"src/kit-style/kit-style.module.ts","kit-style.service.ts":"src/kit-style/kit-style.service.ts","kit-style.ts":"src/kit-style/kit-style.ts","meta.ts":"src/kit-style/meta.ts","README.md":"src/kit-style/README.md"},"kit-value-accessor":{"kit-default-model-interceptor.ts":"src/kit-value-accessor/kit-default-model-interceptor.ts","kit-model-interceptor.ts":"src/kit-value-accessor/kit-model-interceptor.ts","kit-value-accessor.directive.ts":"src/kit-value-accessor/kit-value-accessor.directive.ts","kit-value-accessor.module.ts":"src/kit-value-accessor/kit-value-accessor.module.ts","kit-value-accessor.ts":"src/kit-value-accessor/kit-value-accessor.ts","README.md":"src/kit-value-accessor/README.md"},"util":{"is-array.ts":"src/util/is-array.ts","is-defined.ts":"src/util/is-defined.ts","is-function.ts":"src/util/is-function.ts","is-mergable.ts":"src/util/is-mergable.ts","is-object.ts":"src/util/is-object.ts","is-string.ts":"src/util/is-string.ts","is-undefined.ts":"src/util/is-undefined.ts","merge-deep.ts":"src/util/merge-deep.ts","partial.ts":"src/util/partial.ts","util.ts":"src/util/util.ts","uuid.ts":"src/util/uuid.ts"}},"test.ts":"test.ts","test":{"utils":{"dispatch-events.ts":"test/utils/dispatch-events.ts","event-objects.ts":"test/utils/event-objects.ts"}},"docs":{"CONTRIBUTING.md":"docs/CONTRIBUTING.md","DEV.md":"docs/DEV.md"},"README.md":"README.md"}}